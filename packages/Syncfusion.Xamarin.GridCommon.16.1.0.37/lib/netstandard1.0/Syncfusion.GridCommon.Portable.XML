<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.GridCommon.Portable</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.GridCommon.Generic.ITreeTableEntryHost">
            <summary>
            Tree table entry host 
            </summary>
            <exclude/>  
        </member>
        <member name="T:Syncfusion.GridCommon.Generic.GenericTreeTableEntry`1">
             <summary>
             A leaf in the tree with value and optional sort key.
             </summary>
             <typeparam name="T">Tree value</typeparam>
             <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="T:Syncfusion.GridCommon.TreeTableNode">
             <summary>
             A branch or leaf in the tree.
             </summary>
             <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="T:Syncfusion.GridCommon.ITreeTableNode">
             <summary>
             A branch or leaf in the tree.
             </summary>
             <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableNode.GetPosition">
            <summary>
            Gets the position in the tree.
            </summary>
            <returns>Returns the position in the tree.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableNode.GetCount">
             <summary>
            Gets the number of child nodes (+1 for the current node).
             </summary>
             <returns> Returns the number of child nodes (+1 for the current node).</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableNode.IsEmpty">
            <summary>
            Indicates whether leaf is empty.
            </summary>
            <returns>Returns the boolean value indicates whether the leaf is empty</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableNode.IsEntry">
            <summary>
            Indicates whether this is a leaf.
            </summary>
            <returns>Returns the boolean value indicates whether this is a leaf</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableNode.GetLevel">
            <summary>
            Gets the tree level of this node.
            </summary>
            <returns> Returns the tree level of this node.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableNode.GetMinimum">
            <summary>
            Gets the minimum value (of the leftmost leaf) of the branch in a sorted tree.
            </summary>
            <returns>Returns the minimum value (of the leftmost leaf) of the branch in a sorted tree.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableNode.InvalidateCounterBottomUp(System.Boolean)">
            <summary>
            Walk up parent branches and reset counters.
            </summary>
            <param name="notifyParentRecordSource">boolean value</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableNode.InvalidateSummariesBottomUp(System.Boolean)">
            <summary>
            Walk up parent branches and reset summaries.
            </summary>
            <param name="notifyParentRecordSource">boolean value</param>
        </member>
        <member name="P:Syncfusion.GridCommon.ITreeTableNode.Parent">
            <summary>
            Gets or sets the parent branch.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableNode.GetPosition">
            <summary>
            Gets the position in the tree.
            </summary>
            <returns>Returns the position in the tree.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableNode.GetMinimum">
            <summary>
            Gets the minimum value (of the most-left leaf) of the branch in a sorted tree.
            </summary>
            <returns> Returns the minimum value (of the most-left leaf) of the branch in a sorted tree.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableNode.IsEmpty">
            <summary>
            Indicates whether leaf is empty.
            </summary>
            <returns>Returns the boolean value indicates whether the leaf is empty</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableNode.IsEntry">
            <summary>
            Indicates whether this is a leaf.
            </summary>
            <returns>Returns the boolean value indicates whether this is a leaf</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableNode.GetCount">
            <summary>
            Gets the number of child nodes (+1 for the current node).
            </summary>
            <returns>Returns the number of child nodes (+1 for the current node).</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableNode.GetLevel">
            <summary>
            Gets the tree level of this node.
            </summary>
            <returns>Returns the tree level of this node.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableNode.GetNodeInfo">
            <summary>
            Gets the Debug / text information about the node.
            </summary>
            <returns>Returns the Debug / text information about the node.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableNode.ToString">
            <summary>
            Gets the Debug / text information about the node.
            </summary>
            <returns>Returns the Debug / text information about the node.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableNode.InvalidateCounterBottomUp(System.Boolean)">
            <summary>
            Walks up parent branches and reset counters.
            </summary>
            <param name="notifyParentRecordSource">boolean value</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableNode.InvalidateSummariesBottomUp(System.Boolean)">
            <summary>
            Walks up parent branches and reset summaries.
            </summary>
            <param name="notifyParentRecordSource">boolean value</param>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTableNode.Tree">
            <summary>
            Gets or sets the tree this node belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTableNode.Parent">
            <summary>
            Gets or sets the parent branch.
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.ITreeTableEntry">
            <summary>
            A leaf with value and optional sort key.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableEntry.GetSortKey">
            <summary>
            Gets the sort key of this leaf.
            </summary>
            <returns>Returns the sort key of this leaf.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableEntry.CreateBranch(Syncfusion.GridCommon.TreeTable)">
            <summary>
            Creates a branch that can hold this entry when new leaves are inserted into the tree.
            </summary>
            <param name="tree">tree table instance</param>
            <returns>
             Returns the instance of newly created branch
            </returns>
        </member>
        <member name="P:Syncfusion.GridCommon.ITreeTableEntry.Value">
            <summary>
            Gets or sets the value attached to this leaf.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableEntry`1.#ctor">
            <summary>
            Initializes a new instance of the GenericTreeTableEntry class.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableEntry`1.#ctor(Syncfusion.GridCommon.TreeTable,`0)">
            <summary>
            Initializes a new instance of the GenericTreeTableEntry class.
            </summary>
            <param name="tree">current tree instance</param>
            <param name="value">tree value</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableEntry`1.#ctor(Syncfusion.GridCommon.Generic.GenericTreeTable{`0},`0)">
            <summary>
            Initializes a new instance of the GenericTreeTableEntry class.
            </summary>
            <param name="tree">Internal tree</param>
            <param name="value">tree value</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableEntry`1.GetSortKey">
            <summary>
            The sort key of this leaf.
            </summary>
            <returns>
            Returns the sort key of this leaf
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableEntry`1.GetMinimum">
            <summary>
            The minimum value (of the most-left leaf) of the branch in a sorted tree.
            </summary>
            <returns>
            Returns the minimum value (of the most-left leaf) of the branch in a sorted tree.
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableEntry`1.GetCount">
            <summary>
            The number of child nodes (+1 for the current node).
            </summary>
            <returns>
            Returns the number of child nodes (+1 for the current node).
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableEntry`1.CreateBranch(Syncfusion.GridCommon.TreeTable)">
            <summary>
            Creates a branch that can hold this entry when new leaves are inserted into the tree.
            </summary>
            <param name="tree">tree instance</param>
            <returns>
            Returns the instance of newly created branch
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableEntry`1.GetNodeInfo">
            <summary>
            The Debug / text information about the node.
            </summary>
            <returns>
             Returns the Debug / text information about the node.
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableEntry`1.IsEntry">
            <summary>
            Indicates whether this is a leaf.
            </summary>
            <returns>Returns boolean value</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableEntry`1.Value">
            <summary>
            Gets or sets the value attached to this leaf.
             </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.Generic.GenericTreeTable`1">
             <summary>
             A tree table.
             </summary>
             <typeparam name="T">Generic tree table</typeparam>
             <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="T:Syncfusion.GridCommon.ITreeTable">
            <summary>
            Tree table interface definition.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTable.BeginInit">
            <summary>
            Optimizes insertion of many elements when tree is initialized for the first time.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTable.EndInit">
            <summary>
            Ends optimization of insertion of elements when tree is initialized for the first time.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTable.GetNextEntry(Syncfusion.GridCommon.ITreeTableEntry)">
            <summary>
            Optimized access to a subsequent entry.
            </summary>
            <param name="current">current item</param>
            <returns>Returns next subsequent entry</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTable.GetPreviousEntry(Syncfusion.GridCommon.ITreeTableEntry)">
            <summary>
            Optimized access to a previous entry.
            </summary>
            <param name="current">current item</param>
            <returns>Returns previous entry</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.ITreeTable.Sorted">
            <summary>
            Gets a value indicating whether this is a sorted tree or not.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.ITreeTable.Comparer">
            <summary>
            Gets or sets the comparer value used by sorted trees.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.ITreeTable.Root">
            <summary>
            Gets the root node.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.ITreeTable.IsInitializing">
             <summary>
            Gets a value indicating whether the tree was initialize or not.
             </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTable`1.#ctor(System.Boolean)">
             <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.Generic.GenericTreeTable`1"/> class.
             </summary>
             <param name="sorted">boolean value denotes whether the tree is sorted or not</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTable`1.Dispose">
            <summary>
            Disposes of the object.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTable`1.BeginInit">
            <summary>
            Optimizes insertion of many items when thisTree is initialized for the first time.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTable`1.EndInit">
            <summary>
            Ends optimization of insertion of items when thisTree is initialized for the first time.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTable`1.GetNextEntry(Syncfusion.GridCommon.Generic.GenericTreeTableEntry{`0})">
            <summary>
            Optimized access to a subsequent entry.
            </summary>
            <param name="current"> current entry</param>
            <returns>
            Returns next subsequent entry
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTable`1.Syncfusion#GridCommon#ITreeTable#GetNextEntry(Syncfusion.GridCommon.ITreeTableEntry)">
            <summary>
            Optimized access to a subsequent entry.
            </summary>
            <param name="current"> current entry</param>
            <returns>
            Returns next subsequent entry
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTable`1.GetPreviousEntry(Syncfusion.GridCommon.Generic.GenericTreeTableEntry{`0})">
            <summary>
            Optimized access to the previous entry.
            </summary>
            <param name="current">current entry</param>
            <returns>
            Returns previous entry
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTable`1.Syncfusion#GridCommon#ITreeTable#GetPreviousEntry(Syncfusion.GridCommon.ITreeTableEntry)">
            <summary>
            Optimized access to the previous entry.
            </summary>
            <param name="current">current entry</param>
            <returns>
            Returns previous entry
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTable`1.AddIfNotExists(System.Object,Syncfusion.GridCommon.Generic.GenericTreeTableEntry{`0})">
            <summary>
            Add the key if it is not in the collection
            </summary>
            <param name="key">key needs to be add</param>
            <param name="entry">tree value</param>
            <returns>Returns the instance for the tree</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTable`1.IndexOfKey(System.Object)">
            <summary>
            Used to find the index of the specified key
            </summary>
            <param name="key">key value</param>
            <returns>Returns the index of the key</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTable`1.FindKey(System.Object)">
            <summary>
            Used to find the key in the collection
            </summary>
            <param name="key">key needs to find</param>
            <returns>Returns the value corresponding to the specified key</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTable`1.FindHighestSmallerOrEqualKey(System.Object)">
            <summary>
            Used to find the key approximate to the specified key
            </summary>
            <param name="key">key needs to be search</param>
            <returns>Returns the value corresponds to the approximate key</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTable`1.Insert(System.Int32,Syncfusion.GridCommon.Generic.GenericTreeTableEntry{`0})">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the item should be inserted.</param>
            <param name="item">The item to insert. The value must not be a NULL reference (Nothing in Visual Basic). </param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTable`1.Remove(Syncfusion.GridCommon.Generic.GenericTreeTableEntry{`0})">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="item">The item to remove from the collection. If the value is NULL or the item is not contained
            in the collection, the method will do nothing.</param>
            <returns>Returns the collection after removing the specified item from the tree collection</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTable`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTable`1.IndexOf(Syncfusion.GridCommon.Generic.GenericTreeTableEntry{`0})">
            <summary>
            Returns the zero-based index of the occurrence of the item in the collection.
            </summary>
            <param name="item">The item to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the item within the entire collection, if found; otherwise -1.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTable`1.Add(Syncfusion.GridCommon.Generic.GenericTreeTableEntry{`0})">
            <summary>
            Adds a value to the end of the collection.
            </summary>
            <param name="item">The item to be added to the end of the collection. The value must not be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTable`1.System#Collections#Generic#ICollection{Syncfusion#GridCommon#Generic#GenericTreeTableEntry{T}}#Add(Syncfusion.GridCommon.Generic.GenericTreeTableEntry{`0})">
            <summary>
            Add an item to the collection
            </summary>
            <param name="item">tree needs to be add in an collection</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTable`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTable`1.Contains(Syncfusion.GridCommon.Generic.GenericTreeTableEntry{`0})">
            <summary>
            Determines if the item belongs to this collection.
            </summary>
            <param name="item">The object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTable`1.CopyTo(Syncfusion.GridCommon.Generic.GenericTreeTableEntry{`0}[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the items copied from the  ArrayList. The array must have zero-based indexing. </param>
            <param name="index">The zero-based index in an array at which copying begins. </param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTable`1.GetEnumerator">
            <summary>
             An enumerator for the entire collection.
            </summary>
            <returns>Returns an Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading the data in the collection. 
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTable`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts a node at the specified index.
            </summary>
            <param name="index">position where to insert the value</param>
            <param name="value">tree value need to be insert</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTable`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the node with the specified value.
            </summary>
            <param name="value">tree value needs to be remove</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTable`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Indicates whether the node belongs to this tree.
            </summary>
            <param name="value">value needs to be search in the tree</param>
            <returns>Returns the boolean value indicating whether the node belongs to this tree.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTable`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Gets the index of the specified object.
            </summary>
            <param name="value">Value of the object.</param>
            <returns>Returns the index value of the object.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTable`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds the specified object to the collection.
            </summary>
            <param name="value">Value of the object to add.</param>
            <returns>Returns the zero-based collection index at which the value has been added</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTable`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the element from this collection into an array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="index">The starting index in the destination array.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            An enumerator for the entire collection.
            </summary>
            <returns>Returns an Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading the data in the collection. 
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTable`1.Tag">
            <summary>
            Gets or sets the tag that can be associated with the tree
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTable`1.Identifier">
            <summary>
            Gets or sets the identifier
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTable`1.InternalTree">
            <summary>
            Gets the non-generic tree table with actual implementation.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTable`1.Root">
            <summary>
            Gets the root node.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTable`1.Sorted">
            <summary>
            Gets a value indicating whether thisTree is sorted or not.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTable`1.Comparer">
            <summary>
            Gets or sets the comparer used by sorted trees.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTable`1.IsInitializing">
            <summary>
            Gets a value indicating whether the tree was initialize or not.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTable`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the zero-based index.
            </summary>
            <param name="index">index value</param>
            <returns>Returns the Tree value</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTable`1.Count">
            <summary>
            Gets the number of items contained in the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTable`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
            <returns>true if the collection is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTable`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the item with the specified index.
            </summary>
            <param name="index">Index value of the item.</param>
            <returns>Returns the item at the specified index.</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTable`1.System#Collections#IList#IsFixedSize">
            <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
            <returns>
            <b>True</b> if the collection has a fixed size; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTable`1.IsFixedSize">
            <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
            <returns>
            <b>True</b> if the collection has a fixed size; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTable`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value><b>True</b> if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, <b>false</b>. Returns false.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTable`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </value>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTable`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </value>
        </member>
        <member name="T:Syncfusion.GridCommon.Generic.GenericTreeTableEnumerator`1">
            <summary>
            Returns an enumerator for the entire collection.
             </summary>
             <typeparam name="T">Represents a generic type parameter</typeparam>
             <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="T:Syncfusion.GridCommon.TreeTableEnumerator">
             <summary>
             Strongly typed enumerator for <see cref="T:Syncfusion.GridCommon.TreeTable"/>.
             </summary>
             <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEnumerator.#ctor(Syncfusion.GridCommon.ITreeTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.TreeTableEnumerator"/> class.
            </summary>
            <param name="tree">tree instance</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEnumerator.Reset">
            <summary>
            Resets the enumerator.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEnumerator.MoveNext">
            <summary>
            Indicates whether to move to the next node.
            </summary>
            <returns>Returns a boolean value indicating whether to move to the next node.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEnumerator.Dispose">
            <summary>
            Disposes all the resources.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEnumerator.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the component and optionally releases the managed resources.
            </summary>
            <param name="disposing"> if true - release both managed and unmanaged resources; 
            if false - release only unmanaged resources.
            </param>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTableEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current enumerator.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTableEnumerator.Current">
            <summary>
            Gets the current node.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableEnumerator`1.#ctor(Syncfusion.GridCommon.ITreeTable)">
            <summary>
            Initializes a new instance of the GenericTreeTableEnumerator class.
            </summary>
            <param name="tree">tree instance</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableEnumerator`1.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the component and optionally releases the managed resources.
            </summary>
            <param name="disposing"> if true - release both managed and unmanaged resources; 
            if false - release only unmanaged resources.
            </param>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableEnumerator`1.Current">
            <summary>
            Gets the current item in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.Generic.IGenericBinaryTreeCollection`1">
            <summary>
             Preparing for a "VirtualUnsortedRecordsCollection" implementation in grouping
             where yet another wrapper can then switch between VirtualUnsortedRecordsCollection
             or GenericBinaryTreeCollection for UnsortedRecords.
              </summary>
            <typeparam name="T">Represents a generic type parameter</typeparam>
            [ClassReference(IsReviewed = false)]
            <exclude/>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.IGenericBinaryTreeCollection`1.Add(`0)">
            <summary>
            Add an item to the collection
            </summary>
            <param name="item">tree needs to be add in an collection</param>
            <returns>Returns the instance of a collection</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.IGenericBinaryTreeCollection`1.BeginInit">
            <summary>
            Suspends the view until the <see cref="M:Syncfusion.GridCommon.Generic.IGenericBinaryTreeCollection`1.EndInit"/> is called
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.IGenericBinaryTreeCollection`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.IGenericBinaryTreeCollection`1.Contains(`0)">
            <summary>
            Determines if the item belongs to this collection.
            </summary>
            <param name="item">The object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.IGenericBinaryTreeCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the items copied from the  ArrayList. The array must have zero-based indexing. </param>
            <param name="arrayIndex">The zero-based index in an array at which copying begins. </param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.IGenericBinaryTreeCollection`1.Dispose">
            <summary>
            Releases all resources used by the Component.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.IGenericBinaryTreeCollection`1.EndInit">
            <summary>
            Used to resume all the operations which were suspend in the <see cref="M:Syncfusion.GridCommon.Generic.IGenericBinaryTreeCollection`1.BeginInit"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.IGenericBinaryTreeCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading the data in the collection. 
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.IGenericBinaryTreeCollection`1.GetNext(`0)">
            <summary>
            Used to get the next item in the collection.
            </summary>
            <param name="current">current item</param>
            <returns>
             Returns the next item in the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.IGenericBinaryTreeCollection`1.GetPrevious(`0)">
             <summary>
            Used to get the previous item in the collection
             </summary>
             <param name="current">current item</param>
             <returns>
              Returns the previous item in the collection.
             </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.IGenericBinaryTreeCollection`1.IndexOf(`0)">
            <summary>
            Returns the zero-based index of the occurrence of the item in the collection.
            </summary>
            <param name="item">The item to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the item within the entire collection, if found; otherwise -1.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.IGenericBinaryTreeCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the item should be inserted.</param>
            <param name="item">The item to insert. The value must not be a NULL reference (Nothing in Visual Basic). </param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.IGenericBinaryTreeCollection`1.Remove(`0)">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="item">The item to remove from the collection. If the value is NULL or the item is not contained
            in the collection, the method will do nothing.</param>
            <returns>Returns the collection after removing the specified item from the tree collection</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.IGenericBinaryTreeCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.IGenericBinaryTreeCollection`1.AddIfNotExists(System.Object,`0)">
            <summary>
            Add the key if the collection does not contains the specified key
            </summary>
            <param name="key">key needs to be add in the collection</param>
            <param name="item">The collection</param>
            <returns>Returns the tree</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.IGenericBinaryTreeCollection`1.IndexOfKey(System.Object)">
            <summary>
            Used to get the index of the key
            </summary>
            <param name="key">key value</param>
            <returns>Returns the index of the specified key</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.IGenericBinaryTreeCollection`1.FindKey(System.Object)">
            <summary>
            Used to find the key in the collection
            </summary>
            <param name="key">key needs to find</param>
            <returns>Returns the value corresponding to the specified key</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.IGenericBinaryTreeCollection`1.FindHighestSmallerOrEqualKey(System.Object)">
            <summary>
            Used to find the key approximate to the specified key
            </summary>
            <param name="key">key needs to be search</param>
            <returns>Returns the value corresponds to the approximate key</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.IGenericBinaryTreeCollection`1.Count">
            <summary>
            Gets the number of items contained in the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.IGenericBinaryTreeCollection`1.IsInitializing">
            <summary>
            Gets a value indicating whether the <see cref="M:Syncfusion.GridCommon.Generic.IGenericBinaryTreeCollection`1.BeginInit"/> was called or not.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.IGenericBinaryTreeCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
            <value></value>
            <returns>true if the collection is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.IGenericBinaryTreeCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the zero-based index.
            </summary>
            <param name="index">index value</param>
            <returns>Returns the Tree value</returns>
        </member>
        <member name="T:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1">
            <summary>
            Preparing for a "VirtualUnsortedRecordsCollection" implementation in grouping
             where yet another wrapper can then switch between VirtualUnsortedRecordsCollection
             or GenericBinaryTreeCollection for UnsortedRecords.
             </summary>
             <typeparam name="T">Represents a generic type parameter</typeparam>
             <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.#ctor(Syncfusion.GridCommon.Generic.GenericTreeTable{`0})">
            <summary>
            Initializes a new instance of the GenericBinaryTreeCollection class.
            </summary>
            <param name="genericTree">generic tree instance</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.#ctor(System.Boolean)">
            <summary>
             Initializes a new instance of the GenericBinaryTreeCollection class.
            </summary>
            <param name="sorted">boolean value holds whether the tree is sorted or not</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.Dispose">
            <summary>
            Disposes all the resources.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the component and optionally releases the managed resources.
            </summary>
            <param name="disposing"> if true - release both managed and unmanaged resources; 
            if false - release only unmanaged resources.
            </param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.GetNext(`0)">
            <summary>
            Used to get the next item in the collection.
            </summary>
            <param name="current">current item</param>
            <returns>
             Returns the next item in the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.GetPrevious(`0)">
             <summary>
            Used to get the previous item in the collection
             </summary>
             <param name="current">current item</param>
             <returns>
              Returns the previous item in the collection.
             </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.AddIfNotExists(System.Object,`0)">
            <summary>
            Add the key if the collection does not contains the specified key
            </summary>
            <param name="key">key needs to be add in the collection</param>
            <param name="item">The collection</param>
            <returns>Returns the tree</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.IndexOfKey(System.Object)">
            <summary>
            Used to get the index of the key
            </summary>
            <param name="key">key value</param>
            <returns>Returns the index of the specified key</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.FindKey(System.Object)">
            <summary>
            Used to find the key in the collection
            </summary>
            <param name="key">key needs to find</param>
            <returns>Returns the value corresponding to the specified key</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.FindHighestSmallerOrEqualKey(System.Object)">
            <summary>
            Used to find the key approximate to the specified key
            </summary>
            <param name="key">key needs to be search</param>
            <returns>Returns the value corresponds to the approximate key</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.BeginInit">
            <summary>
            Suspends the view until the <see cref="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.EndInit"/> is called
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.EndInit">
            <summary>
            Used to resume all the operations which were suspend in the <see cref="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.BeginInit"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.RaiseEnsureInitialized(System.String)">
            <summary>
             If exists then method will discard "item" and return found value. If it does not exist then method will add item to collection and return "item"
            </summary>
            <param name="member">key or value needs to be initialize</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.IndexOf(`0)">
            <summary>
            Returns the zero-based index of the occurrence of the item in the collection.
            </summary>
            <param name="item">The item to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the item within the entire collection, if found; otherwise -1.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the item should be inserted.</param>
            <param name="item">The item to insert. The value must not be a NULL reference (Nothing in Visual Basic). </param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.Add(`0)">
            <summary>
            Add an item to the collection
            </summary>
            <param name="item">tree needs to be add in an collection</param>
            <returns>Returns the instance of a collection</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Add an item to the collection
            </summary>
            <param name="item">tree needs to be add in an collection</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.Contains(`0)">
            <summary>
            Determines if the item belongs to this collection.
            </summary>
            <param name="item">The object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the items copied from the  ArrayList. The array must have zero-based indexing. </param>
            <param name="arrayIndex">The zero-based index in an array at which copying begins. </param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.Remove(`0)">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="item">The item to remove from the collection. If the value is NULL or the item is not contained
            in the collection, the method will do nothing.</param>
            <returns>Returns the collection after removing the specified item from the tree collection</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading the data in the collection. 
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading the data in the collection. 
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds the specified object to the collection.
            </summary>
            <param name="value">Value of the object to add.</param>
            <returns>Returns the zero-based collection index at which the value has been added</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Indicates whether the node belongs to this tree.
            </summary>
            <param name="value">value needs to be search in the tree</param>
            <returns>Returns the boolean value indicating whether the node belongs to this tree.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Returns the index of the specified object.
            </summary>
            <param name="value">Value of the object.</param>
            <returns>Index value of the object.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts a node at the specified index.
            </summary>
            <param name="index">position where to insert the value</param>
            <param name="value">tree value need to be insert</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.System#Collections#IList#Remove(System.Object)">
            <summary>
             Removes the node with the specified value.
             </summary>
             <param name="value">tree value needs to be remove</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the element from this collection into an array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="index">The starting index in the destination array.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.SuspendRaiseEvents">
            <summary>
            Suspends the TreeTable
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.ResumeRaiseEvents">
            <summary>
            Resumes the TreeTable
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.RaiseCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Occurs when collection is changed
            </summary>
            <param name="args">Holds the collection changed event arguments</param>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.InternalTable">
            <summary>
            Gets the current generic tree
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.Tag">
            <summary>
            Gets or sets the tag that can be associated with the tree
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.Identifier">
            <summary>
            Gets or sets the identifier
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.IsInitializing">
            <summary>
            Gets a value indicating whether the tree was initialize or not.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.EnsureInitialized">
            <summary>
             If exists then method will discard "item" and return found value. If it does not exist then method will add item to collection and return "item"
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the zero-based index.
            </summary>
            <param name="index">index value</param>
            <returns>Returns the Tree value</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.Count">
            <summary>
            Gets the number of items contained in the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
            <returns>true if the collection is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.System#Collections#IList#IsFixedSize">
            <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
            <returns>
            <b>True</b> if the collection has a fixed size; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.IsFixedSize">
            <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
            <returns>
            <b>True</b> if the collection has a fixed size; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the item with the specified index.
            </summary>
            <param name="index">Index value of the item.</param>
            <returns>Returns the item at the specified index.</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value><b>True</b> if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value><b>True</b> if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, <b>false</b>. Returns false.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </value>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </value>
        </member>
        <member name="E:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.CollectionChanged">
            <summary>
            Occurs when collection changed
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1.IsInSuspend">
            <summary>
            Gets a value indicating whether the suspend value is set or not
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollectionEnumerator`1">
             <exclude/>
            [ClassReference(IsReviewed = false)]
             <summary>
             Enumerator class for items of a <see cref="T:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection`1"/>.
             </summary>
             <typeparam name="T">Represents a generic type parameter</typeparam>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollectionEnumerator`1.#ctor(Syncfusion.GridCommon.Generic.GenericBinaryTreeCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollectionEnumerator`1"/> class.
            </summary>
            <param name="collection">The parent collection to enumerate.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollectionEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first item in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollectionEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next item of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next item; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollectionEnumerator`1.Dispose">
            <summary>
            Perform final clean up before it is released from memory.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollectionEnumerator`1.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the component and optionally releases the managed resources.
            </summary>
            <param name="disposing"> if true - release both managed and unmanaged resources; 
            if false - release only unmanaged resources.
            </param>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollectionEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current enumerator.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeCollectionEnumerator`1.Current">
            <summary>
            Gets the current item in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.Generic.GenericTreeTableEnsureInitializedEventArgs">
            <summary>
             Provides data for the System.ComponentModel.INotifyPropertyChanged.PropertyChanged
             event.
             </summary>
            [ClassReference(IsReviewed = false)]
            <exclude/>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableEnsureInitializedEventArgs.#ctor(System.String)">
            <summary>
             Initializes a new instance of the GenericTreeTableEnsureInitializedEventArgs class.
            </summary>
            <param name="memberName">Name of the property that changed</param>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableEnsureInitializedEventArgs.MemberName">
            <summary>
             Gets the name of the property that changed.
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounterEntry`2">
             <summary>
             A tree leaf with value and summary information.
             </summary>
             <typeparam name="T1">Represents a generic type counter source parameter</typeparam>
             <typeparam name="T2">Represents a generic type counter parameter</typeparam>
             <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="T:Syncfusion.GridCommon.TreeTableWithCounterEntry">
             <summary>
             A tree leaf with value, sort key and counter information.
             </summary>
             <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="T:Syncfusion.GridCommon.TreeTableWithSummaryEntry">
            <summary>
            A tree leaf with value and summary information.
            </summary>
            <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="T:Syncfusion.GridCommon.TreeTableEntry">
             <summary>
             A leaf in the tree with value and optional sort key.
             </summary>
             <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEntry.GetSortKey">
            <summary>
            Gets the sort key of this leaf.
            </summary>
            <returns>Returns the sort key of this leaf.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEntry.GetMinimum">
            <summary>
            Gets the minimum value (of the most-left leaf) of the branch in a sorted tree.
            </summary>
            <returns>Returns the minimum value (of the most-left leaf) of the branch in a sorted tree.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEntry.GetCount">
            <summary>
            Gets the number of child nodes (+1 for the current node).
            </summary>
            <returns>Returns the number of child nodes (+1 for the current node).</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEntry.CreateBranch(Syncfusion.GridCommon.TreeTable)">
            <summary>
            Creates a branch that can hold this entry when new leaves are inserted into the tree.
            </summary>
            <param name="tree">tree table instance</param>
            <returns>
             Returns the instance of newly created branch
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEntry.GetNodeInfo">
            <summary>
            Gets the Debug / text information about the node.
            </summary>
            <returns> Returns the Debug / text information about the node.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEntry.IsEntry">
            <summary>
            Indicates whether this is a leaf.
            </summary>
            <returns>Returns the boolean value</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTableEntry.Value">
            <summary>
            Gets or sets the value attached to this leaf.
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.ITreeTableSummaryNode">
            <summary>
            Interface definition for a node that has one or more summaries.
            </summary>
            <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableSummaryNode.GetSummaries(Syncfusion.GridCommon.ITreeTableEmptySummaryArraySource)">
            <summary>
            Gets an array of summary objects.
            </summary>
            <param name="emptySummaries">The empty summaries.</param>
            <returns>Returns an array of summary objects.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableSummaryNode.InvalidateSummariesTopDown(System.Boolean)">
            <summary>
            Marks all summaries dirty in this node and child nodes.
            </summary>
            <param name="notifyEntrySummary">if set to <b>true</b> notify entry summary.</param>
        </member>
        <member name="P:Syncfusion.GridCommon.ITreeTableSummaryNode.HasSummaries">
            <summary>
            Gets a value indicating whether node has summaries or not.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithSummaryEntry.CreateBranch(Syncfusion.GridCommon.TreeTable)">
            <summary>
            Creates a branch that can hold this entry when new leaves are inserted into the tree.
            </summary>
            <param name="tree">tree instance</param>
            <returns>Returns an instance for newly created TreeTable</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithSummaryEntry.GetSummaries(Syncfusion.GridCommon.ITreeTableEmptySummaryArraySource)">
            <summary>
            Gets an array of summary objects.
            </summary>
            <param name="emptySummaries">The empty summaries.</param>
            <returns>Returns an array of summary objects.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithSummaryEntry.OnGetSummaries(Syncfusion.GridCommon.ITreeTableEmptySummaryArraySource)">
            <summary>
            Called from <see cref="M:Syncfusion.GridCommon.TreeTableWithSummaryEntry.GetSummaries(Syncfusion.GridCommon.ITreeTableEmptySummaryArraySource)"/> when called the first time after summaries were invalidated.
            </summary>
            <param name="emptySummaries">The empty summaries.</param>
            <returns>Returns an array of summary objects.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithSummaryEntry.GetSummaryArraySource">
            <summary>
            Gets the value as <see cref="T:Syncfusion.GridCommon.ITreeTableSummaryArraySource"/>.
            </summary>
            <returns>Returns the value as <see cref="T:Syncfusion.GridCommon.ITreeTableSummaryArraySource"/>.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithSummaryEntry.InvalidateSummariesBottomUp(System.Boolean)">
            <summary>
            Walks up parent branches and reset summaries.
            </summary>
            <param name="notifyParentRecordSource">boolean value</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithSummaryEntry.InvalidateSummariesTopDown(System.Boolean)">
            <summary>
            Marks all summaries dirty in this node and child nodes.
            </summary>
            <param name="notifySummaryArraySource">if set to <b>true</b> notify summary array source.</param>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTableWithSummaryEntry.TreeTableWithSummary">
            <summary>
            Gets the tree this leaf belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTableWithSummaryEntry.Parent">
            <summary>
            Gets or sets the parent branch.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTableWithSummaryEntry.HasSummaries">
            <summary>
            Gets a value indicating whether the node has summaries or not.
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.ITreeTableCounterNode">
             <summary>
             Interface definition for a node that has counters and summaries.
             </summary>
             <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableCounterNode.GetCounterTotal">
            <summary>
            The total of this node's counter and child nodes.
            </summary>
            <returns> Returns the total of this node's counter and child nodes (cached).</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableCounterNode.GetCounterPosition">
            <summary>
            Gets the cumulative position of this node.
            </summary>
            <returns> Returns the cumulative position of this node.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableCounterNode.InvalidateCounterTopDown(System.Boolean)">
            <summary>
            Marks all counters dirty in this node and child nodes.
            </summary>
            <param name="notifyCounterSource">if set to <b>true</b> notify counter source.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounterEntry.CreateBranch(Syncfusion.GridCommon.TreeTable)">
            <summary>
            Creates a branch that can hold this entry when new leaves are inserted into the tree.
            </summary>
            <param name="tree">tree instance</param>
            <returns>Returns the instance of newly created branch</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounterEntry.GetCounterPosition">
            <summary>
            Gets the cumulative position of this node.
            </summary>
            <returns> Returns the cumulative position of this node.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounterEntry.GetCounterSource">
            <summary>
            Gets the value as <see cref="T:Syncfusion.GridCommon.ITreeTableCounterSource"/>.
            </summary>
            <returns>Returns the value as <see cref="T:Syncfusion.GridCommon.ITreeTableCounterSource"/>.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounterEntry.IsCounterDirty">
            <summary>
            Indicates whether the counter was set dirty.
            </summary>
            <returns>True if dirty; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounterEntry.GetCounterTotal">
            <summary>
            Gets the total of this node's counter and child nodes.
            </summary>
            <returns>Returns the total of this node's counter and child nodes.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounterEntry.InvalidateCounter">
            <summary>
            Reset cached counter.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounterEntry.InvalidateCounterBottomUp(System.Boolean)">
            <summary>
            Invalidates the counter bottom up.
            </summary>
            <param name="notifyCounterSource">if set to <b>true</b> notify counter source.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounterEntry.InvalidateCounterTopDown(System.Boolean)">
            <summary>
            Marks all summaries dirty in this node and child nodes.
            </summary>
            <param name="notifyCounterSource">if set to <b>true</b> notify counter source.</param>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTableWithCounterEntry.TreeTableWithCounter">
            <summary>
            Gets the tree this leaf belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTableWithCounterEntry.Parent">
            <summary>
            Gets or sets the parent branch.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounterEntry`2.#ctor">
            <summary>
             Initializes a new instance of the GenericTreeTableWithCounterEntry class.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounterEntry`2.#ctor(Syncfusion.GridCommon.TreeTable,`0)">
            <summary>
             Initializes a new instance of the GenericTreeTableWithCounterEntry class.
            </summary>
            <param name="tree">tree instance</param>
            <param name="value">tree value</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounterEntry`2.#ctor(Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter{`0,`1},`0)">
            <summary>
            Initializes a new instance of the GenericTreeTableWithCounterEntry class.
            </summary>
            <param name="tree">tree instance</param>
            <param name="value">tree value</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounterEntry`2.GetCounterPosition">
            <summary>
            Used to get the cumulative position of this node.
            </summary>
            <returns> Returns the cumulative position of this node.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounterEntry`2.GetCounterTotal">
            <summary>
            Used to get the total of this node's counter and child nodes.
            </summary>
            <returns> Returns the total of this node's counter and child nodes.</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounterEntry`2.Value">
            <summary>
            Gets or sets the value attached to this leaf.
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2">
            <summary>
            Tree table counter class
             </summary>
             <typeparam name="T1">Represents a generic type counter source parameter</typeparam>
             <typeparam name="T2">Represents a generic type counter parameter</typeparam>
             <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.#ctor(`1,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2"/> class.
            </summary>
            <param name="startPosition">tree instance</param>
            <param name="sorted">boolean value holds whether the tree is sorted or not</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.Dispose">
            <summary>
            Disposes of the object.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.BeginInit">
            <summary>
            Optimizes insertion of many items when thisTree is initialized for the first time.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.EndInit">
            <summary>
            Ends optimization of insertion of items when thisTree is initialized for the first time.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.GetNextEntry(Syncfusion.GridCommon.Generic.GenericTreeTableWithCounterEntry{`0,`1})">
            <summary>
            Optimized access to a subsequent entry.
            </summary>
            <param name="current">current item</param>
            <returns> Returns the next item in the collection.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.Syncfusion#GridCommon#ITreeTable#GetNextEntry(Syncfusion.GridCommon.ITreeTableEntry)">
            <summary>
            Optimized access to a subsequent entry.
            </summary>
            <param name="current"> current entry</param>
            <returns>
            Returns next subsequent entry
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.GetPreviousEntry(Syncfusion.GridCommon.Generic.GenericTreeTableWithCounterEntry{`0,`1})">
            <summary>
            Optimized access to the previous entry.
            </summary>
            <param name="current">current item</param>
            <returns> Returns the previous item in the collection.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.Syncfusion#GridCommon#ITreeTable#GetPreviousEntry(Syncfusion.GridCommon.ITreeTableEntry)">
            <summary>
            Optimized access to the previous entry.
            </summary>
            <param name="current">current entry</param>
            <returns>
            Returns previous entry
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.AddIfNotExists(System.Object,Syncfusion.GridCommon.Generic.GenericTreeTableWithCounterEntry{`0,`1})">
            <summary>
            Add the key if the collection does not contains the specified key
            </summary>
            <param name="key">key needs to be add in the collection</param>
            <param name="entry">The collection</param>
            <returns>Returns the tree</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.IndexOfKey(System.Object)">
            <summary>
            Used to get the index of the key
            </summary>
            <param name="key">key value</param>
            <returns>Returns the index of the specified key</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.FindKey(System.Object)">
            <summary>
            Used to find the key in the collection
            </summary>
            <param name="key">key needs to find</param>
            <returns>Returns the value corresponding to the specified key</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.FindHighestSmallerOrEqualKey(System.Object)">
            <summary>
            Used to find the key approximate to the specified key
            </summary>
            <param name="key">key needs to be search</param>
            <returns>Returns the value corresponds to the approximate key</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.Insert(System.Int32,Syncfusion.GridCommon.Generic.GenericTreeTableWithCounterEntry{`0,`1})">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the item should be inserted.</param>
            <param name="item">The item to insert. The value must not be a NULL reference (Nothing in Visual Basic). </param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.Remove(Syncfusion.GridCommon.Generic.GenericTreeTableWithCounterEntry{`0,`1})">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="item">The item to remove from the collection. If the value is NULL or the item is not contained
            in the collection, the method will do nothing.</param>
            <returns>Returns the collection after removing the specified item from the tree collection</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.IndexOf(Syncfusion.GridCommon.Generic.GenericTreeTableWithCounterEntry{`0,`1})">
            <summary>
            Returns the zero-based index of the occurrence of the item in the collection.
            </summary>
            <param name="item">The item to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the item within the entire collection, if found; otherwise -1.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.Add(Syncfusion.GridCommon.Generic.GenericTreeTableWithCounterEntry{`0,`1})">
            <summary>
            Adds a value to the end of the collection.
            </summary>
            <param name="item">The item to be added to the end of the collection. The value must not be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.System#Collections#Generic#ICollection{Syncfusion#GridCommon#Generic#GenericTreeTableWithCounterEntry{T1@T2}}#Add(Syncfusion.GridCommon.Generic.GenericTreeTableWithCounterEntry{`0,`1})">
            <summary>
            Add an item to the collection
            </summary>
            <param name="item">tree needs to be add in an collection</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.Contains(Syncfusion.GridCommon.Generic.GenericTreeTableWithCounterEntry{`0,`1})">
            <summary>
            Determines if the item belongs to this collection.
            </summary>
            <param name="item">The object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.CopyTo(Syncfusion.GridCommon.Generic.GenericTreeTableWithCounterEntry{`0,`1}[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the items copied from the  ArrayList. The array must have zero-based indexing. </param>
            <param name="index">The zero-based index in an array at which copying begins. </param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading the data in the collection. 
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts a node at the specified index.
            </summary>
            <param name="index">position where to insert the value</param>
            <param name="value">tree value need to be insert</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.System#Collections#IList#Remove(System.Object)">
            <summary>
             Removes the node with the specified value.
             </summary>
             <param name="value">tree value needs to be remove</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.System#Collections#IList#Contains(System.Object)">
            <summary>
            Indicates whether the node belongs to this tree.
            </summary>
            <param name="value">value needs to be search in the tree</param>
            <returns>Returns the boolean value indicating whether the node belongs to this tree.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Returns the index of the specified object.
            </summary>
            <param name="value">Value of the object.</param>
            <returns>Index value of the object.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds the specified object to the collection.
            </summary>
            <param name="value">Value of the object to add.</param>
            <returns>Returns the zero-based collection index at which the value has been added</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the element from this collection into an array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="index">The starting index in the destination array.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading the data in the collection. 
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.InvalidateSummariesTopDown(System.Boolean)">
            <summary>
            Marks all summaries dirty.
            </summary>
            <param name="notifySummariesSource">if set to <b>true</b> notify summaries source.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.GetSummaries(Syncfusion.GridCommon.ITreeTableEmptySummaryArraySource)">
            <summary>
            Gets an array of summary objects.
            </summary>
            <param name="emptySummaries">summary value</param>
            <returns> Returns an array of summary objects.
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.InvalidateCounterTopDown(System.Boolean)">
            <summary>
            Marks all counters dirty.
            </summary>
            <param name="notifyCounterSource">boolean value</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.GetCounterTotal">
            <summary>
            Gets the total of all counters in this tree.
            </summary>
            <returns>Returns the total of all counters in this tree.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.GetStartCounterPosition">
            <summary>
            The starting counter for this tree.
            </summary>
            <returns>Returns the starting counter for this tree.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.GetEntryAtCounterPosition(`1,System.Int32)">
            <summary>
            Overloaded.A cookie defines the type of counter.
            </summary>
            <param name="searchPosition">The search position.</param>
            <param name="cookie">The cookie.</param>
            <returns>Returns an entry at the specified counter position.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.GetEntryAtCounterPosition(`1,System.Int32,System.Boolean)">
            <summary>
            Gets an entry at the specified counter position. A cookie defines the type of counter.
            </summary>
            <param name="searchPosition">The search position.</param>
            <param name="cookie">The cookie.</param>
            <param name="preferLeftMost">Indicates if the leftmost entry should be returned if multiple tree elements have the
            same SearchPosition.</param>
            <returns> Returns an entry at the specified counter position.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.GetNextNotEmptyCounterEntry(Syncfusion.GridCommon.Generic.GenericTreeTableWithCounterEntry{`0,`1},System.Int32)">
            <summary>
            Gets the subsequent entry in the collection for which the specific counter is not empty.
            A cookie defines the type of counter.
            </summary>
            <param name="current">The current.</param>
            <param name="cookie">The cookie.</param>
            <returns>Returns the subsequent entry in the collection for which the specific counter is not empty.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.GetPreviousNotEmptyCounterEntry(Syncfusion.GridCommon.Generic.GenericTreeTableWithCounterEntry{`0,`1},System.Int32)">
            <summary>
            Gets the previous entry in the collection for which the specific counter is not empty.
            A cookie defines the type of counter.
            </summary>
            <param name="current">current item</param>
            <param name="cookie">cookie value</param>
            <returns>Returns the previous entry in the collection for which the specific counter is not empty.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.GetNextVisibleEntry(Syncfusion.GridCommon.Generic.GenericTreeTableWithCounterEntry{`0,`1})">
            <summary>
            Gets the next entry in the collection for which CountVisible counter is not empty.
            </summary>
            <param name="current">The current.</param>
            <returns> Returns the next entry in the collection for which CountVisible counter is not empty.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.GetPreviousVisibleEntry(Syncfusion.GridCommon.Generic.GenericTreeTableWithCounterEntry{`0,`1})">
            <summary>
            Gets the previous entry in the collection for which CountVisible counter is not empty.
            </summary>
            <param name="current">The current.</param>
            <returns> Returns the previous entry in the collection for which CountVisible counter is not empty.</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.ParentCounterSource">
            <summary>
            Gets or sets the parent counter source
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.Tag">
            <summary>
            Gets or sets the tag that was associate with the tree
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.Identifier">
            <summary>
            Gets or sets the identifier
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.InternalTree">
            <summary>
            Gets the internal thisTree table.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.Root">
            <summary>
            Gets the root node.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.Sorted">
            <summary>
            Gets a value indicating whether thisTree is sorted.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.Comparer">
            <summary>
            Gets or sets the comparer used by sorted trees.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.IsInitializing">
            <summary>
            Gets a value indicating whether the tree was initialize or not.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.Item(System.Int32)">
            <summary>
            Gets or sets the item at the zero-based index.
            </summary>
            <param name="index">index value</param>
            <returns>Returns this tree instance.</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.Count">
            <summary>
            Gets the number of items contained in the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
            <value></value>
            <returns>true if the collection is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the item with the specified index.
            </summary>
            <param name="index">Index value of the item.</param>
            <returns>Returns the item at the specified index.</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.IsFixedSize">
            <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
            <value></value>
            <returns>true if the collection has a fixed size; otherwise, false.
            </returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value><b>True</b> if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, <b>false</b>. Returns false.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </value>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </value>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter`2.HasSummaries">
            <summary>
            Gets a value indicating whether the tree has summaries or not.
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounterEnumerator`2">
            <summary>
            An enumerator for Tree table counter
             </summary>
             <typeparam name="T1">Represents a generic type counter source parameter</typeparam>
             <typeparam name="T2">Represents a generic type counter parameter</typeparam>
             <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounterEnumerator`2.#ctor(Syncfusion.GridCommon.ITreeTable)">
            <summary>
            Initializes a new instance of the GenericTreeTableWithCounterEnumerator class.
            </summary>
            <param name="tree">generic tree</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounterEnumerator`2.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the component and optionally releases the managed resources.
            </summary>
            <param name="disposing"> if true - release both managed and unmanaged resources; 
            if false - release only unmanaged resources.
            </param>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithCounterEnumerator`2.Current">
            <summary>
            Gets the current item in the collection.
            </summary>
            <returns>Returns the tree instance.</returns>
        </member>
        <member name="T:Syncfusion.GridCommon.Generic.IGenericBinaryTreeWithCounterCollection`2">
             <summary>
            Preparing for a "VirtualSortedRecordsCollection" implementation in grouping
            where yet another wrapper can then switch between VirtualSortedRecordsCollection
            or GenericBinaryTreeWithCounterCollection for SortedRecords inside TopLevelGroup.
             </summary>
            [ClassReference(IsReviewed = false)]
             <typeparam name="T1">Represents a generic type counter source parameter</typeparam>
             <typeparam name="T2">Represents a generic type counter parameter</typeparam>
             <exclude/>
        </member>
        <member name="T:Syncfusion.GridCommon.Generic.IGenericBinaryTreeWithSummaryCollection`1">
            <summary>
             Preparing for a "VirtualSortedRecordsCollection" implementation in grouping
             where yet another wrapper can then switch between VirtualSortedRecordsCollection
             or GenericBinaryTreeWithSummaryCollection for SortedRecords inside TopLevelGroup.
             </summary>
             [ClassReference(IsReviewed = false)]
            <typeparam name="T">Represents a generic type parameter</typeparam>
             <exclude/>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.IGenericBinaryTreeWithSummaryCollection`1.GetSummaries(Syncfusion.GridCommon.ITreeTableEmptySummaryArraySource)">
            <summary>
            Gets an array of summary objects.
            </summary>
            <param name="emptySummaries">summary value</param>
            <returns>Returns an array of summary objects.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.IGenericBinaryTreeWithSummaryCollection`1.InvalidateSummariesTopDown(System.Boolean)">
            <summary>
            Marks all summaries dirty.
            </summary>
            <param name="notifySummariesSource">if set to <b>true</b> notify summaries source.</param>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.IGenericBinaryTreeWithSummaryCollection`1.HasSummaries">
            <summary>
            Gets a value indicating whether the tree has summaries or not.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.IGenericBinaryTreeWithCounterCollection`2.GetCounterTotal">
            <summary>
            Gets the total of all counters in this tree.
            </summary>
            <returns>Returns the total of all counters in this tree.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.IGenericBinaryTreeWithCounterCollection`2.GetItemAtCounterPosition(`1,System.Int32)">
            <summary>
            Overloaded. Gets an entry at the specified counter position. A cookie defines the type of counter.
            </summary>
            <param name="searchPosition">The search position.</param>
            <param name="cookie">The cookie.</param>
            <returns> Returns an entry at the specified counter position.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.IGenericBinaryTreeWithCounterCollection`2.GetItemAtCounterPosition(`1,System.Int32,System.Boolean)">
            <summary>
            Gets an entry at the specified counter position. A cookie defines the type of counter.
            </summary>
            <param name="searchPosition">The search position.</param>
            <param name="cookie">The cookie.</param>
            <param name="preferLeftMost">Indicates if the leftmost entry should be returned if multiple tree elements have the
            same SearchPosition.</param>
            <returns>Returns an entry at the specified counter position</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.IGenericBinaryTreeWithCounterCollection`2.GetNextNotEmptyCounterItem(`0,System.Int32)">
            <summary>
            Gets the subsequent entry in the collection for which the specific counter is not empty.
            A cookie defines the type of counter.
            </summary>
            <param name="current">The current.</param>
            <param name="cookie">The cookie.</param>
            <returns> Returns the subsequent entry in the collection for which the specific counter is not empty.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.IGenericBinaryTreeWithCounterCollection`2.GetNextVisibleItem(`0)">
            <summary>
            Gets the next entry in the collection for which CountVisible counter is not empty.
            </summary>
            <param name="current">The current.</param>
            <returns> Returns the next entry in the collection for which CountVisible counter is not empty.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.IGenericBinaryTreeWithCounterCollection`2.GetPreviousNotEmptyCounterItem(`0,System.Int32)">
            <summary>
            Gets the previous entry in the collection for which the specific counter is not empty.
            A cookie defines the type of counter.
            </summary>
            <param name="current">current item</param>
            <param name="cookie">cookie value</param>
            <returns>Returns the previous entry in the collection for which the specific counter is not empty.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.IGenericBinaryTreeWithCounterCollection`2.GetPreviousVisibleItem(`0)">
            <summary>
            Gets the previous entry in the collection for which CountVisible counter is not empty.
            </summary>
            <param name="current">current item</param>
            <returns> Returns the previous entry in the collection for which CountVisible counter is not empty.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.IGenericBinaryTreeWithCounterCollection`2.GetStartCounterPosition">
            <summary>
            Gets the starting counter for this tree.
            </summary>
            <returns> Returns the starting counter for this tree.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.IGenericBinaryTreeWithCounterCollection`2.InvalidateCounterTopDown(System.Boolean)">
            <summary>
            Marks all counters dirty.
            </summary>
            <param name="notifyCounterSource">Boolean value</param>
        </member>
        <member name="T:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2">
             <summary>
             A collection of items maintained in a binary tree
             </summary>
             <typeparam name="T1">Represents a generic type counter source parameter</typeparam>
             <typeparam name="T2">Represents a generic type counter parameter</typeparam>
             <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.#ctor(Syncfusion.GridCommon.Generic.GenericTreeTableWithCounter{`0,`1})">
            <summary>
            Initializes a new instance of the GenericBinaryTreeWithCounterCollection class.
            </summary>
            <param name="genericTree">tree instance</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.#ctor(`1,System.Boolean)">
            <summary>
            Initializes a new instance of the GenericBinaryTreeWithCounterCollection class.
            </summary>
            <param name="startPosition">sort position</param>
            <param name="sorted">boolean value</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.Dispose">
            <summary>
            Disposes of the object and releases internal objects.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the component and optionally releases the managed resources.
            </summary>
            <param name="disposing"> if true - release both managed and unmanaged resources; 
            if false - release only unmanaged resources.
            </param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.GetNext(`0)">
            <summary>
            Used to get the next item in the collection.
            </summary>
            <param name="current">current item</param>
            <returns>
             Returns the next item in the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.GetPrevious(`0)">
            <summary>
            Gets the previous item in the collection.
            </summary>
            <param name="current">current item</param>
            <returns> Returns the previous item in the collection.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.AddIfNotExists(System.Object,`0)">
            <summary>
            Add the key if the collection does not contains the specified key
            </summary>
            <param name="key">key needs to be add in the collection</param>
            <param name="item">The collection</param>
            <returns>Returns the tree</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.IndexOfKey(System.Object)">
            <summary>
            Used to get the index of the key
            </summary>
            <param name="key">key value</param>
            <returns>Returns the index of the specified key</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.FindKey(System.Object)">
            <summary>
            Used to find the key in the collection
            </summary>
            <param name="key">key needs to find</param>
            <returns>Returns the value corresponding to the specified key</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.FindHighestSmallerOrEqualKey(System.Object)">
            <summary>
            Used to find the key approximate to the specified key
            </summary>
            <param name="key">key needs to be search</param>
            <returns>Returns the value corresponds to the approximate key</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.BeginInit">
            <summary>
            Suspends the view until the <see cref="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.EndInit"/> is called
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.EndInit">
            <summary>
            Used to resume all the operations which were suspend in the <see cref="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.BeginInit"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.RaiseEnsureInitialized(System.String)">
            <summary>
             Initializes a new instance of the GenericTreeTableEnsureInitializedEventArgs class.
            </summary>
            <param name="member">Name of the property that changed</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.IndexOf(`0)">
            <summary>
            Returns the zero-based index of the occurrence of the item in the collection.
            </summary>
            <param name="item">The item to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the item within the entire collection, if found; otherwise -1.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.Insert(System.Int32,`0)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the item should be inserted.</param>
            <param name="item">The item to insert. The value must not be a NULL reference (Nothing in Visual Basic). </param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.Add(`0)">
            <summary>
            Add an item to the collection
            </summary>
            <param name="item">tree needs to be add in an collection</param>
            <returns>Returns the added entry</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.System#Collections#Generic#ICollection{T1}#Add(`0)">
            <summary>
            Add an item to the collection
            </summary>
            <param name="item">tree needs to be add in an collection</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.Contains(`0)">
            <summary>
            Determines if the item belongs to this collection.
            </summary>
            <param name="item">The object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the items copied from the  ArrayList. The array must have zero-based indexing. </param>
            <param name="arrayIndex">The zero-based index in an array at which copying begins. </param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.Remove(`0)">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="item">The item to remove from the collection. If the value is NULL or the item is not contained
            in the collection, the method will do nothing.</param>
            <returns>Returns the removed entry</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading the data in the collection. 
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            An enumerator for the entire collection.
            </summary>
            <returns>Returns an Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading the data in the collection. 
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds the specified object to the collection.
            </summary>
            <param name="value">Value of the object to add.</param>
            <returns>Returns the zero-based collection index at which the value has been added</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.System#Collections#IList#Contains(System.Object)">
            <summary>
            Indicates whether the node belongs to this tree.
            </summary>
            <param name="value">value needs to be search in the tree</param>
            <returns>Returns the boolean value indicating whether the node belongs to this tree.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Returns the index of the specified object.
            </summary>
            <param name="value">Value of the object.</param>
            <returns>Index value of the object.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts a node at the specified index.
            </summary>
            <param name="index">position where to insert the value</param>
            <param name="value">tree value need to be insert</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.System#Collections#IList#Remove(System.Object)">
            <summary>
             Removes the node with the specified value.
             </summary>
             <param name="value">tree value needs to be remove</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the element from this collection into an array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="index">The starting index in the destination array.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.LookupOrCreateEntry(`0)">
            <summary>
            Creates or gets a tree table entry for the given item.
            </summary>
            <param name="item">The item for which the entry is to be created.</param>
            <returns>The tree table entry of the given item.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.InvalidateSummariesTopDown(System.Boolean)">
            <summary>
            Marks all summaries dirty.
            </summary>
            <param name="notifySummariesSource">if set to <b>true</b> notify summaries source.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.GetSummaries(Syncfusion.GridCommon.ITreeTableEmptySummaryArraySource)">
            <summary>
            Gets an array of summary objects.
            </summary>
            <param name="emptySummaries">summary value</param>
            <returns>Returns an array of summary objects.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.InvalidateCounterTopDown(System.Boolean)">
            <summary>
            Marks all counters dirty.
            </summary>
            <param name="notifyCounterSource">Boolean value</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.GetCounterTotal">
            <summary>
            Gets the total of all counters in this tree.
            </summary>
            <returns>Returns the total of all counters in this tree.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.GetStartCounterPosition">
            <summary>
            Gets the starting counter for this tree.
            </summary>
            <returns>Returns the starting counter for this tree.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.GetItemAtCounterPosition(`1,System.Int32)">
            <summary>
            Overloaded. Returns an entry at the specified counter position. A cookie defines the type of counter.
            </summary>
            <param name="searchPosition">position needs to be search</param>
            <param name="cookie">cookie value</param>
            <returns>Returns an entry at the specified counter position</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.GetItemAtCounterPosition(`1,System.Int32,System.Boolean)">
            <summary>
            Gets an entry at the specified counter position. A cookie defines the type of counter.
            </summary>
            <param name="searchPosition">The search position.</param>
            <param name="cookie">The cookie.</param>
            <param name="preferLeftMost">Indicates if the leftmost entry should be returned if multiple tree elements have the
            same SearchPosition.</param>
            <returns>Returns an entry at the specified counter position.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.GetNextNotEmptyCounterItem(`0,System.Int32)">
            <summary>
            Gets the subsequent entry in the collection for which the specific counter is not empty.
            A cookie defines the type of counter.
            </summary>
            <param name="current">The current.</param>
            <param name="cookie">The cookie.</param>
            <returns>Returns the subsequent entry in the collection for which the specific counter is not empty.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.GetPreviousNotEmptyCounterItem(`0,System.Int32)">
            <summary>
            Gets the previous entry in the collection for which the specific counter is not empty.
            A cookie defines the type of counter.
            </summary>
            <param name="current">The current.</param>
            <param name="cookie">The cookie.</param>
            <returns>Returns the previous entry in the collection for which the specific counter is not empty.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.GetNextVisibleItem(`0)">
            <summary>
            Gets the next entry in the collection for which CountVisible counter is not empty.
            </summary>
            <param name="current">The current.</param>
            <returns> Returns the next entry in the collection for which CountVisible counter is not empty.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.GetPreviousVisibleItem(`0)">
            <summary>
            Gets the previous entry in the collection for which CountVisible counter is not empty.
            </summary>
            <param name="current">current item</param>
            <returns> Returns the previous entry in the collection for which CountVisible counter is not empty.</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.InternalTable">
            <summary>
            Gets the instance for internal tree table
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.Tag">
            <summary>
            Gets or sets the tag that was associate with the tree
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.Identifier">
            <summary>
            Gets or sets the identifier
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.IsInitializing">
            <summary>
            Gets a value indicating whether the tree was initialize or not.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.EnsureInitialized">
            <summary>
            Occurs when custom operations were occurs in tree
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.Item(System.Int32)">
            <summary>
            Gets or sets the item at the zero-based index.
            </summary>
            <param name="index">index value</param>
            <returns>Returns a tree instance</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.Count">
            <summary>
            Gets the number of items contained in the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
            <returns>true if the collection is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.System#Collections#IList#IsFixedSize">
            <summary>
             Gets a value indicating whether the collection has a fixed size.
             </summary>
             <returns>
             <b>True</b> if the collection has a fixed size; otherwise, <b>false</b>.
             </returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.IsFixedSize">
            <summary>
             Gets a value indicating whether the collection has a fixed size.
             </summary>
             <returns>
             <b>True</b> if the collection has a fixed size; otherwise, <b>false</b>.
             </returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the item with the specified index.
            </summary>
            <param name="index">Index value of the item.</param>
            <returns>Returns the item at the specified index.</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value><b>True</b> if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value><b>True</b> if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, <b>false</b>. Returns false.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </value>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </value>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection`2.HasSummaries">
            <summary>
            Gets a value indicating whether the tree has summaries or not.
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollectionEnumerator`2">
             <summary>
             Enumerator class for items of a <see cref="!:GenericBinaryTreeWithCounterCollection&lt;V&gt;"/>.
             </summary>
             <typeparam name="T1">Represents a generic type counter source parameter</typeparam>
             <typeparam name="T2">Represents a generic type counter parameter</typeparam>
             <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollectionEnumerator`2.#ctor(Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollection{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollectionEnumerator`2"/> class.
            </summary>
            <param name="collection">The parent collection to enumerate.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollectionEnumerator`2.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first item in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollectionEnumerator`2.MoveNext">
            <summary>
            Advances the enumerator to the next item of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next item; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollectionEnumerator`2.Dispose">
            <summary>
            Disposes all the resources.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollectionEnumerator`2.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the component and optionally releases the managed resources.
            </summary>
            <param name="disposing"> if true - release both managed and unmanaged resources; 
            if false - release only unmanaged resources.
            </param>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollectionEnumerator`2.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current enumerator.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithCounterCollectionEnumerator`2.Current">
            <summary>
            Gets the current item in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummaryEntry`1">
             <summary>
             A tree leaf with value and summary information.
             </summary>
             <typeparam name="T">Represents a generic type parameter</typeparam>
             <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummaryEntry`1.#ctor">
            <summary>
            Initializes a new instance of the GenericTreeTableWithSummaryEntry class.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummaryEntry`1.#ctor(Syncfusion.GridCommon.TreeTable,`0)">
            <summary>
            Initializes a new instance of the GenericTreeTableWithSummaryEntry class.
            </summary>
            <param name="tree">tree instance</param>
            <param name="value">tree value</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummaryEntry`1.#ctor(Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary{`0},`0)">
            <summary>
            Initializes a new instance of the GenericTreeTableWithSummaryEntry class.
            </summary>
            <param name="tree">tree instance</param>
            <param name="value">tree value</param>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummaryEntry`1.Value">
            <summary>
            Gets or sets the value attached to this leaf.
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1">
             <exclude/>
            [ClassReference(IsReviewed = false)]
            <summary>
            Tree table summary class
             </summary>
            <typeparam name="T">Represents a generic type parameter</typeparam>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.#ctor(System.Boolean)">
             <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1"/> class.
             </summary>
             <param name="sorted">boolean value</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.Dispose">
            <summary>
            Disposes of the object.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.BeginInit">
            <summary>
            Optimizes insertion of many items when thisTree is initialized for the first time.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.EndInit">
            <summary>
            Ends optimization of insertion of items when thisTree is initialized for the first time.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.GetNextEntry(Syncfusion.GridCommon.Generic.GenericTreeTableWithSummaryEntry{`0})">
            <summary>
            Optimized access to a subsequent entry.
            </summary>
            <param name="current">current value</param>
            <returns>Returns next subsequent entry</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.Syncfusion#GridCommon#ITreeTable#GetNextEntry(Syncfusion.GridCommon.ITreeTableEntry)">
            <summary>
            Optimized access to a subsequent entry.
            </summary>
            <param name="current"> current entry</param>
            <returns>
            Returns next subsequent entry
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.GetPreviousEntry(Syncfusion.GridCommon.Generic.GenericTreeTableWithSummaryEntry{`0})">
            <summary>
            Optimized access to the previous entry.
            </summary>
            <param name="current">current item</param>
            <returns>Returns previous entry</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.Syncfusion#GridCommon#ITreeTable#GetPreviousEntry(Syncfusion.GridCommon.ITreeTableEntry)">
            <summary>
             Optimized access to the previous entry.
             </summary>
             <param name="current">current entry</param>
             <returns>
             Returns previous entry
             </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.AddIfNotExists(System.Object,Syncfusion.GridCommon.Generic.GenericTreeTableWithSummaryEntry{`0})">
            <summary>
            Add the key if the collection does not contains the specified key
            </summary>
            <param name="key">key needs to be add in the collection</param>
            <param name="entry">The collection</param>
            <returns>Returns the tree</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.IndexOfKey(System.Object)">
            <summary>
            Used to find the index of the specified key
            </summary>
            <param name="key">key value</param>
            <returns>Returns the index of the key</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.FindKey(System.Object)">
            <summary>
            Used to find the key in a TreeTable
            </summary>
            <param name="key">key needs to find</param>
            <returns>Returns the instance for TreeTable</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.FindHighestSmallerOrEqualKey(System.Object)">
            <summary>
            Used to find the key approximate to the specified key
            </summary>
            <param name="key">key needs to be search</param>
            <returns>Returns the value corresponds to the approximate key</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.Insert(System.Int32,Syncfusion.GridCommon.Generic.GenericTreeTableWithSummaryEntry{`0})">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the item should be inserted.</param>
            <param name="item">The item to insert. The value must not be a NULL reference (Nothing in Visual Basic). </param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.Remove(Syncfusion.GridCommon.Generic.GenericTreeTableWithSummaryEntry{`0})">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="item">The item to remove from the collection. If the value is NULL or the item is not contained
            in the collection, the method will do nothing.</param>
            <returns>Returns the removed item</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.IndexOf(Syncfusion.GridCommon.Generic.GenericTreeTableWithSummaryEntry{`0})">
            <summary>
            Returns the zero-based index of the occurrence of the item in the collection.
            </summary>
            <param name="item">The item to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the item within the entire collection, if found; otherwise -1.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.Add(Syncfusion.GridCommon.Generic.GenericTreeTableWithSummaryEntry{`0})">
            <summary>
            Adds a value to the end of the collection.
            </summary>
            <param name="item">The item to be added to the end of the collection. The value must not be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.System#Collections#Generic#ICollection{Syncfusion#GridCommon#Generic#GenericTreeTableWithSummaryEntry{T}}#Add(Syncfusion.GridCommon.Generic.GenericTreeTableWithSummaryEntry{`0})">
            <summary>
            Add an item to the collection
            </summary>
            <param name="item">tree needs to be add in an collection</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.Contains(Syncfusion.GridCommon.Generic.GenericTreeTableWithSummaryEntry{`0})">
            <summary>
            Determines if the item belongs to this collection.
            </summary>
            <param name="item">The object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.CopyTo(Syncfusion.GridCommon.Generic.GenericTreeTableWithSummaryEntry{`0}[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the items copied from the  ArrayList. The array must have zero-based indexing. </param>
            <param name="index">The zero-based index in an array at which copying begins. </param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.GetEnumerator">
            <summary>
             An enumerator for the entire collection.
            </summary>
            <returns>Returns an Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading the data in the collection. 
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts a node at the specified index.
            </summary>
            <param name="index">position where to insert the value</param>
            <param name="value">tree value need to be insert</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.System#Collections#IList#Remove(System.Object)">
            <summary>
             Removes the node with the specified value.
             </summary>
             <param name="value">tree value needs to be remove</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Indicates whether the node belongs to this tree.
            </summary>
            <param name="value">value needs to be search in the tree</param>
            <returns>Returns the boolean value indicating whether the node belongs to this tree.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Returns the index of the specified object.
            </summary>
            <param name="value">Value of the object.</param>
            <returns>Index value of the object.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds the specified object to the collection.
            </summary>
            <param name="value">Value of the object to add.</param>
            <returns>Returns the zero-based collection index at which the value has been added</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the element from this collection into an array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="index">The starting index in the destination array.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            An enumerator for the entire collection.
            </summary>
            <returns>Returns an Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading the data in the collection. 
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.InvalidateSummariesTopDown(System.Boolean)">
            <summary>
            Marks all summaries dirty.
            </summary>
            <param name="notifySummariesSource">if set to <b>true</b> notify summaries source.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.GetSummaries(Syncfusion.GridCommon.ITreeTableEmptySummaryArraySource)">
            <summary>
            Gets an array of summary objects.
            </summary>
            <param name="emptySummaries">summary value</param>
            <returns>Returns an array of summary objects.</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.Tag">
            <summary>
            Gets or sets the tag that was associate with the tree
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.Identifier">
            <summary>
            Gets or sets an identifier.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.InternalTree">
            <summary>
            Gets the internal thisTree table.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.Root">
            <summary>
            Gets the root node.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.Sorted">
            <summary>
            Gets a value indicating whether thisTree is sorted.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.Comparer">
            <summary>
            Gets or sets the comparer used by sorted trees.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.IsInitializing">
            <summary>
            Gets a value indicating whether the tree was initialize or not.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the zero-based index.
            </summary>
            <param name="index">index value</param>
            <returns>Returns the Tree value</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.Count">
            <summary>
            Gets the number of items contained in the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
            <value></value>
            <returns>true if the collection is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the item with the specified index.
            </summary>
            <param name="index">Index value of the item.</param>
            <returns>Returns the item at the specified index.</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.IsFixedSize">
            <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
            <value></value>
            <returns>true if the collection has a fixed size; otherwise, false.
            </returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value><b>True</b> if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, <b>false</b>. Returns false.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </value>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </value>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary`1.HasSummaries">
            <summary>
            Gets a value indicating whether the tree has summaries or not.
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummaryEnumerator`1">
             <exclude/>
             [ClassReference(IsReviewed = false)]
             <summary>
             An enumerator for tree table summary class
             </summary>
            <typeparam name="T">Represents a generic type parameter</typeparam>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummaryEnumerator`1.#ctor(Syncfusion.GridCommon.ITreeTable)">
            <summary>
            Initializes a new instance of the GenericTreeTableWithSummaryEnumerator class.
            </summary>
            <param name="tree">tree instance</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummaryEnumerator`1.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the component and optionally releases the managed resources.
            </summary>
            <param name="disposing"> if true - release both managed and unmanaged resources; 
            if false - release only unmanaged resources.
            </param>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericTreeTableWithSummaryEnumerator`1.Current">
            <summary>
            Gets the current item in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1">
             <summary>
             A collection of items maintained in a binary tree
             </summary>
            <typeparam name="T">Represents a generic type parameter</typeparam>
             <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.#ctor(Syncfusion.GridCommon.Generic.GenericTreeTableWithSummary{`0})">
            <summary>
            Initializes a new instance of the GenericBinaryTreeWithSummaryCollection class.
            </summary>
            <param name="genericTree">generic tree table</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the GenericBinaryTreeWithSummaryCollection class.
            </summary>
            <param name="sorted">boolean value</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.Dispose">
            <summary>
            Disposes of the object and releases internal objects.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the component and optionally releases the managed resources.
            </summary>
            <param name="disposing"> if true - release both managed and unmanaged resources; 
            if false - release only unmanaged resources.
            </param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.GetNext(`0)">
            <summary>
            Used to get the next item in the collection.
            </summary>
            <param name="current">current item</param>
            <returns>
             Returns the next item in the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.GetPrevious(`0)">
            <summary>
            Gets the previous item in the collection.
            </summary>
            <param name="current">current item</param>
            <returns>Returns the previous item in the collection.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.AddIfNotExists(System.Object,`0)">
            <summary>
            Add the key if the collection does not contains the specified key
            </summary>
            <param name="key">key needs to be add in the collection</param>
            <param name="item">The collection</param>
            <returns>Returns the tree</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.IndexOfKey(System.Object)">
            <summary>
            Used to find the index of the specified key
            </summary>
            <param name="key">key value</param>
            <returns>Returns the index of the key</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.FindKey(System.Object)">
            <summary>
            Used to find the key in the collection
            </summary>
            <param name="key">key needs to find</param>
            <returns>Returns the value corresponding to the specified key</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.FindHighestSmallerOrEqualKey(System.Object)">
            <summary>
            Used to find the key approximate to the specified key
            </summary>
            <param name="key">key needs to be search</param>
            <returns>Returns the value corresponds to the approximate key</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.BeginInit">
            <summary>
            Suspends the view until the <see cref="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.EndInit"/> is called
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.EndInit">
            <summary>
            Used to resume all the operations which were suspend in the <see cref="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.BeginInit"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.RaiseEnsureInitialized(System.String)">
            <summary>
             If exists then method will discard "item" and return found value. If it does not exist then method will add item to collection and return "item"
            </summary>
            <param name="member">key or value needs to be initialize</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.IndexOf(`0)">
            <summary>
            Returns the zero-based index of the occurrence of the item in the collection.
            </summary>
            <param name="item">The item to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the item within the entire collection, if found; otherwise -1.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the item should be inserted.</param>
            <param name="item">The item to insert. The value must not be a NULL reference (Nothing in Visual Basic). </param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.Add(`0)">
            <summary>
            Add an item to the collection
            </summary>
            <param name="item">tree needs to be add in an collection</param>
            <returns>Returns the instance of the collection</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Add an item to the collection
            </summary>
            <param name="item">tree needs to be add in an collection</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.Contains(`0)">
            <summary>
            Determines if the item belongs to this collection.
            </summary>
            <param name="item">The object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the items copied from the  ArrayList. The array must have zero-based indexing. </param>
            <param name="arrayIndex">The zero-based index in an array at which copying begins. </param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.Remove(`0)">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="item">The item to remove from the collection. If the value is NULL or the item is not contained
            in the collection, the method will do nothing.</param>
            <returns>Returns the instance of a Tree table</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.GetEnumerator">
            <summary>
            Gets an enumerator for the entire collection.
            </summary>
            <returns>Returns an Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading the data in the collection. 
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            An enumerator for the entire collection.
            </summary>
            <returns>Returns an Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading the data in the collection. 
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds the specified object to the collection.
            </summary>
            <param name="value">Value of the object to add.</param>
            <returns>Returns the zero-based collection index at which the value has been added</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Indicates whether the node belongs to this tree.
            </summary>
            <param name="value">value needs to be search in the tree</param>
            <returns>Returns the boolean value indicating whether the node belongs to this tree.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Returns the index of the specified object.
            </summary>
            <param name="value">Value of the object.</param>
            <returns>Index value of the object.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts a node at the specified index.
            </summary>
            <param name="index">position where to insert the value</param>
            <param name="value">tree value need to be insert</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the node with the specified value.
            </summary>
            <param name="value">tree value needs to be remove</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the element from this collection into an array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="index">The starting index in the destination array.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.InvalidateSummariesTopDown(System.Boolean)">
            <summary>
            Marks all summaries dirty.
            </summary>
            <param name="notifySummariesSource">if set to <b>true</b> notify summaries source.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.GetSummaries(Syncfusion.GridCommon.ITreeTableEmptySummaryArraySource)">
            <summary>
            Gets an array of summary objects.
            </summary>
            <param name="emptySummaries">summary value</param>
            <returns> Returns an array of summary objects.</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.InternalTable">
            <summary>
            Gets the instance for internal tree table
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.Tag">
            <summary>
            Gets or sets the tag that was associate with the tree
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.Identifier">
            <summary>
            Gets or sets an identifier.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.IsInitializing">
            <summary>
            Gets a value indicating whether the tree was initialized or not.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.EnsureInitialized">
            <summary>
             If exists then method will discard "item" and return found value. If it does not exist then method will add item to collection and return "item"
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the zero-based index.
            </summary>
            <param name="index">index value</param>
            <returns>Returns the Tree table</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.Count">
            <summary>
            Gets the number of items contained in the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
            <returns>true if the collection is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.System#Collections#IList#IsFixedSize">
            <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
            <returns>
            <b>True</b> if the collection has a fixed size; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.IsFixedSize">
            <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
            <returns>
            <b>True</b> if the collection has a fixed size; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the item with the specified index.
            </summary>
            <param name="index">Index value of the item.</param>
            <returns>Returns the index</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value><b>True</b> if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value><b>True</b> if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, <b>false</b>. Returns false.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </value>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </value>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1.HasSummaries">
            <summary>
            Gets a value indicating whether the tree has summaries or not.
            </summary>
            <returns>Returns the boolean value </returns>
        </member>
        <member name="T:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollectionEnumerator`1">
             <summary>
             Enumerator class for items of a <see cref="T:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection`1"/>.
             </summary>
            <typeparam name="T">Represents a generic type parameter</typeparam>
             <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollectionEnumerator`1.#ctor(Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollectionEnumerator`1"/> class.
            </summary>
            <param name="collection">The parent collection to enumerate.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollectionEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first item in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollectionEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next item of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next item; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollectionEnumerator`1.Dispose">
            <summary>
            Disposes all the resources.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollectionEnumerator`1.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the component and optionally releases the managed resources.
            </summary>
            <param name="disposing"> if true - release both managed and unmanaged resources; 
            if false - release only unmanaged resources.
            </param>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollectionEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current enumerator.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.Generic.GenericBinaryTreeWithSummaryCollectionEnumerator`1.Current">
            <summary>
            Gets the current item in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.TreeTableNodeColor">
             <summary>
             Used by Tree Table to balance the tree with algorithm based on Red - Black tree.
             </summary>
             <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="F:Syncfusion.GridCommon.TreeTableNodeColor.Red">
            <summary>
            Red color.
            </summary>
        </member>
        <member name="F:Syncfusion.GridCommon.TreeTableNodeColor.Black">
            <summary>
            Black color.
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.ITreeTableBranch">
            <summary>
            A branch with left and right leaves or branches.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableBranch.SetLeft(Syncfusion.GridCommon.ITreeTableNode,System.Boolean,System.Boolean)">
            <summary>
            Sets the left node.
            </summary>
            <param name="value">The new node.</param>
            <param name="inAddMode">Indicates whether tree-table is in add-mode.</param>
            <param name="isSortedTree">Indicates whether tree-table is sorted.</param>
            <remarks>
            Call this method instead of simply setting <see cref="P:Syncfusion.GridCommon.ITreeTableBranch.Left"/> property if you want
            to avoid the round-trip call to check whether the tree is in add-mode
            or if tree-table is sorted.
            </remarks>
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableBranch.SetRight(Syncfusion.GridCommon.ITreeTableNode,System.Boolean)">
            <summary>
            Sets the right node.
            </summary>
            <param name="value">The new node.</param>
            <param name="inAddMode">Specifies if tree-table is in add-mode.</param>
            <remarks>
            Call this method instead of simply setting <see cref="P:Syncfusion.GridCommon.ITreeTableBranch.Right"/> property if you want
            to avoid the round-trip call to check whether the tree is in add-mode
            or if tree-table is sorted.
            </remarks>
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableBranch.GetLeftBranch">
            <summary>
            The left branch cast to ITreeTableBranch.
            </summary>
            <returns>Returns the left branch cast to ITreeTableBranch.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableBranch.GetRightBranch">
            <summary>
            The right branch cast to ITreeTableBranch.
            </summary>
            <returns>Returns the right branch cast to ITreeTableBranch.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableBranch.GetEntryPositionOfChild(Syncfusion.GridCommon.ITreeTableNode)">
            <summary>
            Returns the position in the tree table of the specified child node.
            </summary>
            <param name="node">tree node</param>
            <returns>Returns the position in the tree.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableBranch.InvalidateCountBottomUp">
            <summary>
            Sets this object's child node Count dirty and
            marks parent nodes' child node Count dirty.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableBranch.InvalidateCountTopDown">
            <summary>
            Sets this object's child node Count dirty and steps
            through all child branches and marks their child node Count dirty.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableBranch.InvalidateMinimumBottomUp">
            <summary>
            Sets this object's child node Minimum dirty and
            marks parent nodes' child node Minimum dirty.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableBranch.InvalidateMinimumTopDown">
            <summary>
            Sets this object's child node Minimum dirty and steps
            through all child branches and marks their child node Minimum dirty.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableBranch.GetLeftB">
            <summary>
            The left branch cast to ITreeTableBranch.
            </summary>
            <returns>Returns the left branch cast to ITreeTableBranch.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableBranch.GetRightB">
            <summary>
            The right branch cast to ITreeTableBranch.
            </summary>
            <returns>Returns the right branch cast to ITreeTableBranch.</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.ITreeTableBranch.Left">
            <summary>
            Gets or sets the left node.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.ITreeTableBranch.Right">
            <summary>
            Gets or sets the right node.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.ITreeTableBranch.Color">
            <summary>
            Gets or sets the Red-Black tree color.
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.TreeTableBranch">
             <summary>
             A branch in a tree.
             </summary>
             <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableBranch.#ctor(Syncfusion.GridCommon.TreeTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.TreeTableBranch"/> class.
            </summary>
            <param name="tree">tree table instance</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableBranch.GetMinimum">
            <summary>
            Gets the minimum value (of the most-left leaf) of the branch in a sorted tree.
            </summary>
            <returns> Returns the minimum value (of the most-left leaf) of the branch in a sorted tree.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableBranch.GetLeftBranch">
            <summary>
            The left node cast to ITreeTableBranch.
            </summary>
            <returns>Returns the left node cast to ITreeTableBranch.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableBranch.GetRightBranch">
            <summary>
            The right node cast to ITreeTableBranch.
            </summary>
            <returns>Returns the right node cast to ITreeTableBranch.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableBranch.SetLeft(Syncfusion.GridCommon.ITreeTableNode,System.Boolean,System.Boolean)">
            <summary>
            Sets the left node.
            </summary>
            <param name="value">The new node.</param>
            <param name="inAddMode">Indicates whether tree-table is in add-mode.</param>
            <param name="isSorted">Indicates whether tree-table is sorted.</param>
            <remarks>
            Call this method instead of simply setting <see cref="P:Syncfusion.GridCommon.TreeTableBranch.Left"/> property if you want
            to avoid the round-trip call to check whether the tree is in add-mode
            or if tree-table is sorted.
            </remarks>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableBranch.SetRight(Syncfusion.GridCommon.ITreeTableNode,System.Boolean)">
            <summary>
            Sets the right node.
            </summary>
            <param name="value">The new node.</param>
            <param name="inAddMode">Indicates whether tree-table is in add-mode.</param>
            <remarks>
            Call this method instead of simply setting <see cref="P:Syncfusion.GridCommon.TreeTableBranch.Right"/> property if you want
            to avoid the round-trip call to check whether the tree is in add-mode
            or if tree-table is sorted.
            </remarks>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableBranch.GetEntryPositionOfChild(Syncfusion.GridCommon.ITreeTableNode)">
            <summary>
            Gets the position in the tree table of the specific child node.
            </summary>
            <param name="node">tree node</param>
            <returns> Returns the position in the tree table of the specific child node.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableBranch.GetCount">
            <summary>
            Gets the number of child nodes (+1 for the current node).
            </summary>
            <returns>Returns the number of child nodes (+1 for the current node).</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableBranch.IsEntry">
            <summary>
            Indicates whether this is a leaf.
            </summary>
            <returns>Returns boolean value</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableBranch.InvalidateCountBottomUp">
            <summary>
            Sets this object's child node count dirty and
            walks up parent nodes and marks their child node count dirty.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableBranch.InvalidateCountTopDown">
            <summary>
            Sets this object's child node count dirty and steps
            through all child branches and marks their child node count dirty.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableBranch.InvalidateMinimumBottomUp">
            <summary>
            Sets this object's child node minimum dirty and
            marks parent nodes' child node minimum dirty.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableBranch.InvalidateMinimumTopDown">
            <summary>
            Sets this object's child node minimum dirty and steps
            through all child branches and marks their child node minimum dirty.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableBranch.GetLeftB">
            <summary>
            The left node cast to ITreeTableBranch.
            </summary>
            <returns>Returns the left node cast to ITreeTableBranch.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableBranch.GetRightB">
            <summary>
            The right node cast to ITreeTableBranch.
            </summary>
            <returns>Returns the right node cast to ITreeTableBranch.</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTableBranch.Color">
            <summary>
            Gets or sets Red-Black tree algorithm helper.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTableBranch.Left">
            <summary>
            Gets or sets the left leaf or branch.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTableBranch.Right">
            <summary>
            Gets or sets the right tree or branch.
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.TreeTableEmpty">
             <summary>
             An empty node.
             </summary>
             <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEmpty.GetCount">
            <summary>
            The number of child nodes (+1 for the current node).
            </summary>
            <returns>
            Returns the number of child nodes (+1 for the current node).
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEmpty.IsEntry">
            <summary>
            Indicates whether this is a leaf.
            </summary>
            <returns>Returns boolean value</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEmpty.GetNodeInfo">
            <summary>
            The Debug / text information about the node.
            </summary>
            <returns>
             Returns the Debug / text information about the node.
            </returns>
        </member>
        <member name="T:Syncfusion.GridCommon.ITreeTableSource">
             <summary>
             This object owns a <see cref="T:Syncfusion.GridCommon.ITreeTable"/>.
             </summary>
             <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableSource.GetTreeTable">
            <summary>
            Gets a reference to an Inner tree table.
            </summary>
            <returns>Returns a reference to an Inner tree table.</returns>
        </member>
        <member name="T:Syncfusion.GridCommon.TreeTable">
             <summary>
             A tree table.
             </summary>
             <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTable.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.TreeTable"/> class.
            </summary>
            <param name="sorted">boolean value</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTable.SetNodeAt(System.Int32,Syncfusion.GridCommon.ITreeTableNode)">
            <summary>
            Sets the node at the specified index.
            </summary>
            <param name="index">Index value where the node is to be inserted.</param>
            <param name="value">Value of the node that is to be inserted.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTable.GetPreviousEntry(Syncfusion.GridCommon.ITreeTableEntry)">
            <summary>
            Optimized access to the previous entry.
            </summary>
            <param name="current">current item</param>
            <returns>Returns previous entry</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTable.GetNextEntry(Syncfusion.GridCommon.ITreeTableEntry)">
            <summary>
            Optimized access to a subsequent entry.
            </summary>
            <param name="current">current item</param>
            <returns> Returns next subsequent entry</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTable.Insert(System.Int32,Syncfusion.GridCommon.ITreeTableNode)">
            <summary>
            Inserts a node at the specified index.
            </summary>
            <param name="index">Index value where the node is to be inserted.</param>
            <param name="value">Value of the node to insert.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTable.Remove(Syncfusion.GridCommon.ITreeTableNode)">
            <summary>
            Removes the specified node.
            </summary>
            <param name="value">Node value to look for and remove.</param>
            <returns>Returns the removed value </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTable.ResetCache">
            <summary>
            Resets the cache.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTable._Remove(Syncfusion.GridCommon.ITreeTableNode,System.Boolean)">
            <summary>
            Used to remove the value from the tree table
            </summary>
            <param name="value">tree value</param>
            <param name="resetParent">boolean value</param>
            <returns>Returns the boolean value</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTable.Contains(Syncfusion.GridCommon.ITreeTableNode)">
            <summary>
            Indicates whether the node belongs to this tree.
            </summary>
            <param name="value">Node value to search for.</param>
            <returns>True if node belongs to this tree; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTable.IndexOf(Syncfusion.GridCommon.ITreeTableNode)">
            <summary>
            Returns the position of a node.
            </summary>
            <param name="value">Node value to look for.</param>
            <returns>Index of the node if found.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTable.Add(Syncfusion.GridCommon.ITreeTableNode)">
            <summary>
            Appends a node.
            </summary>
            <param name="value">Node value to append.</param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTable.BeginInit">
            <summary>
            Optimizes insertion of many elements when tree is initialized for the first time.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTable.EndInit">
            <summary>
            Ends optimization of insertion of elements when tree is initialized for the first time.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTable.AddSorted(Syncfusion.GridCommon.ITreeTableNode)">
            <summary>
            Adds a node into a sorted tree.
            </summary>
            <param name="value">Node value to add.</param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTable.AddIfNotExists(System.Object,Syncfusion.GridCommon.ITreeTableEntry)">
            <summary>
            Adds a node in a sorted tree only if no node with the same value has not been added yet.
            </summary>
            <param name="key">key needs to be add in the collection</param>
            <param name="value">Node value to add.</param>
            <returns>Returns the instance for the tree</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTable.IndexOfKey(System.Object)">
            <summary>
            Finds a node in a sorted tree.
            </summary>
            <param name="key">key needs to be find an index</param>
            <returns>Returns the index of the key</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTable.FindKey(System.Object)">
            <summary>
            Finds a node in a sorted tree that matches the specified key.
            </summary>
            <param name="key">The key to search.</param>
            <returns>The node; NULL if not found.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTable.FindHighestSmallerOrEqualKey(System.Object)">
            <summary>
            Finds the node in a sorted tree is just one entry ahead of the
            node with the specified key. It searches for the largest possible
            key that is smaller than the specified key.
            </summary>
            <param name="key">The key to search.</param>
            <returns>The node; NULL if not found.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTable.RemoveAt(System.Int32)">
            <summary>
            Removes a node at the specified position.
            </summary>
            <param name="index">index value</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTable.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts a node at the specified index.
            </summary>
            <param name="index">position where to insert the value</param>
            <param name="value">tree value need to be insert</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTable.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the node with the specified value.
            </summary>
            <param name="value">value needs to be remove</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTable.System#Collections#IList#Contains(System.Object)">
            <summary>
            Indicates whether the node belongs to this tree.
            </summary>
            <param name="value">node value</param>
            <returns>Returns the boolean value indicating whether the node belongs to this tree.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTable.Clear">
            <summary>
            Clears all nodes in the tree.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTable.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Sets the index of the specified node.
            </summary>
            <param name="value">tree value</param>
            <returns> Returns the index of the specified node.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTable.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds the specified node to the tree.
            </summary>
            <param name="value">Adding value</param>
            <returns>Returns the zero-based collection index at which the value has been added</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTable.GetCount">
            <summary>
            Gets the number of leaves.
            </summary>
            <returns>Returns the number of leaves.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTable.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the element from this collection into an array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="index">The starting index in the destination array.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTable.CopyTo(Syncfusion.GridCommon.ITreeTableNode[],System.Int32)">
            <summary>
            Copies the elements from this collection into an array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="index">The starting index in the destination array.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator.
            </summary>
            <returns>Returns an enumerator.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTable.GetEnumerator">
            <summary>
            Gets a <see cref="T:Syncfusion.GridCommon.TreeTableEnumerator"/>.
            </summary>
            <returns>Returns a <see cref="T:Syncfusion.GridCommon.TreeTableEnumerator"/>.</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTable.Comparer">
            <summary>
            Gets or sets the comparer used by sorted trees.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTable.Tag">
            <summary>
            Gets or sets the tag that can be associated with this object.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTable.Sorted">
            <summary>
            Gets a value indicating whether tree is sorted or not.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTable.Root">
            <summary>
            Gets or sets the root node.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTable.Item(System.Int32)">
            <summary>
            Gets or sets an item at the specified index.
            </summary>
            <param name="index">index value</param>
            <returns>Returns the item at the specified index.</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTable.IsInitializing">
            <summary>
            Gets a value indicating whether the tree was initialize or not.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTable.IsReadOnly">
            <summary>
            Gets a value indicating whether the tree is Read-only or not.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTable.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the item with the specified index.
            </summary>
            <param name="index">Index value of the item.</param>
            <returns>Returns the item at the specified index.</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTable.IsFixedSize">
            <summary>
            Gets a value indicating whether the nodes can be added or removed.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTable.IsSynchronized">
            <summary>
            Gets a value indicating whether the tree is Synchronized or not.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTable.System#Collections#ICollection#Count">
            <summary>
            Gets the number of leaves.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTable.Count">
            <summary>
            Gets the number of leaves.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTable.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </value>
            <remarks>Not implemented.</remarks>
        </member>
        <member name="T:Syncfusion.GridCommon.ITreeTableEntrySource">
            <summary>
            An object that holds an <see cref="T:Syncfusion.GridCommon.ITreeTableEntry"/>.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.GridCommon.ITreeTableEntrySource.Entry">
            <summary>
            Gets or sets a reference to the <see cref="T:Syncfusion.GridCommon.ITreeTableEntry"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.TreeTableEntrySourceCollection">
             <summary>
             A collection of <see cref="T:Syncfusion.GridCommon.ITreeTableEntrySource"/> objects
             that are internally using a <see cref="T:Syncfusion.GridCommon.ITreeTable"/>.
             </summary>
             <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEntrySourceCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.TreeTableEntrySourceCollection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEntrySourceCollection.#ctor(System.Boolean)">
             <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.TreeTableEntrySourceCollection"/> class.
             </summary>
             <param name="sorted">boolean value</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEntrySourceCollection.#ctor(Syncfusion.GridCommon.ITreeTable)">
             <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.TreeTableEntrySourceCollection"/> class.
             </summary>
             <param name="inner">tree table</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEntrySourceCollection.BeginInit">
            <summary>
            Optimizes insertion of many elements when tree is initialized for the first time.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEntrySourceCollection.EndInit">
            <summary>
            Ends optimization of insertion of elements when tree is initialized for the first time.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEntrySourceCollection.Contains(Syncfusion.GridCommon.ITreeTableEntrySource)">
            <summary>
            Indicates whether object belongs to this collection.
            </summary>
            <param name="value">The value of the object.</param>
            <returns>True if object belongs to the collection; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEntrySourceCollection.IndexOf(Syncfusion.GridCommon.ITreeTableEntrySource)">
            <summary>
            Returns the position of a object in the collection.
            </summary>
            <param name="value">The value of the object.</param>
            <returns>The position of the object.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEntrySourceCollection.CopyTo(Syncfusion.GridCommon.ITreeTableEntrySource[],System.Int32)">
            <summary>
            Copies the contents of the collection to an array.
            </summary>
            <param name="array">Destination array.</param>
            <param name="index">Starting index of the destination array.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEntrySourceCollection.GetEnumerator">
            <summary>
            Returns a strongly typed enumerator.
            </summary>
            <returns>A strongly types enumerator.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEntrySourceCollection.Insert(System.Int32,Syncfusion.GridCommon.ITreeTableEntrySource)">
            <summary>
            Inserts an object at the specified index.
            </summary>
            <param name="index">Index value where the object is to be inserted.</param>
            <param name="value">Value of the object to insert.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEntrySourceCollection.Add(Syncfusion.GridCommon.ITreeTableEntrySource)">
            <summary>
            Appends an object.
            </summary>
            <param name="value">The value of the object to append.</param>
            <returns>Returns an instance for the tree with newly added entry.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEntrySourceCollection.Remove(Syncfusion.GridCommon.ITreeTableEntrySource)">
            <summary>
            Removes the object.
            </summary>
            <param name="value">The value of the object to remove.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEntrySourceCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a node at the specified index.
            </summary>
            <param name="index">Index value of the node to remove.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEntrySourceCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts the object at the specified index.
            </summary>
            <param name="index">Index value of the object to insert.</param>
            <param name="value">Value of the object to insert.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEntrySourceCollection.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the specified object.
            </summary>
            <param name="value">Value of the object to remove.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEntrySourceCollection.System#Collections#IList#Contains(System.Object)">
            <summary>
            Indicate whether the specified object belongs to this collection.
            </summary>
            <param name="value">Object value to look for.</param>
            <returns>True if object belongs to the collection; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEntrySourceCollection.Clear">
            <summary>
            Clears all nodes in the tree.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEntrySourceCollection.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Returns the index of the specified object.
            </summary>
            <param name="value">Value of the object.</param>
            <returns>Index value of the object.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEntrySourceCollection.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds the specified object to the collection.
            </summary>
            <param name="value">Value of the object to add.</param>
            <returns>Returns the zero-based collection index at which the value has been added</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEntrySourceCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies elements to destination array.
            </summary>
            <param name="array">Destination array.</param>
            <param name="index">Starting index of the destination array.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEntrySourceCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator.
            </summary>
            <returns>Enumerator value</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTableEntrySourceCollection.IsInitializing">
            <summary>
            Gets a value indicating whether the <see cref="M:Syncfusion.GridCommon.TreeTableEntrySourceCollection.BeginInit"/> was called or not.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTableEntrySourceCollection.Item(System.Int32)">
            <summary>
            Gets or sets an <see cref="T:Syncfusion.GridCommon.ITreeTableEntrySource"/> at a specific position.
            </summary>
            <param name="index">index value</param>
            <returns>Returns the entry value for the specified position.</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTableEntrySourceCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether tree is Read-only or not.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTableEntrySourceCollection.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <param name="index">Index of the item.</param>
            <returns>Returns the item at the specified index.</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTableEntrySourceCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the nodes can be added or removed.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTableEntrySourceCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether the tree is Synchronized or not.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTableEntrySourceCollection.Count">
            <summary>
            Gets the number of objects in this collection.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTableEntrySourceCollection.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </value>
        </member>
        <member name="T:Syncfusion.GridCommon.TreeTableEntrySourceCollectionEnumerator">
             <summary>
             A strongly typed enumerator for the <see cref="T:Syncfusion.GridCommon.TreeTableEntrySourceCollection"/>.
             </summary>
             <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEntrySourceCollectionEnumerator.#ctor(Syncfusion.GridCommon.TreeTableEntrySourceCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.TreeTableEntrySourceCollectionEnumerator"/> class.
            </summary>
            <param name="collection">collection value</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEntrySourceCollectionEnumerator.Reset">
            <summary>
            Resets the enumerator.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEntrySourceCollectionEnumerator.MoveNext">
            <summary>
            Indicates whether to move to the next object in the collection.
            </summary>
            <returns>Returns the boolean value indicates whether to move to the next object in the collection.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEntrySourceCollectionEnumerator.Dispose">
            <summary>
            Disposes all the resources.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableEntrySourceCollectionEnumerator.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the component and optionally releases the managed resources.
            </summary>
            <param name="disposing"> if true - release both managed and unmanaged resources; 
            if false - release only unmanaged resources.
            </param>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTableEntrySourceCollectionEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current enumerator.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTableEntrySourceCollectionEnumerator.Current">
            <summary>
            Gets the current <see cref="T:Syncfusion.GridCommon.ITreeTableEntrySource"/> object.
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.ITreeTableCounterSource">
             <summary>
             Interface definition for an object that has counters.
             </summary>
             <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableCounterSource.GetCounter">
            <summary>
            Gets the counter object with counters.
            </summary>
            <returns> Returns the counter object with counters.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableCounterSource.InvalidateCounterTopDown(System.Boolean)">
            <summary>
            Marks all counters dirty in this object and child nodes.
            </summary>
            <param name="notifyCounterSource">if set to <b>true</b> notify counter source.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableCounterSource.InvalidateCounterBottomUp">
            <summary>
            Marks all counters dirty in this object and parent nodes.
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.ITreeTableCounter">
             <summary>
             Interface definition for a counter object.
             </summary>
             <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableCounter.Combine(Syncfusion.GridCommon.ITreeTableCounter,System.Int32)">
            <summary>
            Combines this counter object with another counter and returns a new object. A cookie can specify
            a specific counter type.
            </summary>
            <param name="other">Counter total</param>
            <param name="cookie">cookie value.</param>
            <returns>Returns the new object</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableCounter.Compare(Syncfusion.GridCommon.ITreeTableCounter,System.Int32)">
            <summary>
            Compares this counter with another counter. A cookie can specify
            a specific counter type.
            </summary>
            <param name="other">The other.</param>
            <param name="cookie">The cookie.</param>
            <returns>Returns the compared value.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableCounter.IsEmpty(System.Int32)">
            <summary>
            Indicates whether the counter object is empty. A cookie can specify
            a specific counter type.
            </summary>
            <param name="cookie">The cookie.</param>
            <returns>
            <b>true</b> if the specified cookie is empty; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableCounter.GetValue(System.Int32)">
            <summary>
            Gets the integer value of the counter. A cookie specifies
            a specific counter type.
            </summary>
            <param name="cookie">The cookie.</param>
            <returns>Returns the integer value of the counter.</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.ITreeTableCounter.Kind">
            <summary>
            Gets the Counter Kind.
            </summary>
            <value>The kind.</value>
        </member>
        <member name="T:Syncfusion.GridCommon.TreeTableCounterCookies">
             <summary>
             Default counter cookies for identifying counter types.
             </summary>
             <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="F:Syncfusion.GridCommon.TreeTableCounterCookies.CountAll">
            <summary>
            All counters.
            </summary>
        </member>
        <member name="F:Syncfusion.GridCommon.TreeTableCounterCookies.CountVisible">
            <summary>
            Visible Counter.
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.TreeTableVisibleCounter">
             <summary>
             A counter that counts objects that are marked "Visible".
             </summary>
             <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="F:Syncfusion.GridCommon.TreeTableVisibleCounter.Empty">
            <summary>
            Returns an empty TreeTableVisibleCounter that represents zero visible elements.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableVisibleCounter.#ctor(System.Double)">
             <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.TreeTableVisibleCounter"/> class.
             </summary>
             <param name="visibleCount">The visible count.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableVisibleCounter.GetVisibleCount">
            <summary>
            Gets the visible count.
            </summary>
            <returns>Returns the visible count.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableVisibleCounter.GetValue(System.Int32)">
            <summary>
            Gets the integer value of the counter. A cookie specifies
            a specific counter type.
            </summary>
            <param name="cookie">The cookie.</param>
            <returns>Returns the integer value of the counter. A cookie specifies
            a specific counter type.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableVisibleCounter.Syncfusion#GridCommon#ITreeTableCounter#Combine(Syncfusion.GridCommon.ITreeTableCounter,System.Int32)">
            <summary>
            Combines one tree object with another and returns the new object.
            </summary>
            <param name="other">Counter total</param>
            <param name="cookie">cookie value.</param>
            <returns>Returns the new object</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableVisibleCounter.CreateCounter">
            <summary>
            Factory method creates a new counter object of the same type as this object.
            </summary>
            <returns>Returns the new counter object</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableVisibleCounter.OnCombineCounters(Syncfusion.GridCommon.ITreeTableCounter,Syncfusion.GridCommon.ITreeTableCounter,System.Int32)">
            <summary>
            Called to combine the values of two counter objects. Results are saved back into this counter object.
            A cookie can filter the operation to a limited set of counter types.
            </summary>
            <param name="treeTableCounter1">The treeTableCounter1.</param>
            <param name="treeTableCounter2">The treeTableCounter2.</param>
            <param name="cookie">The cookie.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableVisibleCounter.Combine(Syncfusion.GridCommon.TreeTableVisibleCounter,System.Int32)">
            <summary>
            Combines the counter values of this counter object with the values of another counter object
            and returns a new counter object.
            </summary>
            <param name="other">The other.</param>
            <param name="cookie">The cookie.</param>
            <returns>Returns the new object</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableVisibleCounter.Syncfusion#GridCommon#ITreeTableCounter#Compare(Syncfusion.GridCommon.ITreeTableCounter,System.Int32)">
            <summary>
            Compares this counter with another counter. A cookie can specify
            a specific counter type.
            </summary>
            <param name="other">The other.</param>
            <param name="cookie">The cookie.</param>
            <returns>Returns the compared value</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableVisibleCounter.Compare(Syncfusion.GridCommon.TreeTableVisibleCounter,System.Int32)">
            <summary>
            Compares this counter with another counter. A cookie can specify
            a specific counter type.
            </summary>
            <param name="other">The other.</param>
            <param name="cookie">The cookie.</param>
            <returns>Returns the compared value</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableVisibleCounter.IsEmpty(System.Int32)">
            <summary>
            Indicates whether the counter object is empty. A cookie can specify
            a specific counter type.
            </summary>
            <param name="cookie">The cookie.</param>
            <returns>
            <b>true</b> if the specified cookie is empty; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableVisibleCounter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTableVisibleCounter.Kind">
            <summary>
            Gets the Counter Kind.
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.TreeTableWithCounterBranch">
             <summary>
             A tree table branch with a counter.
             </summary>
             <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="T:Syncfusion.GridCommon.TreeTableWithSummaryBranch">
            <summary>
            A tree table branch with a counter.
            </summary>
            <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithSummaryBranch.#ctor(Syncfusion.GridCommon.TreeTable)">
             <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.TreeTableWithSummaryBranch"/> class.
             </summary>
             <param name="tree">tree instance</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithSummaryBranch.GetLeftNode">
            <summary>
            The left branch node cast to ITreeTableSummaryNode.
            </summary>
            <returns>Returns the left branch node cast to ITreeTableSummaryNode.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithSummaryBranch.GetRightNode">
            <summary>
            Returns the right branch node cast to ITreeTableSummaryNode.
            </summary>
            <returns>Returns the left branch node cast to ITreeTableSummaryNode.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithSummaryBranch.GetSummaries(Syncfusion.GridCommon.ITreeTableEmptySummaryArraySource)">
            <summary>
            Gets an array of summary objects.
            </summary>
            <param name="emptySummaries">The empty summaries.</param>
            <returns>Returns an array of summary objects.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithSummaryBranch.InvalidateSummariesBottomUp(System.Boolean)">
            <summary>
            Walks up parent branches and reset summaries.
            </summary>
            <param name="notifyParentRecordSource">boolean value</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithSummaryBranch.InvalidateSummariesTopDown(System.Boolean)">
            <summary>
            Marks all summaries dirty in this node and child nodes.
            </summary>
            <param name="notifyCounterSource">if set to <b>true</b> notify counter source.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithSummaryBranch.GetLeftC">
            <summary>
            The left branch node cast to ITreeTableSummaryNode.
            </summary>
            <returns>Returns the left branch node cast to ITreeTableSummaryNode.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithSummaryBranch.GetRightC">
            <summary>
            Returns the right branch node cast to ITreeTableSummaryNode.
            </summary>
            <returns>Returns the left branch node cast to ITreeTableSummaryNode.</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTableWithSummaryBranch.TreeTableWithSummary">
            <summary>
            Gets the tree this branch belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTableWithSummaryBranch.Parent">
            <summary>
            Gets or sets the parent branch.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTableWithSummaryBranch.HasSummaries">
            <summary>
            Gets a value indicating whether this node has summaries or not.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounterBranch.#ctor(Syncfusion.GridCommon.TreeTable)">
             <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.TreeTableWithCounterBranch"/> class.
             </summary>
             <param name="tree">tree instance</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounterBranch.GetCounterPositionOfChild(Syncfusion.GridCommon.ITreeTableNode)">
            <summary>
            Gets the cumulative counter position object of a child node with all counter values.
            </summary>
            <param name="node">The node.</param>
            <returns>Returns the cumulative counter position object of a child node with all counter values.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounterBranch.GetLeftNode">
            <summary>
            The left branch node cast to ITreeTableCounterNode.
            </summary>
            <returns>Returns the left branch node cast to ITreeTableCounterNode.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounterBranch.GetRightNode">
            <summary>
            The right branch node cast to ITreeTableCounterNode.
            </summary>
            <returns>Returns the right branch node cast to ITreeTableCounterNode.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounterBranch.GetCounterTotal">
            <summary>
            Gets the total of this node's counter and child nodes (cached).
            </summary>
            <returns> Returns the total of this node's counter and child nodes (cached).</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounterBranch.GetCounterPosition">
            <summary>
            Gets the cumulative position of this node.
            </summary>
            <returns> Returns the cumulative position of this node.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounterBranch.InvalidateCounterBottomUp(System.Boolean)">
            <summary>
            Invalidates the counter bottom up.
            </summary>
            <param name="notifyCounterSource">if set to <b>true</b> notify counter source.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounterBranch.InvalidateCounterTopDown(System.Boolean)">
            <summary>
            Marks all counters dirty in this node and child nodes.
            </summary>
            <param name="notifyCounterSource">if set to <b>true</b> notify counter source.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounterBranch.GetLeftC">
            <summary>
            The left branch node cast to ITreeTableCounterNode.
            </summary>
            <returns>Returns the left branch node cast to ITreeTableCounterNode.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounterBranch.GetRightC">
            <summary>
            The right branch node cast to ITreeTableCounterNode.
            </summary>
            <returns>Returns the right branch node cast to ITreeTableCounterNode.</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTableWithCounterBranch.TreeTableWithCounter">
            <summary>
            Gets the tree this branch belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTableWithCounterBranch.Parent">
            <summary>
            Gets or sets the parent branch.
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.TreeTableWithCounter">
             <summary>
             A balanced tree with <see cref="T:Syncfusion.GridCommon.TreeTableWithCounterEntry"/> entries.
             </summary>
             <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="T:Syncfusion.GridCommon.TreeTableWithSummary">
            <summary>
            A balanced tree with <see cref="T:Syncfusion.GridCommon.TreeTableWithSummaryEntry"/> entries.
            </summary>
            <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithSummary.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.TreeTableWithSummary"/> class.
            </summary>
            <param name="sorted">boolean value</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithSummary.InvalidateSummariesTopDown(System.Boolean)">
            <summary>
            Marks all summaries dirty.
            </summary>
            <param name="notifySummariesSource">if set to <b>true</b> notify summaries source.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithSummary.GetSummaries(Syncfusion.GridCommon.ITreeTableEmptySummaryArraySource)">
            <summary>
            Gets an array of summary objects.
            </summary>
            <param name="emptySummaries">summary value</param>
            <returns>Returns an array of summary objects.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithSummary.Insert(System.Int32,Syncfusion.GridCommon.TreeTableWithSummaryEntry)">
            <summary>
            Inserts a <see cref="T:Syncfusion.GridCommon.TreeTableWithSummaryEntry"/> object at the specified index.
            </summary>
            <param name="index">tree index</param>
            <param name="value">value needs to be insert</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithSummary.Remove(Syncfusion.GridCommon.TreeTableWithSummaryEntry)">
            <summary>
            Removes an object from the tree.
            </summary>
            <param name="value">value needs to be remove</param>
            <returns>Returns the removed value.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithSummary.Contains(Syncfusion.GridCommon.TreeTableWithSummaryEntry)">
            <summary>
            Indicates whether an object belongs to the tree.
            </summary>
            <param name="value">value needs to be check</param>
            <returns>Returns a boolean value indicates whether an object belongs to the tree.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithSummary.IndexOf(Syncfusion.GridCommon.TreeTableWithSummaryEntry)">
            <summary>
            Gets the index of an object in the tree.
            </summary>
            <param name="value">value needs to be find the index</param>
            <returns> Returns the index of an object in the tree.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithSummary.Add(Syncfusion.GridCommon.TreeTableWithSummaryEntry)">
            <summary>
            Appends an object.
            </summary>
            <param name="value">The item to be added to the end of the collection. The value must not be a NULL reference (Nothing in Visual Basic).</param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithSummary.CopyTo(Syncfusion.GridCommon.TreeTableWithSummaryEntry[],System.Int32)">
            <summary>
            Copies the elements of this tree to an array.
            </summary>
            <param name="array">collection of array</param>
            <param name="index">index value</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithSummary.GetEnumerator">
            <summary>
            Gets a strongly typed enumerator.
            </summary>
            <returns>Returns a strongly typed enumerator.</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTableWithSummary.HasSummaries">
            <summary>
            Gets a value indicating whether the tree has summaries or not.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTableWithSummary.Item(System.Int32)">
            <summary>
            Gets or sets a TreeTableWithSummaryEntry.
            </summary>
            <param name="index">index value</param>
            <returns>Returns the new instance for TreeTableWithSummaryEntry</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounter.#ctor(Syncfusion.GridCommon.ITreeTableCounter,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.TreeTableWithCounter"/> class.
            </summary>
            <param name="startPosition">sorting position</param>
            <param name="sorted">boolean value</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounter.EndInit">
            <summary>
            Ends optimization of insertion of elements when tree is initialized for the first time.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounter.InvalidateCounterTopDown(System.Boolean)">
            <summary>
            Marks all counters dirty.
            </summary>
            <param name="notifyCounterSource">boolean value</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounter.GetCounterTotal">
            <summary>
            Gets the total of all counters in this tree.
            </summary>
            <returns>Returns the total of all counters in this tree.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounter.GetStartCounterPosition">
            <summary>
            Gets the starting counter for this tree.
            </summary>
            <returns> Returns the starting counter for this tree.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounter.GetEntryAtCounterPosition(Syncfusion.GridCommon.ITreeTableCounter,System.Int32)">
            <summary>
            Overloaded. Gets an entry at the specified counter position. A cookie defines the type of counter.
            </summary>
            <param name="searchPosition">The search position.</param>
            <param name="cookie">The cookie.</param>
            <returns>Returns an entry at the specified counter position.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounter.GetEntryAtCounterPosition(Syncfusion.GridCommon.ITreeTableCounter,System.Int32,System.Boolean)">
            <summary>
            Gets an entry at the specified counter position. A cookie defines the type of counter.
            </summary>
            <param name="searchPosition">The search position.</param>
            <param name="cookie">The cookie.</param>
            <param name="preferLeftMost">Indicates if the leftmost entry should be returned if multiple tree elements have the
            same SearchPosition.</param>
            <returns>Returns an entry at the specified counter position.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounter.GetEntryAtCounterPosition(Syncfusion.GridCommon.ITreeTableCounter,Syncfusion.GridCommon.ITreeTableCounter,System.Int32)">
            <summary>
            Gets the entry at counter position.
            </summary>
            <param name="start">The start.</param>
            <param name="searchPosition">The search position.</param>
            <param name="cookie">The cookie.</param>
            <returns>Returns an entry at the counter position.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounter.GetEntryAtCounterPosition(Syncfusion.GridCommon.ITreeTableCounter,Syncfusion.GridCommon.ITreeTableCounter,System.Int32,System.Boolean)">
            <summary>
            Gets the entry at counter position.
            </summary>
            <param name="start">The start.</param>
            <param name="searchPosition">The search position.</param>
            <param name="cookie">The cookie.</param>
            <param name="preferLeftMost">if set to <b>true</b> prefer left most.</param>
            <returns>Returns an entry at the specified counter position.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounter.GetEntryAtCounterPosition(Syncfusion.GridCommon.ITreeTableNode,Syncfusion.GridCommon.ITreeTableCounter,Syncfusion.GridCommon.ITreeTableCounter,System.Int32,System.Boolean,Syncfusion.GridCommon.ITreeTableCounter@)">
            <summary>
            An object that implements the <see cref="!:Distances"/> property.
            </summary>
            <param name="currentNode">current node value</param>
            <param name="start">start counter</param>
            <param name="searchPosition">position needs to be search</param>
            <param name="cookie">cookie value</param>
            <param name="preferLeftMost">Indicates if the leftmost entry should be returned if multiple tree elements have the
            same SearchPosition</param>
            <param name="currentNodePosition">position of the current node</param>
            <returns>Returns the current node.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounter.GetNextNotEmptyCounterEntry(Syncfusion.GridCommon.ITreeTableEntry,System.Int32)">
            <summary>
            Gets the subsequent entry in the collection for which the specific counter is not empty.
            A cookie defines the type of counter.
            </summary>
            <param name="current">The current.</param>
            <param name="cookie">The cookie.</param>
            <returns> Returns the subsequent entry in the collection for which the specific counter is not empty.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounter.GetPreviousNotEmptyCounterEntry(Syncfusion.GridCommon.ITreeTableEntry,System.Int32)">
            <summary>
            Returns the previous entry in the collection for which the specific counter is not empty.
            A cookie defines the type of counter.
            </summary>
            <param name="current">The current.</param>
            <param name="cookie">The cookie.</param>
            <returns> Returns the previous entry in the collection for which the specific counter is not empty.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounter.GetNextVisibleEntry(Syncfusion.GridCommon.TreeTableWithCounterEntry)">
            <summary>
            Gets the next entry in the collection for which CountVisible counter is not empty.
            </summary>
            <param name="current">The current.</param>
            <returns> Returns the next entry in the collection for which CountVisible counter is not empty.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounter.GetPreviousVisibleEntry(Syncfusion.GridCommon.TreeTableWithCounterEntry)">
            <summary>
            Gets the previous entry in the collection for which CountVisible counter is not empty.
            </summary>
            <param name="current">The current.</param>
            <returns>Returns the previous entry in the collection for which CountVisible counter is not empty.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounter.Insert(System.Int32,Syncfusion.GridCommon.TreeTableWithCounterEntry)">
            <summary>
            Inserts a <see cref="T:Syncfusion.GridCommon.TreeTableWithCounterEntry"/> object at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounter.Remove(Syncfusion.GridCommon.TreeTableWithCounterEntry)">
            <summary>
            Removes an object from the tree.
            </summary>
            <param name="value">The value.</param>
            <returns>Returns the collection after removing the specified item from the tree collection </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounter.Contains(Syncfusion.GridCommon.TreeTableWithCounterEntry)">
            <summary>
            Indicates whether an entry belongs to the tree.
            </summary>
            <param name="value">The entry.</param>
            <returns>
            <b>true</b> if tree contains the specified entry; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounter.IndexOf(Syncfusion.GridCommon.TreeTableWithCounterEntry)">
            <summary>
            Gets the position of an object in the tree.
            </summary>
            <param name="value">The value.</param>
            <returns> Returns the position of an object in the tree.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounter.Add(Syncfusion.GridCommon.TreeTableWithCounterEntry)">
            <summary>
            Appends an object.
            </summary>
            <param name="value">The value.</param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounter.CopyTo(Syncfusion.GridCommon.TreeTableWithCounterEntry[],System.Int32)">
            <summary>
            Copies the elements of this tree to an array.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounter.GetEnumerator">
            <summary>
            Gets a strongly typed enumerator.
            </summary>
            <returns> Returns a strongly typed enumerator.</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTableWithCounter.ParentCounterSource">
            <summary>
            Gets or sets an object that implements the <see cref="!:Distances"/> property.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTableWithCounter.Item(System.Int32)">
            <summary>
            Gets or sets a TreeTableWithCounterEntry.
            </summary>
            <param name="index">index value</param>
            <returns>Returns a new instance for TreeTableWithCounterEntry</returns>
        </member>
        <member name="T:Syncfusion.GridCommon.TreeTableWithCounterEnumerator">
             <summary>
             A strongly typed enumerator for the <see cref="T:Syncfusion.GridCommon.TreeTableWithCounter"/> collection.
             </summary>
             <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithCounterEnumerator.#ctor(Syncfusion.GridCommon.TreeTable)">
             <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.TreeTableWithCounterEnumerator"/> class.
             </summary>
             <param name="tree">tree instance</param>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTableWithCounterEnumerator.Current">
            <summary>
            Gets the current <see cref="T:Syncfusion.GridCommon.TreeTableWithCounter"/> object.
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.TreeTableVisibleCounterSource">
             <summary>
             An object that counts objects that are marked "Visible". It implements
             the ITreeTableCounterSource interface and creates a <see cref="T:Syncfusion.GridCommon.TreeTableVisibleCounter"/>.
             </summary>
             <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableVisibleCounterSource.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.TreeTableVisibleCounterSource"/> class.
            </summary>
            <param name="visibleCount">The visible count.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableVisibleCounterSource.InvalidateCounterBottomUp">
            <summary>
            Marks all counters dirty in this object and parent nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableVisibleCounterSource.GetCounter">
            <summary>
            Gets the counter object with counters.
            </summary>
            <returns>Returns the counter object with counters.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableVisibleCounterSource.InvalidateCounterTopDown(System.Boolean)">
            <summary>
            Marks all counters dirty in this object and child nodes.
            </summary>
            <param name="notifyCounterSource">if set to <b>true</b> notify counter source.</param>
        </member>
        <member name="T:Syncfusion.GridCommon.ITreeTableSummary">
            <summary>
            Interface definition for a summary object.
            </summary>
            <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableSummary.Combine(Syncfusion.GridCommon.ITreeTableSummary)">
            <summary>
            Combines this summary information with another object's summary and returns a new object.
            </summary>
            <param name="other">The other.</param>
            <returns>Returns a combined object.</returns>
        </member>
        <member name="T:Syncfusion.GridCommon.ITreeTableEmptySummaryArraySource">
            <summary>
            Provides a <see cref="M:Syncfusion.GridCommon.ITreeTableEmptySummaryArraySource.GetEmptySummaries"/> method.
            </summary>
            <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableEmptySummaryArraySource.GetEmptySummaries">
            <summary>
            Gets an array of summary objects.
            </summary>
            <returns>Returns an array of summary objects.</returns>
        </member>
        <member name="T:Syncfusion.GridCommon.ITreeTableSummaryArraySource">
             <summary>
             Interface definition for an object that has summaries.
             </summary>
             <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableSummaryArraySource.GetSummaries(Syncfusion.GridCommon.ITreeTableEmptySummaryArraySource,System.Boolean@)">
            <summary>
            Returns an array of summary objects.
            </summary>
            <param name="emptySummaries">An array of empty summary objects.</param>
            <param name="changed">Returns True if summaries were recalculated; False if already cached.</param>
            <returns>An array of summary objects.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableSummaryArraySource.InvalidateSummariesTopDown">
            <summary>
            Marks all summaries dirty in this object and child nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableSummaryArraySource.InvalidateSummariesBottomUp">
            <summary>
            Marks all summaries dirty in this object and parent nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ITreeTableSummaryArraySource.InvalidateSummary">
            <summary>
            Marks all summaries dirty in this object only.
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.TreeTableWithSummaryEnumerator">
            <summary>
            A strongly typed enumerator for the <see cref="T:Syncfusion.GridCommon.TreeTableWithSummary"/> collection.
            </summary>
            <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.TreeTableWithSummaryEnumerator.#ctor(Syncfusion.GridCommon.TreeTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.TreeTableWithSummaryEnumerator"/> class.
            </summary>
            <param name="tree">tree instance</param>
        </member>
        <member name="P:Syncfusion.GridCommon.TreeTableWithSummaryEnumerator.Current">
            <summary>
            Gets the current <see cref="T:Syncfusion.GridCommon.TreeTableWithSummary"/> object.
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.DistanceCounterCollection">
             <summary>
             A collection of entities for which distances need to be counted. The
             collection provides methods for mapping from a distance position to
             an entity and vice versa.<para/>
             For example, in a scrollable grid control you have rows with different heights. 
             Use this collection to determine the total height for all rows in the grid,
             quickly determine the row index for a given point and also quickly determine
             the point at which a row is displayed. This also allows a mapping between the 
             scrollbars value and the rows or columns associated with that value.
             </summary>
             <remarks>
             DistanceCounterCollection uses a high-water mark technique for allocating
             objects up to the modified entry with the highest index. When you modify 
             the size of an entry the collection ensures that objects are allocated 
             for all entries up to the given index. Entries that are after the modified 
             entry are assumed to have the DefaultSize and will not be allocated. 
             <para/>
             The best-case scenario is when all lines have the same DefaultSize. In such
             case the internal collection remains completely empty and will not cause 
             any overhead. This makes DistanceCounterCollection also an attractive solution
             for the scenario where all entries have the same size (e.g. a data bound grid
             where all rows have same height).
             </remarks>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.IDistanceCounterCollection">
             <summary>
             A collection of entities for which distances need to counted. The
             collection provides methods for mapping from a distance position to
             an entity and vice versa.<para/>
             For example, in a scrollable grid control you have rows with different heights. 
             Use this collection to determine the total height for all rows in the grid,
             quickly determine the row index for a given point and also quickly determine
             the point at which a row is displayed. This also allows a mapping between the 
             scrollbars value and the rows or columns associated with that value.
             </summary>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.IDistanceCounterCollection.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.IDistanceCounterCollection.SetRange(System.Int32,System.Int32,System.Double)">
            <summary>
            Hides a specified range of entities (lines, rows or columns).
            </summary>
            <param name="from">The index for the first entity.</param>
            <param name="to">The raw index for the last entity.</param>
            <param name="distance">The distance.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.IDistanceCounterCollection.ResetRange(System.Int32,System.Int32)">
            <summary>
            Resets the range by restoring the default distance for all entries in the specified range.
            </summary>
            <param name="from">The index for the first entity.</param>
            <param name="to">The raw index for the last entity.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.IDistanceCounterCollection.GetNextVisibleIndex(System.Int32)">
            <summary>
            Gets the next visible index. Skip subsequent entities for which the distance is 0.0 and return the next entity.
            </summary>
            <param name="index">The index.</param>
            <returns>The next visible index from the given index.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.IDistanceCounterCollection.GetPreviousVisibleIndex(System.Int32)">
            <summary>
            Gets the previous visible index. Skip previous entities for which the distance is 0.0 and return the previous entity.
            </summary>
            <param name="index">The index.</param>
            <returns>The previous visible index from the given index.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.IDistanceCounterCollection.IndexOfCumulatedDistance(System.Double)">
            <summary>
            Gets the index of an entity in this collection for which 
            the cumulated count of previous distances is greater than or equal to 
            the specified cumulatedDistance. (e.g. return row index for 
            pixel position).
            </summary>
            <param name="cumulatedDistance">The cumulated count of previous distances.</param>
            <returns>The index of an entity in this collection for which 
            the cumulated count of previous distances is greater than or equal to 
            the specified cumulatedDistance.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.IDistanceCounterCollection.GetCumulatedDistanceAt(System.Int32)">
            <summary>
            Gets the cumulated count of previous distances for the entity at the specific index. 
            (e.g. return pixel position for a row index).
            </summary>
            <param name="index">The entity index.</param>
            <returns>The cumulated count of previous distances for the 
            entity at the specific index.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.IDistanceCounterCollection.SetNestedDistances(System.Int32,Syncfusion.GridCommon.ScrollAxis.IDistanceCounterCollection)">
            <summary>
            Assigns a collection with nested entities to an item.
            </summary>
            <param name="index">The index.</param>
            <param name="nestedCollection">The nested collection.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.IDistanceCounterCollection.GetNestedDistances(System.Int32)">
            <summary>
            Gets the nested entities at a given index. If the index does not hold 
            a nested distances collection the method returns null.
            </summary>
            <param name="index">The index.</param>
            <returns>The nested entities at a given index or null.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.IDistanceCounterCollection.GetNextScrollValue(System.Double)">
            <summary>
            Gets the distance position of the next entity after a given point. 
            </summary>
            <param name="point">The point after which the next entity is to be found.</param>
            <returns>The distance position of the next entity after a given point.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.IDistanceCounterCollection.GetPreviousScrollValue(System.Double)">
            <summary>
            Gets the distance position of the entity preceding a given point. If the point
            is in between entities, the starting point of the matching entity 
            is returned.
            </summary>
            <param name="point">The point of the entity preceding a given point.</param>
            <returns>The distance position of the entity preceding a given point.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.IDistanceCounterCollection.GetAlignedScrollValue(System.Double)">
            <summary>
            Gets the aligned scroll value which is the starting point of the entity
            found at the given distance position.
            </summary>
            <param name="point">The point.</param>
            <returns>The starting point of the entity found at the given distance position.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.IDistanceCounterCollection.ConnectWithParent(Syncfusion.GridCommon.ITreeTableCounterSource)">
            <summary>
            Connects a nested distance collection with a parent.
            </summary>
            <param name="treeTableCounterSource">The <see cref="T:Syncfusion.GridCommon.ITreeTableCounterSource"/> 
            representing the nested tree table visible counter source.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.IDistanceCounterCollection.Insert(System.Int32,System.Int32)">
            <summary>
            Inserts entities in the collection from the given index.
            </summary>
            <param name="insertAt">The index of the first entity to be inserted.</param>
            <param name="count">The number of entities to be inserted.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.IDistanceCounterCollection.Remove(System.Int32,System.Int32)">
            <summary>
            Removes entities in the collection from the given index.
            </summary>
            <param name="removeAt">Index of the first entity to be removed.</param>
            <param name="count">The number of entities to be removed.</param>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.IDistanceCounterCollection.Count">
            <summary>
            Gets or sets the raw number of entities (lines, rows or columns).
            </summary>
            <value>The raw number of entities (lines, rows or columns).</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.IDistanceCounterCollection.DefaultDistance">
            <summary>
            Gets or sets the default distance (row height or column width) an entity spans.
            </summary>
            <value>The default distance (row height or column width) an entity spans.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.IDistanceCounterCollection.TotalDistance">
            <summary>
            Gets the total distance all entities span (e.g. total height of all rows in grid).
            </summary>
            <value>The total distance all entities span (e.g. total height of all rows in grid).</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.IDistanceCounterCollection.Item(System.Int32)">
            <summary>
            Gets or sets the distance for an entity from the given index.
            </summary>
            <param name="index">The index for the entity</param>
            <returns>The distance for an entity from the given index.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterCollection.#ctor">
            <summary>
            Initializes a new instance of the DistanceCounterCollection class.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterCollection.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterCollection.SetRange(System.Int32,System.Int32,System.Double)">
            <summary>
            Hides a specified range of entities (lines, rows or columns).
            </summary>
            <param name="from">The index for the first entity.</param>
            <param name="to">The raw index for the last entity.</param>
            <param name="distance">The distance.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterCollection.SetNestedDistances(System.Int32,Syncfusion.GridCommon.ScrollAxis.IDistanceCounterCollection)">
            <summary>
            Assigns a collection with nested entities to an item.
            </summary>
            <param name="index">The index.</param>
            <param name="nestedCollection">The nested collection.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterCollection.GetNestedDistances(System.Int32)">
            <summary>
            Gets the nested entities at a given index. If the index does not hold 
            a nested distances collection the method returns null.
            </summary>
            <param name="index">The index.</param>
            <returns>The nested entities at a given index or null.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterCollection.GetNextScrollValue(System.Double)">
            <summary>
            Gets the distance position of the next entity after a given point. 
            </summary>
            <param name="point">The point after which the next entity is to be found.</param>
            <returns>The distance position of the next entity after a given point.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterCollection.GetPreviousScrollValue(System.Double)">
            <summary>
            Gets the distance position of the entity preceding a given point. If the point
            is in between entities, the starting point of the matching entity 
            is returned.
            </summary>
            <param name="point">The point of the entity preceding a given point.</param>
            <returns>The distance position of the entity preceding a given point.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterCollection.GetAlignedScrollValue(System.Double)">
            <summary>
            Gets the aligned scroll value which is the starting point of the entity
            found at the given distance position.
            </summary>
            <param name="point">The point.</param>
            <returns>The starting point of the entity found at the given distance position.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterCollection.ConnectWithParent(Syncfusion.GridCommon.ITreeTableCounterSource)">
            <summary>
            Connects a nested distance collection with a parent.
            </summary>
            <param name="nestedTreeTableVisibleCounterSource">The <see cref="T:Syncfusion.GridCommon.ITreeTableCounterSource"/> 
            representing the nested tree table visible counter source.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterCollection.ResetRange(System.Int32,System.Int32)">
            <summary>
            Resets the range by restoring the default distance for all entries in the specified range.
            </summary>
            <param name="from">The index for the first entity.</param>
            <param name="to">The raw index for the last entity.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterCollection.GetNextVisibleIndex(System.Int32)">
            <summary>
            Gets the next visible index. Skip subsequent entities for which the distance is 0.0 and return the next entity.
            </summary>
            <param name="index">The index.</param>
            <returns>The next visible index from the given index.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterCollection.GetPreviousVisibleIndex(System.Int32)">
            <summary>
            Gets the previous visible index. Skip previous entities for which the distance is 0.0 and return the previous entity.
            </summary>
            <param name="index">The index.</param>
            <returns>The previous visible index from the given index.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterCollection.IndexOfCumulatedDistance(System.Double)">
            <summary>
            Gets the index of an entity in this collection for which 
            the cumulated count of previous distances is greater than or equal to 
            the specified cumulatedDistance. (e.g. return row index for 
            pixel position).
            </summary>
            <param name="cumulatedDistance">The cumulated count of previous distances.</param>
            <returns>The index of an entity in this collection for which 
            the cumulated count of previous distances is greater than or equal to 
            the specified cumulatedDistance.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterCollection.GetCumulatedDistanceAt(System.Int32)">
            <summary>
            Gets the cumulated count of previous distances for the entity at the specific index. 
            (e.g. return pixel position for a row index).
            </summary>
            <param name="index">The entity index.</param>
            <returns>The cumulated count of previous distances for the
            entity at the specific index.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterCollection.Insert(System.Int32,System.Int32)">
            <summary>
            Inserts entities in the collection from the given index.
            </summary>
            <param name="insertAt">The index of the first entity to be inserted.</param>
            <param name="count">The number of entities to be inserted.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterCollection.Remove(System.Int32,System.Int32)">
            <summary>
            Removes entities in the collection from the given index.
            </summary>
            <param name="removeAt">Index of the first entity to be removed.</param>
            <param name="count">The number of entities to be removed.</param>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.DistanceCounterCollection.Count">
            <summary>
            Gets or sets the raw number of entities (lines, rows or columns).
            </summary>
            <value>The raw number of entities (lines, rows or columns).</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.DistanceCounterCollection.DefaultDistance">
            <summary>
            Gets or sets the default distance (row height or column width) an entity spans.
            </summary>
            <value>The default distance (row height or column width) an entity spans.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.DistanceCounterCollection.TotalDistance">
            <summary>
            Gets the total distance all entities span (e.g. total height of all rows in grid).
            </summary>
            <value>The total distance all entities span (e.g. total height of all rows in grid).</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.DistanceCounterCollection.Item(System.Int32)">
            <summary>
            Gets or sets the distance for an entity from the given index.
            </summary>
            <param name="index">The index for the entity</param>
            <returns>The distance for an entity from the given index.</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.DistanceCounterCollection.InternalCount">
            <summary>
            Gets or sets an object that implements the <see cref="!:Distances"/> property.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.DistanceCounterCollection.InternalTotalDistance">
            <summary>
            Gets an object that implements the <see cref="!:Distances"/> property.
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.DistanceCounterCollection.NestedTreeTableVisibleCounterSource">
            <summary>
            An object that maintains a collection of nested distances and wires
            it to a parent distance collection. The object is used by the 
            DistanceCounterCollection.SetNestedDistances method to associated
            the nested distances with an index in the parent collection.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterCollection.NestedTreeTableVisibleCounterSource.#ctor(Syncfusion.GridCommon.ScrollAxis.IDistanceCounterCollection,Syncfusion.GridCommon.ScrollAxis.IDistanceCounterCollection)">
            <summary>
            Initializes a new instance of the NestedTreeTableVisibleCounterSource class.
            </summary>
            <param name="parentDistances">The parent distances.</param>
            <param name="nestedDistances">The nested distances.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterCollection.NestedTreeTableVisibleCounterSource.InvalidateCounterBottomUp">
            <summary>
            Marks all counters dirty in this object and parent nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterCollection.NestedTreeTableVisibleCounterSource.GetCounter">
            <summary>
            Returns the <see cref="T:Syncfusion.GridCommon.TreeTableVisibleCounter"/> object with counters.
            </summary>
            <returns>The <see cref="T:Syncfusion.GridCommon.TreeTableVisibleCounter"/> object with counters.</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.DistanceCounterCollection.NestedTreeTableVisibleCounterSource.Entry">
            <summary>
            Gets or sets the counter entry.
            </summary>
            <value>The entry.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.DistanceCounterCollection.NestedTreeTableVisibleCounterSource.ParentDistances">
            <summary>
            Gets the parent distances.
            </summary>
            <value>The parent distances.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.DistanceCounterCollection.NestedTreeTableVisibleCounterSource.NestedDistances">
            <summary>
            Gets the nested distances.
            </summary>
            <value>The nested distances.</value>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.NamespaceDoc">
            <summary>
            Provides classes and interfaces for performing the scrolling operation in a layout.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.DistanceCounterSubset">
            <summary>
            A collection of entities that is shared with a parent collection for which distances 
            need to counted. The collection only is a subset for a specific range in 
            the parent distance collection.
            <para/>
            When you change the size of an element in this collection the change will 
            also be reflected in the parent collection and vice versa.
            </summary>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.IDistancesHost">
             <summary>
             An object that implements the <see cref="P:Syncfusion.GridCommon.ScrollAxis.IDistancesHost.Distances"/> property.
             </summary>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.IDistancesHost.Distances">
            <summary>
            Gets the distances of the lines.
            </summary>
            <value>The distances of the lines.</value>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterSubset.#ctor(Syncfusion.GridCommon.ScrollAxis.IDistanceCounterCollection)">
            <summary>
            Initializes a new instance of the DistanceCounterSubset class.
            </summary>
            <param name="trackedParentCollection">The parent collection for which a subset is "tracked".</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterSubset.Clear">
            <summary>
            Restores the distances in the parent collection for this subset to their default distance.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterSubset.SetRange(System.Int32,System.Int32,System.Double)">
            <summary>
            Hides a specified range of entities (lines, rows or columns).
            </summary>
            <param name="from">The index for the first entity.</param>
            <param name="to">The raw index for the last entity.</param>
            <param name="distance">The distance.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterSubset.ResetRange(System.Int32,System.Int32)">
            <summary>
            Resets the range by restoring the default distance for all entries in the specified range.
            </summary>
            <param name="from">The index for the first entity.</param>
            <param name="to">The raw index for the last entity.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterSubset.GetNextVisibleIndex(System.Int32)">
            <summary>
            Gets the next visible index. Skip subsequent entities for which the distance is 0.0 and return the next entity.
            </summary>
            <param name="index">The index.</param>
            <returns>The next visible index from the given index.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterSubset.GetPreviousVisibleIndex(System.Int32)">
            <summary>
            Gets the previous visible index. Skip previous entities for which the distance is 0.0 and return the previous entity.
            </summary>
            <param name="index">The index.</param>
            <returns>The previous visible index from the given index.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterSubset.IndexOfCumulatedDistance(System.Double)">
            <summary>
            Gets the index of an entity in this collection for which 
            the cumulated count of previous distances is greater than or equal to 
            the specified cumulatedDistance. (e.g. return row index for 
            pixel position).
            </summary>
            <param name="cumulatedDistance">The cumulated count of previous distances.</param>
            <returns>The index of an entity in this collection for which 
            the cumulated count of previous distances is greater than or equal to 
            the specified cumulatedDistance.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterSubset.GetCumulatedDistanceAt(System.Int32)">
            <summary>
            Gets the cumulated count of previous distances for the entity at the specific index. 
            (e.g. return pixel position for a row index).
            </summary>
            <param name="index">The entity index.</param>
            <returns>The cumulated count of previous distances for the 
            entity at the specific index.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterSubset.SetNestedDistances(System.Int32,Syncfusion.GridCommon.ScrollAxis.IDistanceCounterCollection)">
            <summary>
            Assigns a collection with nested entities to an item.
            </summary>
            <param name="index">The index.</param>
            <param name="nestedCollection">The nested collection.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterSubset.GetNestedDistances(System.Int32)">
            <summary>
            Gets the nested entities at a given index. If the index does not hold 
            a nested distances collection the method returns null.
            </summary>
            <param name="index">The index.</param>
            <returns>The nested entities at a given index or null.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterSubset.GetNextScrollValue(System.Double)">
            <summary>
            Gets the distance position of the next entity after a given point. 
            </summary>
            <param name="point">The point after which the next entity is to be found.</param>
            <returns>The distance position of the next entity after a given point.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterSubset.GetPreviousScrollValue(System.Double)">
            <summary>
            Gets the distance position of the entity preceding a given point. If the point
            is in between entities, the starting point of the matching entity 
            is returned.
            </summary>
            <param name="point">The point of the entity preceding a given point.</param>
            <returns>The distance position of the entity preceding a given point.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterSubset.GetAlignedScrollValue(System.Double)">
            <summary>
            Gets the aligned scroll value which is the starting point of the entity
            found at the given distance position.
            </summary>
            <param name="point">The point.</param>
            <returns>The starting point of the entity found at the given distance position.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterSubset.Syncfusion#GridCommon#ScrollAxis#IDistanceCounterCollection#ConnectWithParent(Syncfusion.GridCommon.ITreeTableCounterSource)">
            <summary>
            This method is not supported for DistanceCounterSubset.
            </summary>
            <param name="treeTableCounterSource">The nested tree table visible counter source.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterSubset.ConnectWithParent(Syncfusion.GridCommon.ITreeTableCounterSource)">
            <summary>
            This method is not supported for DistanceCounterSubset.
            </summary>
            <param name="treeTableCounterSource">The nested tree table visible counter source.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterSubset.Insert(System.Int32,System.Int32)">
            <summary>
            Inserts entities in the collection from the given index.
            </summary>
            <param name="insertAt">The index of the first entity to be inserted.</param>
            <param name="count">The number of entities to be inserted.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterSubset.Remove(System.Int32,System.Int32)">
            <summary>
            Removes entities in the collection from the given index.
            </summary>
            <param name="removeAt">Index of the first entity to be removed.</param>
            <param name="count">The number of entities to be removed.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterSubset.Dispose">
            <summary>
            Releases the managed and unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceCounterSubset.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the component and optionally releases the managed resources.
            </summary>
            <param name="disposing"> if true - release both managed and unmanaged resources; 
            if false - release only unmanaged resources.
            </param>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.DistanceCounterSubset.Start">
            <summary>
            Gets or sets the starting index of this collection in the parent collection.
            </summary>
            <value>The starting index of this collection in the parent collection.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.DistanceCounterSubset.End">
            <summary>
            Gets the ending index of this collection in the parent collection.
            </summary>
            <value>The ending index of this collection in the parent collection.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.DistanceCounterSubset.Count">
            <summary>
            Gets or sets the raw number of entities (lines, rows or columns).
            </summary>
            <value>The raw number of entities (lines, rows or columns).</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.DistanceCounterSubset.DefaultDistance">
            <summary>
            Gets or sets the default distance (row height or column width) an entity spans.
            </summary>
            <value>The default distance (row height or column width) an entity spans.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.DistanceCounterSubset.TotalDistance">
            <summary>
            Gets the total distance all entities span (e.g. total height of all rows in grid).
            </summary>
            <value>The total distance all entities span (e.g. total height of all rows in grid).</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.DistanceCounterSubset.Item(System.Int32)">
            <summary>
            Gets or sets the distance for an entity from the given index.
            </summary>
            <param name="index">The index for the entity</param>
            <returns>The distance for an entity from the given index.</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.DistanceCounterSubset.Syncfusion#GridCommon#ScrollAxis#IDistancesHost#Distances">
            <summary>
            Gets an object that implements the <see cref="P:Syncfusion.GridCommon.ScrollAxis.DistanceCounterSubset.Distances"/> property.
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.DistanceRangeCounterCollection">
            <summary>
            A collection of entities for which distances need to be counted. The
            collection provides methods for mapping from a distance position to
            an entity and vice versa.<para/>
            For example, in a scrollable grid control you have rows with different heights. 
            Use this collection to determine the total height for all rows in the grid,
            quickly determine the row index for a given point and also quickly determine
            the point at which a row is displayed. This also allows a mapping between the 
            scrollbars value and the rows or columns associated with that value.
            </summary>
            <remarks>
            DistanceCounterCollection internally uses ranges for allocating
            objects up to the modified entry with the highest index. When you modify 
            the size of an entry the collection ensures that objects are allocated 
            for all entries up to the given index. Entries that are after the modified 
            entry are assumed to have the DefaultSize and will not be allocated. 
            <para/>
            Ranges will only be allocated for those lines that have different sizes.
            If you do for example only change the size of line 100 to be 10 then the collection
            will internally create two ranges: Range 1 from 0-99 with DefaultSize and
            Range 2 from 100-100 with size 10. This approach makes this collection
            work very efficient with grid scenarios where often many rows have
            the same height.
            </remarks>
            <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="F:Syncfusion.GridCommon.ScrollAxis.DistanceRangeCounterCollection.PaddingDistance">
            <summary>
            Gets or sets the padding distance of the counter collection.
            </summary>
        </member>
        <member name="F:Syncfusion.GridCommon.ScrollAxis.DistanceRangeCounterCollection.Empty">
            <summary>
            Returns an empty collection.
            </summary>   
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceRangeCounterCollection.#ctor">
            <summary>
            Initializes a new instance of the DistanceRangeCounterCollection class.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceRangeCounterCollection.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the DistanceRangeCounterCollection class.
            </summary>
            <param name="paddingDistance">The padding distance.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceRangeCounterCollection.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceRangeCounterCollection.SetNestedDistances(System.Int32,Syncfusion.GridCommon.ScrollAxis.IDistanceCounterCollection)">
            <summary>
            Assigns a collection with nested entities to an item.
            </summary>
            <param name="index">The index.</param>
            <param name="nestedCollection">The nested collection.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceRangeCounterCollection.GetNestedDistances(System.Int32)">
            <summary>
            Gets the nested entities at a given index. If the index does not hold 
            a nested distances collection the method returns null.
            </summary>
            <param name="index">The index.</param>
            <returns>The nested entities at a given index or null.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceRangeCounterCollection.InvalidateNestedEntry(System.Int32)">
            <summary>
            Invalidates the nested entry of the given index.
            </summary>
            <param name="index">The index of the nested entry.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceRangeCounterCollection.GetNextScrollValue(System.Double)">
            <summary>
            Gets the distance position of the next entity after a given point. 
            </summary>
            <param name="point">The point after which the next entity is to be found.</param>
            <returns>The distance position of the next entity after a given point.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceRangeCounterCollection.GetPreviousScrollValue(System.Double)">
            <summary>
            Gets the distance position of the entity preceding a given point. If the point
            is in between entities, the starting point of the matching entity 
            is returned.
            </summary>
            <param name="point">The point of the entity preceding a given point.</param>
            <returns>The distance position of the entity preceding a given point.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceRangeCounterCollection.GetAlignedScrollValue(System.Double)">
            <summary>
            Gets the aligned scroll value which is the starting point of the entity
            found at the given distance position.
            </summary>
            <param name="point">The point.</param>
            <returns>The starting point of the entity found at the given distance position.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceRangeCounterCollection.ConnectWithParent(Syncfusion.GridCommon.ITreeTableCounterSource)">
            <summary>
            Connects a nested distance collection with a parent.
            </summary>
            <param name="treeTableCounterSource">The <see cref="T:Syncfusion.GridCommon.ITreeTableCounterSource"/> 
            representing the nested tree table visible counter source.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceRangeCounterCollection.GetNextVisibleIndex(System.Int32)">
            <summary>
            Gets the next visible index. Skip subsequent entities for which the distance is 0.0 and return the next entity.
            </summary>
            <param name="index">The index.</param>
            <returns>The next visible index from the given index.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceRangeCounterCollection.GetPreviousVisibleIndex(System.Int32)">
            <summary>
            Gets the previous visible index. Skip previous entities for which the distance is 0.0 and return the previous entity.
            </summary>
            <param name="index">The index.</param>
            <returns>The previous visible index from the given index.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceRangeCounterCollection.IndexOfCumulatedDistance(System.Double)">
            <summary>
            Gets the index of an entity in this collection for which 
            the cumulated count of previous distances is greater than or equal to 
            the specified cumulatedDistance. (e.g. return row index for 
            pixel position).
            </summary>
            <param name="cumulatedDistance">The cumulated count of previous distances.</param>
            <returns>The index of an entity in this collection for which 
            the cumulated count of previous distances is greater than or equal to 
            the specified cumulatedDistance.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceRangeCounterCollection.GetCumulatedDistanceAt(System.Int32)">
            <summary>
            Gets the cumulated count of previous distances for the entity at the specific index. 
            (e.g. return pixel position for a row index).
            </summary>
            <param name="index">The entity index.</param>
            <returns>The cumulated count of previous distances for the
            entity at the specific index.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceRangeCounterCollection.SetRange(System.Int32,System.Int32,System.Double)">
            <summary>
            Hides a specified range of entities (lines, rows or columns).
            </summary>
            <param name="from">The index for the first entity.</param>
            <param name="to">The raw index for the last entity.</param>
            <param name="distance">The distance.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceRangeCounterCollection.ResetRange(System.Int32,System.Int32)">
            <summary>
            Resets the range by restoring the default distance for all entries in the specified range.
            </summary>
            <param name="from">The index for the first entity.</param>
            <param name="to">The raw index for the last entity.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceRangeCounterCollection.Insert(System.Int32,System.Int32)">
            <summary>
            Inserts entities in the collection from the given index.
            </summary>
            <param name="insertAt">The index of the first entity to be inserted.</param>
            <param name="count">The number of entities to be inserted.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceRangeCounterCollection.Insert(System.Int32,System.Int32,System.Double)">
            <summary>
            Inserts entities in the collection from the given index.
            </summary>
            <param name="insertAt">The index of the first entity to be inserted.</param>
            <param name="count">The number of entities to be inserted.</param>
            <param name="distance">The distance to be set.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceRangeCounterCollection.Remove(System.Int32,System.Int32)">
            <summary>
            Removes entities in the collection from the given index.
            </summary>
            <param name="removeAt">Index of the first entity to be removed.</param>
            <param name="count">The number of entities to be removed.</param>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.DistanceRangeCounterCollection.Count">
            <summary>
            Gets or sets the raw number of entities (lines, rows or columns).
            </summary>
            <value>The raw number of entities (lines, rows or columns).</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.DistanceRangeCounterCollection.DefaultDistance">
            <summary>
            Gets or sets the default distance (row height or column width) an entity spans.
            </summary>
            <value>The default distance (row height or column width) an entity spans.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.DistanceRangeCounterCollection.TotalDistance">
            <summary>
            Gets the total distance all entities span (e.g. total height of all rows in grid).
            </summary>
            <value>The total distance all entities span (e.g. total height of all rows in grid).</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.DistanceRangeCounterCollection.Item(System.Int32)">
            <summary>
            Gets or sets the distance for an entity from the given index.
            </summary>
            <param name="index">The index for the entity</param>
            <returns>The distance for an entity from the given index.</returns>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.DistanceRangeCounterCollection.LineIndexEntryAt">
            <summary>
            Initializes the LineIndexEntryAt class
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.DistanceRangeCounterCollection.NestedDistanceCounterCollectionSource">
            <summary>
            An object that maintains a collection of nested distances and wires
            it to a parent distance collection. The object is used by the 
            DistanceCounterCollection.SetNestedDistances method to associated
            the nested distances with an index in the parent collection.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterSource">
            <summary>
            An object that counts objects that are marked "Visible". It implements
            the ITreeTableCounterSource interface and creates a <see cref="T:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounter"/>.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterSource.#ctor(System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterSource"/> class.
            </summary>
            <param name="visibleCount">The visible count.</param>
            <param name="lineCount">The line count.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterSource.ToString">
            <summary>
            Returns a string describing the state of the object.
            </summary>
            <returns>A string describing the state of the object.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterSource.GetCounter">
            <summary>
            Returns the <see cref="T:Syncfusion.GridCommon.TreeTableVisibleCounter"/> object with counters.
            </summary>
            <returns>The <see cref="T:Syncfusion.GridCommon.TreeTableVisibleCounter"/> object with counters.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterSource.InvalidateCounterTopDown(System.Boolean)">
            <summary>
            Marks all counters dirty in this object and child nodes.
            </summary>
            <param name="notifyCounterSource">A boolean value indicating whether to notify the counter 
            source.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterSource.InvalidateCounterBottomUp">
            <summary>
            Marks all counters dirty in this object and parent nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterSource.LineCount">
            <summary>
            Gets or sets the line count.
            </summary>
            <value>The line count.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterSource.SingleLineDistance">
            <summary>
            Gets or sets the distance of a single line.
            </summary>
            <value>The single line distance.</value>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceRangeCounterCollection.NestedDistanceCounterCollectionSource.#ctor(Syncfusion.GridCommon.ScrollAxis.IDistanceCounterCollection,Syncfusion.GridCommon.ScrollAxis.IDistanceCounterCollection,Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterEntry)">
            <summary>
            Initializes a new instance of the NestedDistanceCounterCollectionSource class.
            </summary>
            <param name="parentDistances">The parent distances.</param>
            <param name="nestedDistances">The nested distances.</param>
            <param name="entry">The entry.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceRangeCounterCollection.NestedDistanceCounterCollectionSource.InvalidateCounterBottomUp">
            <summary>
            Marks all counters dirty in this object and parent nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceRangeCounterCollection.NestedDistanceCounterCollectionSource.GetCounter">
            <summary>
            Returns the <see cref="T:Syncfusion.GridCommon.TreeTableVisibleCounter"/> object with counters.
            </summary>
            <returns>The <see cref="T:Syncfusion.GridCommon.TreeTableVisibleCounter"/> object with counters.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceRangeCounterCollection.NestedDistanceCounterCollectionSource.ToString">
            <summary>
            Returns a string describing the state of the object.
            </summary>
            <returns>A string describing the state of the object.</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.DistanceRangeCounterCollection.NestedDistanceCounterCollectionSource.Entry">
            <summary>
            Gets or sets the counter entry.
            </summary>
            <value>The entry.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.DistanceRangeCounterCollection.NestedDistanceCounterCollectionSource.SingleLineDistance">
            <summary>
            Gets or sets the distance of a single line.
            </summary>
            <value>The single line distance.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.DistanceRangeCounterCollection.NestedDistanceCounterCollectionSource.ParentDistances">
            <summary>
            Gets the parent distances.
            </summary>
            <value>The parent distances.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.DistanceRangeCounterCollection.NestedDistanceCounterCollectionSource.NestedDistances">
            <summary>
            Gets the nested distances.
            </summary>
            <value>The nested distances.</value>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterKind">
            <summary>
            A collection of integers used to specify various counter kinds.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterKind.CountAll">
            <summary>
            All counters.
            </summary>
        </member>
        <member name="F:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterKind.Distance">
            <summary>
            Visible Counter.
            </summary>
        </member>
        <member name="F:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterKind.Lines">
            <summary>
            Line Counter.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterKind.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterKind"/> class from being created.
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounter">
            <summary>
            A counter that counts objects that are marked "Visible".
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounter.Empty">
            <summary>
            Returns an empty DistanceLineCounter that represents zero visible elements.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounter.#ctor(System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounter"/> class.
            </summary>
            <param name="distance">The distance.</param>
            <param name="lineCount">The line count.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounter.GetValue(System.Int32)">
            <summary>
            Returns the value of the counter. A cookie specifies 
            a specific counter type.
            </summary>
            <param name="cookie">The cookie.</param>
            <returns>The value of the counter.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounter.Syncfusion#GridCommon#ITreeTableCounter#Combine(Syncfusion.GridCommon.ITreeTableCounter,System.Int32)">
            <summary>
            Combines this counter object with another counter and returns a new object. A cookie can specify
            a specific counter type.
            </summary>
            <param name="other">Counter total</param>
            <param name="cookie">cookie value.</param>
            <returns>Returns the new object</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounter.Combine(Syncfusion.GridCommon.ScrollAxis.DistanceLineCounter,System.Int32)">
            <summary>
            Combines the counter values of this counter object with the values of another counter object
            and returns a new counter object.
            </summary>
            <param name="other">The other line counter.</param>
            <param name="cookie">The cookie.</param>
            <returns>Returns a new object which is the combination of the counter values of this counter 
            object with the values of another counter object.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounter.Syncfusion#GridCommon#ITreeTableCounter#Compare(Syncfusion.GridCommon.ITreeTableCounter,System.Int32)">
            <summary>
            Compares this counter with another counter. A cookie can specify
            a specific counter type.
            </summary>
            <param name="other">The other.</param>
            <param name="cookie">The cookie.</param>
            <returns>Returns the compared value</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounter.Compare(Syncfusion.GridCommon.ScrollAxis.DistanceLineCounter,System.Int32)">
            <summary>
            Compares this counter with another counter. A cookie can specify
            a specific counter type.
            </summary>
            <param name="other">The other counter.</param>
            <param name="cookie">The cookie.</param>
            <returns>Returns a value indicating the comparison of the current object and the given 
            object.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounter.IsEmpty(System.Int32)">
            <summary>
            Indicates whether the counter object is empty. A cookie can specify
            a specific counter type.
            </summary>
            <param name="cookie">The cookie.</param>
            <returns>
            <b>True</b> if the specified cookie is empty, otherwise <b>false</b>.
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounter.LineCount">
            <summary>
            Gets the line count.
            </summary>
            <value>The line count.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounter.Distance">
            <summary>
            Gets the distance.
            </summary>
            <value>The distance.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounter.Kind">
            <summary>
            Gets the counter kind.
            </summary>
            <value>The counter kind.</value>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterTree">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterTree"/> class.
            </summary>
            /// <exclude/>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterTree.#ctor(Syncfusion.GridCommon.ScrollAxis.DistanceLineCounter,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterTree"/> class.
            </summary>
            <param name="startPos">The start position.</param>
            <param name="sorted">A boolean value indicating whether sorted.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterTree.GetCounterTotal">
            <summary>
            Returns the total number of counters.
            </summary>
            <returns>The total number of counters.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterTree.GetPreviousEntry(Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterEntry)">
            <summary>
            Gets the previous entry.
            </summary>
            <param name="current">The current counter entry.</param>
            <returns>The previous entry.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterTree.GetNextEntry(Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterEntry)">
            <summary>
            Gets the next entry.
            </summary>
            <param name="current">The current counter entry.</param>
            <returns>The next entry.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterTree.GetEntryAtCounterPosition(Syncfusion.GridCommon.ScrollAxis.DistanceLineCounter,System.Int32)">
            <summary>
            Returns an entry at the specified counter position. A cookie defines the type of counter.
            </summary>
            <param name="searchPosition">The search position.</param>
            <param name="cookie">The cookie.</param>
            <returns>Returns an entry at the specified counter position.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterTree.GetEntryAtCounterPosition(Syncfusion.GridCommon.ScrollAxis.DistanceLineCounter,System.Int32,System.Boolean)">
            <summary>
            Returns an entry at the specified counter position. A cookie defines the type of counter.
            </summary>
            <param name="searchPosition">The search position.</param>
            <param name="cookie">The cookie.</param>
            <param name="preferLeftMost">A boolean value indicating whether the leftmost entry should be returned if multiple tree elements have the
            same SearchPosition.</param>
            <returns>
            Returns an entry at the specified counter position.
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterTree.GetNextNotEmptyCounterEntry(Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterEntry,System.Int32)">
            <summary>
            Returns the subsequent entry in the collection for which the specific counter is not empty.
            A cookie defines the type of counter.
            </summary>
            <param name="current">The current counter entry.</param>
            <param name="cookie">The cookie.</param>
            <returns>The subsequent entry in the collection for which the specific counter is not empty.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterTree.GetPreviousNotEmptyCounterEntry(Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterEntry,System.Int32)">
            <summary>
            Returns the previous entry in the collection for which the specific counter is not empty.
            A cookie defines the type of counter.
            </summary>
            <param name="current">The current counter entry.</param>
            <param name="cookie">The cookie.</param>
            <returns>Returns the previous entry in the collection for which the specific counter is not empty.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterTree.GetNextVisibleEntry(Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterEntry)">
            <summary>
            The next entry in the collection for which CountVisible counter is not empty.
            </summary>
            <param name="current">The current counter entry.</param>
            <returns>Returns the next entry in the collection for which CountVisible counter is not empty.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterTree.GetPreviousVisibleEntry(Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterEntry)">
            <summary>
            The previous entry in the collection for which CountVisible counter is not empty.
            </summary>
            <param name="current">The current counter entry.</param>
            <returns>Returns the previous entry in the collection for which CountVisible counter is not empty.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterTree.Insert(System.Int32,Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterEntry)">
            <summary>
            Inserts a <see cref="T:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterEntry"/> object at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The object to be inserted.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterTree.Remove(Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterEntry)">
            <summary>
            Removes the given object from the tree.
            </summary>
            <param name="value">The object to be removed.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterTree.Contains(Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterEntry)">
            <summary>
            Indicates whether the given object belongs to the tree.
            </summary>
            <param name="value">The object to be queried.</param>
            <returns>
            <b>True</b> if tree contains the specified object, otherwise <b>false</b>.
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterTree.IndexOf(Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterEntry)">
            <summary>
            Returns the position of an object in the tree.
            </summary>
            <param name="value">The object whose index is to be obtained.</param>
            <returns>The position of an object in the tree.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterTree.Add(Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterEntry)">
            <summary>
            Appends the given object.
            </summary>
            <param name="value">The object to be appended.</param>
            <returns>Returns the position of the object appended.</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterTree.Item(System.Int32)">
            <summary>
            Gets or sets the distance line counter entry for the given index.
            </summary>
            <param name="index">The index of the counter entry needed.</param>
            <returns>The distance line counter entry for the given index.</returns>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterEntry">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterTree"/> class.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterEntry.GetCounterPosition">
            <summary>
            The cumulative position of this node.
            </summary>
            <returns>Returns the cumulative position of this node.</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterEntry.Value">
            <summary>
            Gets or sets the distance line counter source.
            </summary>
            <value>The distance line counter source.</value>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.IEditableLineSizeHost">
            <summary>
            A collection that manages lines with varying height and hidden state. 
            It has properties for header and footer lines, total line count, default
            size of a line and also lets you add nested collections. Methods
            are provided for changing the values and getting the total extent.
            </summary>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.ILineSizeHost">
            <summary>
            A collection that manages lines with varying height and hidden state. 
            It has properties for header and footer lines, total line count, default
            size of a line and also lets you add nested collections.
            </summary>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ILineSizeHost.GetDefaultLineSize">
            <summary>
            Returns the default line size.
            </summary>
            <returns>The default line size.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ILineSizeHost.GetLineCount">
            <summary>
            Returns the line count.
            </summary>
            <returns>The line count.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ILineSizeHost.GetSize(System.Int32,System.Int32@)">
            <summary>
            Gets the size of the line at the given index.
            </summary>
            <param name="index">The index of the line for which the size is to be obtained.</param>
            <param name="repeatValueCount">The number of subsequent values with same size.</param>
            <returns>The size of the line at the given index.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ILineSizeHost.GetHeaderLineCount">
            <summary>
            Gets the header line count.
            </summary>
            <returns>The header line count.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ILineSizeHost.GetFooterLineCount">
            <summary>
            Gets the footer line count.
            </summary>
            <returns>The footer line count.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ILineSizeHost.GetHidden(System.Int32,System.Int32@)">
            <summary>
            Gets the boolean value indicating the hidden state for the line with given index.
            </summary>
            <param name="index">The index of the line for which the hidden state is to be obtained.</param>
            <param name="repeatValueCount">The number of subsequent lines with same state.</param>
            <returns>The boolean value indicating the hidden state for a line.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ILineSizeHost.InitializeScrollAxis(Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase)">
            <summary>
            Initializes the scroll axis.
            </summary>
            <param name="scrollAxis">The scroll axis.</param>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.ILineSizeHost.LineSizeChanged">
            <summary>
            Occurs when a lines size was changed.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.ILineSizeHost.LineHiddenChanged">
            <summary>
            Occurs when a lines hidden state changed.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.ILineSizeHost.DefaultLineSizeChanged">
            <summary>
            Occurs when the default line size changed.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.ILineSizeHost.LineCountChanged">
            <summary>
            Occurs when the line count was changed.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.ILineSizeHost.HeaderLineCountChanged">
            <summary>
            Occurs when the header line count was changed.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.ILineSizeHost.FooterLineCountChanged">
            <summary>
            Occurs when the footer line count was changed.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.ILineSizeHost.LinesInserted">
            <summary>
            Occurs when lines were inserted.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.ILineSizeHost.LinesRemoved">
            <summary>
            Occurs when lines were removed.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.IEditableLineSizeHost.GetNestedLines(System.Int32)">
            <summary>
            Gets the nested lines at the given index.
            </summary>
            <param name="index">The index at which the nested lines is to be obtained.</param>
            <returns>The <see cref="T:Syncfusion.GridCommon.ScrollAxis.IEditableLineSizeHost"/> representing the nested lines.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.IEditableLineSizeHost.SetNestedLines(System.Int32,Syncfusion.GridCommon.ScrollAxis.IEditableLineSizeHost)">
            <summary>
            Sets the nested lines at the given index.
            </summary>
            <param name="index">The index at which the nested lines is to be added.</param>
            <param name="nestedLines">The nested lines to be added. If parameter is null the line will 
            be converted to a normal (not nested) line with default line size.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.IEditableLineSizeHost.InsertLines(System.Int32,System.Int32,Syncfusion.GridCommon.ScrollAxis.IEditableLineSizeHost)">
            <summary>
            Insert the given number of lines at the given index.
            </summary>
            <param name="insertAtLine">The index of the first line to insert.</param>
            <param name="count">The count of the lines to be inserted.</param>
            <param name="moveLines">A container with saved state from a preceding <see cref="M:Syncfusion.GridCommon.ScrollAxis.IEditableLineSizeHost.RemoveLines(System.Int32,System.Int32,Syncfusion.GridCommon.ScrollAxis.IEditableLineSizeHost)"/> 
            call when lines should be moved. When it is null, empty lines with default size are inserted.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.IEditableLineSizeHost.RemoveLines(System.Int32,System.Int32,Syncfusion.GridCommon.ScrollAxis.IEditableLineSizeHost)">
            <summary>
            Removes a number of lines at the given index.
            </summary>
            <param name="removeAtLine">The index of the first line to be removed.</param>
            <param name="count">The count of the lines to be removed.</param>
            <param name="moveLines">A container to save state for a subsequent <see cref="M:Syncfusion.GridCommon.ScrollAxis.IEditableLineSizeHost.InsertLines(System.Int32,System.Int32,Syncfusion.GridCommon.ScrollAxis.IEditableLineSizeHost)"/> 
            call when lines should be moved.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.IEditableLineSizeHost.CreateMoveLines">
            <summary>
            Creates the object which holds temporary state when moving lines.
            </summary>
            <returns>The object which holds temporary state when moving lines.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.IEditableLineSizeHost.SetHidden(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the hidden state for the given range of lines.
            </summary>
            <param name="from">The start index of the line for which the hidden state to be set.</param>
            <param name="to">The end index of the line for which the hidden state to be set.</param>
            <param name="hide">A boolean value indicating whether to hide the lines. If set to <b>true</b>
            hide the lines.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.IEditableLineSizeHost.SetRange(System.Int32,System.Int32,System.Double)">
            <summary>
            Sets the line size for the range of lines.
            </summary>
            <param name="from">The start index of the line for which the line size is to be set.</param>
            <param name="to">The end index of the line for which the line size is to be set.</param>
            <param name="size">The line size to be set to the given range of lines.</param>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.IEditableLineSizeHost.TotalExtent">
            <summary>
            Gets the total extent which is the total of all line sizes. <b>Note:</b> This property only 
            works if the <see cref="T:Syncfusion.GridCommon.ScrollAxis.DistanceCounterCollection"/> has been setup for pixel scrolling, 
            otherwise it returns <see cref="F:System.Double.NaN"/>.
            </summary>
            <value>The total extent which is the total of all line sizes or <see cref="F:System.Double.NaN"/>.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.IEditableLineSizeHost.SupportsNestedLines">
            <summary>
            Gets a value indicating whether the host supports nesting or not.
            </summary>
            <value>A boolean value indicating whether the host supports nesting.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.IEditableLineSizeHost.SupportsInsertRemove">
            <summary>
            Gets a value indicating whether the host supports inserting and removing lines.
            </summary>
            <value>The boolean value indicating whether the host supports inserting and removing lines.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.IEditableLineSizeHost.DefaultLineSize">
            <summary>
            Gets or sets the default size of lines.
            </summary>
            <value>The default size of lines.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.IEditableLineSizeHost.FooterLineCount">
            <summary>
            Gets or sets the footer line count.
            </summary>
            <value>The footer line count.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.IEditableLineSizeHost.HeaderLineCount">
            <summary>
            Gets or sets the header line count.
            </summary>
            <value>The header line count.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.IEditableLineSizeHost.LineCount">
            <summary>
            Gets or sets the line count.
            </summary>
            <value>The line count.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.IEditableLineSizeHost.Item(System.Int32)">
            <summary>
            Gets or sets the line size at the specified index.
            </summary>
            <param name="index">index value</param>
            <value>The line size at the specified index.</value>
            <returns>Returns the line size at the specified index.</returns>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.IPaddedEditableLineSizeHost">
            <summary>
            An object that implements the <see cref="P:Syncfusion.GridCommon.ScrollAxis.IPaddedEditableLineSizeHost.PaddingDistance"/> property and <see cref="M:Syncfusion.GridCommon.ScrollAxis.IPaddedEditableLineSizeHost.DeferRefresh"/> method.
            </summary>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.IPaddedEditableLineSizeHost.DeferRefresh">
            <summary>
            Enter the defer cycle so that all data operations in view is performed and update once.
            </summary>
            <returns>The disposable object to release the allocated resources.</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.IPaddedEditableLineSizeHost.PaddingDistance">
            <summary>
            Gets or sets the padding distance for the line.
            </summary>
            <value>The padding distance for the line.</value>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeHost">
            <summary>
            Implements the <see cref="T:Syncfusion.GridCommon.ScrollAxis.ILineSizeHost"/> interface for an empty collection
            that cannot be modified.
            </summary>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="F:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeHost.Empty">
            <summary>
            Returns the empty collection.
            </summary>        
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeHost.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeHost"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeHost.Syncfusion#GridCommon#ScrollAxis#ILineSizeHost#GetDefaultLineSize">
            <summary>
            Returns the default line size.
            </summary>
            <returns>The default line size.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeHost.GetDefaultLineSize">
            <summary>
            Returns the default line size.
            </summary>
            <returns>The default line size.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeHost.Syncfusion#GridCommon#ScrollAxis#ILineSizeHost#GetLineCount">
            <summary>
            Returns the line count.
            </summary>
            <returns>The line count.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeHost.GetLineCount">
            <summary>
            Returns the line count.
            </summary>
            <returns>The line count.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeHost.Syncfusion#GridCommon#ScrollAxis#ILineSizeHost#GetSize(System.Int32,System.Int32@)">
            <summary>
            Gets the size of the line at the given index.
            </summary>
            <param name="index">The index of the line for which the size is to be obtained.</param>
            <param name="repeatValueCount">The number of subsequent values with same size.</param>
            <returns>The size of the line at the given index.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeHost.GetSize(System.Int32,System.Int32@)">
            <summary>
            Gets the size of the line at the given index.
            </summary>
            <param name="index">The index of the line for which the size is to be obtained.</param>
            <param name="repeatValueCount">The number of subsequent values with same size.</param>
            <returns>The size of the line at the given index.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeHost.Syncfusion#GridCommon#ScrollAxis#ILineSizeHost#GetHeaderLineCount">
            <summary>
            Gets the header line count.
            </summary>
            <returns>The header line count.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeHost.GetHeaderLineCount">
            <summary>
            Gets the header line count.
            </summary>
            <returns>The header line count.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeHost.Syncfusion#GridCommon#ScrollAxis#ILineSizeHost#GetFooterLineCount">
            <summary>
            Gets the footer line count.
            </summary>
            <returns>The footer line count.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeHost.GetFooterLineCount">
            <summary>
            Gets the footer line count.
            </summary>
            <returns>The footer line count.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeHost.Syncfusion#GridCommon#ScrollAxis#ILineSizeHost#GetHidden(System.Int32,System.Int32@)">
            <summary>
            Gets the boolean value indicating the hidden state for the line with given index.
            </summary>
            <param name="index">The index of the line for which the hidden state is to be obtained.</param>
            <param name="repeatValueCount">The number of subsequent lines with same state.</param>
            <returns>The boolean value indicating the hidden state for a line.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeHost.Syncfusion#GridCommon#ScrollAxis#ILineSizeHost#InitializeScrollAxis(Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase)">
            <summary>
            Initializes the scroll axis.
            </summary>
            <param name="scrollAxis">The scroll axis.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeHost.Dispose">
            <summary>
            Releases the managed and unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeHost.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the component and optionally releases the managed resources.
            </summary>
            <param name="disposing"> if true - release both managed and unmanaged resources; 
            if false - release only unmanaged resources.
            </param>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeHost.LineSizeChanged">
            <summary>
            Occurs when line size changed.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeHost.Syncfusion#GridCommon#ScrollAxis#ILineSizeHost#LineSizeChanged">
            <summary>
            Occurs when line size changed.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeHost.LineHiddenChanged">
            <summary>
            Occurs when hidden line changed.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeHost.Syncfusion#GridCommon#ScrollAxis#ILineSizeHost#LineHiddenChanged">
            <summary>
            Occurs when hidden line changed.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeHost.DefaultLineSizeChanged">
            <summary>
            Occurs when default line size changed.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeHost.Syncfusion#GridCommon#ScrollAxis#ILineSizeHost#DefaultLineSizeChanged">
            <summary>
            Occurs when default line size changed.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeHost.LineCountChanged">
            <summary>
            Occurs when line count changed.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeHost.Syncfusion#GridCommon#ScrollAxis#ILineSizeHost#LineCountChanged">
            <summary>
            Occurs when line count changed.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeHost.HeaderLineCountChanged">
            <summary>
            Occurs when header line count changed.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeHost.Syncfusion#GridCommon#ScrollAxis#ILineSizeHost#HeaderLineCountChanged">
            <summary>
            Occurs when header line count changed.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeHost.FooterLineCountChanged">
            <summary>
            Occurs when footer line count changed.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeHost.Syncfusion#GridCommon#ScrollAxis#ILineSizeHost#FooterLineCountChanged">
            <summary>
            Occurs when footer line count changed.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeHost.LinesInserted">
            <summary>
            Occurs when lines are inserted.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeHost.Syncfusion#GridCommon#ScrollAxis#ILineSizeHost#LinesInserted">
            <summary>
            Occurs when lines are inserted.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeHost.LinesRemoved">
            <summary>
            Occurs when lines are removed.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeHost.Syncfusion#GridCommon#ScrollAxis#ILineSizeHost#LinesRemoved">
            <summary>
            Occurs when lines are removed.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeHost.Syncfusion#GridCommon#ScrollAxis#IDistancesHost#Distances">
            <summary>
            Gets an object that implements the <see cref="P:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeHost.Distances"/> property.
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.INestedDistancesHost">
             <summary>
             An object that implements the <see cref="M:Syncfusion.GridCommon.ScrollAxis.INestedDistancesHost.GetDistances(System.Int32)"/> method.
             </summary>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.INestedDistancesHost.GetDistances(System.Int32)">
            <summary>
            Gets the nested distances, if a line contains a nested lines collection, otherwise null.
            </summary>
            <param name="line">The line at which the distances is to be obtained.</param>
            <returns>The nested distances, if a line contains a nested lines collection, otherwise null.</returns>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.IScrollBar">
            <summary>
            Defines an interface that provides all properties to configure a scrollbar.
            </summary>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.IScrollBar.LargeChange">
            <summary>
            Gets or sets a value to be added to or subtracted from the value of the property when the scroll box is moved a large distance.
            </summary>
            <value>The value to be added to or subtracted from the value of the property when the scroll 
            box is moved a large distance.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.IScrollBar.Maximum">
            <summary>
            Gets or sets the upper limit of values of the scrollable range.
            </summary>
            <value>The upper limit of values of the scrollable range.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.IScrollBar.Minimum">
            <summary>
            Gets or sets the lower limit of values of the scrollable range.
            </summary>
            <value>The lower limit of values of the scrollable range.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.IScrollBar.SmallChange">
            <summary>
            Gets or sets the value to be added to or subtracted from the value of the property when the 
            scroll box is moved a small distance.
            </summary>
            <value>The value to be added to or subtracted from the value of the property when the 
            scroll box is moved a small distance.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.IScrollBar.Value">
            <summary>
            Gets or sets a numeric value that represents the current position of the scroll box on the scroll bar control.
            </summary>
            <value>A numeric value that represents the current position of the scroll box on the scroll 
            bar control.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.IScrollBar.Enabled">
            <summary>
             Gets or sets a value indicating whether the scroll bar is enabled or not.
            </summary>
            <value>A number that represents the current position of the scroll box on the scroll bar control.</value>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.LineScrollAxis">
            <summary>
            The LineScrollAxis implements scrolling only for whole lines. You can
            hide lines and LineScrollAxis provides a mapping mechanism between the
            index of the line and the scroll index and vice versa. Hidden lines
            are not be counted when the scroll index is determined for a line.
            <para/>
            The LineScrollAxis does not support scrolling in between lines (pixel scrolling).
            This can be of advantage if you have a large number of lines with varying
            line sizes. In such case the LineScrollAxis does not need to maintain
            a collection that tracks line sizes whereas the <see cref="T:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis"/> does need to.
            </summary>
             [ClassReference(IsReviewed = false)]
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase">
             <summary>
             ScrollAxisBase is an abstract base class and implements scrolling
             logic for both horizontal and vertical scrolling in a <see cref="!:ScrollAxisControl"/>.
             Logical units in the ScrollAxisBase are called "Lines". With the 
             <see cref="!:ScrollAxisControl.ScrollRows"/> a line represents rows in a grid 
             and with <see cref="!:ScrollAxisControl.ScrollRows"/> a line represents columns in a grid.
             <para/>
             ScrollAxisBase has support for frozen header and footer lines, maintaining a
             scroll position and updating and listening to scrollbars. It also maintains
             a collection of <see cref="T:Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo"/> items for all the lines that are
             visible in the viewing area. ScrollAxisBase wires itself with a 
             <see cref="P:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.ScrollLinesHost"/> and reacts to changes in line count,
             line sizes, hidden state and default line size.
             </summary>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.#ctor(Syncfusion.GridCommon.ScrollAxis.IScrollBar,Syncfusion.GridCommon.ScrollAxis.ILineSizeHost)">
            <summary>
            Initializes a new instance of the ScrollAxisBase class.
            </summary>
            <param name="scrollBar">The scroll bar state.</param>
            <param name="scrollLinesHost">The scroll lines host.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the component and optionally releases the managed resources.
            </summary>
            <param name="disposing"> if true - release both managed and unmanaged resources; 
            if false - release only unmanaged resources.
            </param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.UpdateScrollBar(System.Boolean)">
            <summary>
            Updates the scroll bar.
            </summary>
            <param name="ignorePropertyChange">A boolean value indicating whether to ignore the 
            property change.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.UpdateScrollBar">
            <summary>
            Updates the scroll bar.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.SetLineHiddenState(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the hidden state of the lines.
            </summary>
            <param name="from">The start index of the line.</param>
            <param name="to">The end index of the line.</param>
            <param name="hide">A boolean value indicating whether to hide the lines. if set to <b>true</b> - [hide].</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.SetLineSize(System.Int32,System.Int32,System.Double)">
            <summary>
            Sets the size of the lines for the given range of lines. Will do nothing for a <see cref="T:Syncfusion.GridCommon.ScrollAxis.LineScrollAxis"/>.
            </summary>
            <param name="from">The start index of the line.</param>
            <param name="to">The end index of the line.</param>
            <param name="size">The line size.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.GetLineSize(System.Int32,System.Int32@)">
            <summary>
            Gets the size from <see cref="P:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.ScrollLinesHost"/> or if the line is being resized then get temporary value
            previously set with <see cref="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.SetLineResize(System.Int32,System.Double)"/>
            </summary>
            <param name="index">The index.</param>
            <param name="repeatSizeCount">The number of subsequent values with same size.</param>
            <returns>The size from <see cref="P:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.ScrollLinesHost"/> or if the line is being resized then 
            get temporary value previously set with <see cref="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.SetLineResize(System.Int32,System.Double)"/>
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.GetLineSize(System.Int32)">
            <summary>
            Gets the size of the line.
            </summary>
            <param name="index">The index of the line.</param>
            <returns>The size of the line.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.GetRangeToHelper(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the maximum range
            </summary>
            <param name="n">start index</param>
            <param name="to">end index</param>
            <param name="repeatSizeCount">repeat count value</param>
            <returns>Returns the minimum index value</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.SetLineResize(System.Int32,System.Double)">
            <summary>
            Set temporary value for a line size during a resize operation without committing 
            value to ScrollLinesHost.
            </summary>
            <param name="index">The index of the line.</param>
            <param name="size">The size of the line.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.ResetLineResize">
            <summary>
            Resets temporary value for line size after a resize operation. 
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.GetScrollLinesHostSize(System.Int32,System.Int32@)">
            <summary>
            Gets the size from <see cref="P:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.ScrollLinesHost"/> or if the line is being resized then get temporary value
            previously set with <see cref="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.SetLineResize(System.Int32,System.Double)"/>. If size is negative then <see cref="P:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.DefaultLineSize"/> is returned.
            </summary>
            <param name="index">The index of the line.</param>
            <param name="repeatSizeCount">The number of subsequent values with same size.</param>
            <returns>
            The size from <see cref="P:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.ScrollLinesHost"/> or if the line is being resized then get temporary value
            previously set with <see cref="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.SetLineResize(System.Int32,System.Double)"/>. If size is negative then <see cref="P:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.DefaultLineSize"/> is returned.
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.OnLinesRemoved(System.Int32,System.Int32)">
            <summary>
            Called when lines were removed in ScrollLinesHost.
            </summary>
            <param name="removeAt">Index of the first removed line.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.OnLinesInserted(System.Int32,System.Int32)">
            <summary>
            Called when lines were inserted in ScrollLinesHost.
            </summary>
            <param name="insertAt">Index of the first inserted line.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.SetHeaderLineCount(System.Int32)">
            <summary>
            Sets the header line count.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.SetFooterLineCount(System.Int32)">
            <summary>
            Sets the footer line count.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.GetScrollLineIndex(System.Int32@,System.Double@)">
            <summary>
            Gets the index of the scroll line.
            </summary>
            <param name="scrollLineIndex">Index of the scroll line.</param>
            <param name="scrollLineOffset">The scroll line offset.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.SetScrollLineIndex(System.Int32,System.Double)">
            <summary>
            Sets the index of the scroll line.
            </summary>
            <param name="scrollLineIndex">The index of the scroll line.</param>
            <param name="scrollLineOffset">The scroll line offset.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.GetPreviousScrollLineIndex(System.Int32)">
            <summary>
            Gets the index of the previous scroll line.
            </summary>
            <param name="lineIndex">The current index of the line.</param>
            <returns>The index of the previous scroll line.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.GetNextScrollLineIndex(System.Int32)">
            <summary>
            Gets the index of the next scroll line.
            </summary>
            <param name="lineIndex">The current index of the line.</param>
            <returns>The index of the next scroll line.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.ScrollToNextPage">
            <summary>
            Scrolls to next page.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.ScrollToPreviousPage">
            <summary>
            Scrolls to previous page.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.ScrollToNextLine">
            <summary>
            Scrolls to next line.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.ScrollToPreviousLine">
            <summary>
            Scrolls to previous line.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.AlignScrollLine">
            <summary>
            Aligns the scroll line.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.ScrollInView(System.Int32,System.Double)">
            <summary>
            Scrolls the line into viewable area.
            </summary>
            <param name="lineIndex">The index of the line.</param>
            <param name="lineSize">The size of the line.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.ScrollInView(System.Int32)">
            <summary>
            Scrolls the line into viewable area.
            </summary>
            <param name="lineIndex">The index of the line.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.MouseWheel(System.Int32)">
            <summary>
            This method is called in response to a MouseWheel event.
            </summary>
            <param name="delta">The delta.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.MarkDirty">
            <summary>
            Makes the layout dirty.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.FreezeVisibleLines">
            <summary>
            Freezes the visible lines.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.UnfreezeVisibleLines">
            <summary>
            Unfreezes the visible lines.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.GetVisibleLines">
            <summary>
            Gets the visible lines collection.
            </summary>
            <returns>The visible lines collection.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.ResetVisibleLines">
            <summary>
            Resets the visible lines collection.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.VisiblePointToLineIndex(System.Double,System.Boolean)">
            <summary>
            Gets the visible line index for a point in the display.
            </summary>
            <param name="point">The point.</param>
            <param name="allowOutsideLines">Set this true if point can be below corner of last line.</param>
            <returns>The visible line index for a point in the display.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.VisiblePointToLineIndex(System.Double)">
            <summary>
            Gets the visible line index for a point in the display.
            </summary>
            <param name="point">The point in the display for which the line index is to be obtained.</param>
            <returns>The visible line index for a point in the display.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.GetVisibleLineAtPoint(System.Double,System.Boolean)">
            <summary>
            Gets the visible line for a point in the display.
            </summary>
            <param name="point">The point in the display for which the visible line is to be obtained.</param>
            <param name="allowOutSideLines">boolean value</param>
            <returns>The visible line for a point in the display.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.GetVisibleLineAtLineIndex(System.Int32)">
            <summary>
            Gets the visible line that displays the line with the given absolute line index.
            </summary>
            <param name="lineIndex">Index of the line.</param>
            <returns>
            The visible line that displays the line with the given absolute line index.
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.GetVisibleLineAtLineIndex(System.Int32,System.Boolean)">
            <summary>
            Gets the visible line that displays the line with the given absolute line index. If the
            line is outside the view and you specify <paramref name="allowCreateEmptyLineIfNotVisible"/> then
            the method will create an empty line and initializes its line index and line size.
            </summary>
            <param name="lineIndex">Index of the line.</param>
            <param name="allowCreateEmptyLineIfNotVisible">if set to <b>true</b> and if the
            line is outside the view then
            the method will create an empty line and initializes its LineIndex and LineSize.</param>
            <returns>The visible line that displays the line with the given absolute line index.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.IsLineVisible(System.Int32)">
            <summary>
            Gets a boolean value indicating whether the line with the given absolute line index is 
            visible.
            </summary>
            <param name="lineIndex">The index of the line.</param>
            <returns>
            A boolean value indicating whether the line with the given absolute line index is 
            visible.
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.AnyVisibleLines(System.Int32,System.Int32)">
            <summary>
            Gets a boolean value indicating whether any of the lines with the given absolute line index 
            are visible.
            </summary>
            <param name="lineIndex1">The line index 1.</param>
            <param name="lineIndex2">The line index 2.</param>
            <returns>
            A boolean value indicating whether any of the lines with the given absolute line index 
            are visible.
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.GetOriginAndCornerOfBodyRegion(System.Double@,System.Double@)">
            <summary>
            Gets the origin and corner points of body region.
            </summary>
            <param name="origin">The origin.</param>
            <param name="corner">The corner.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.AdjustFooterExtentToAvoidGap(System.Double,System.Double)">
            <summary>
            Adjusts the footer extent to avoid gap between last visible line of body region
            and first line of footer in case the view is larger than the height/width of all
            lines.
            </summary>
            <param name="footerSize">Size of the footer.</param>
            <param name="arrangeSize">Size of the arrange.</param>
            <returns>Returns the </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.GetVisibleSection(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Return indexes for VisibleLinesCollection for area identified by section.
            </summary>
            <param name="section">The integer value indicating the section : 0 - Header, 1 - Body, 2 - Footer</param>
            <param name="start">The start index.</param>
            <param name="end">The end index.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.GetVisibleLinesRange(System.Int32)">
            <summary>
            Returns the first and last VisibleLine.LineIndex for area identified by section.
            </summary>
            <param name="section">The integer value indicating the section : 0 - Header, 1 - Body, 2 - Footer</param>
            <returns>The first and last VisibleLine.LineIndex for area identified by section.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.GetVisibleSection(Syncfusion.GridCommon.ScrollAxis.ScrollAxisRegion,System.Int32@,System.Int32@)">
            <summary>
            Return indexes for VisibleLinesCollection for area identified by section.
            </summary>
            <param name="section">The integer value indicating the section : 0 - Header, 1 - Body, 2 - Footer</param>
            <param name="start">The start index.</param>
            <param name="end">The end index.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.GetBorderRangeClipPoints(Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo,Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo)">
            <summary>
            Returns the clipping area for the specified visible lines. Only if <see cref="P:Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo.IsClippedOrigin"/> is true for
            first line or if <see cref="P:Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo.IsClippedCorner"/> is true for last line then the area will be clipped. Otherwise
            the whole area from 0 to <see cref="P:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.RenderSize"/> is returned.
            </summary>
            <param name="firstLine">The first visible line.</param>
            <param name="lastLine">The last visible line.</param>
            <returns>The clipping area for the specified visible lines.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.GetLineNearCorner(System.Double,System.Double)">
            <summary>
            Gets the line near the given corner point. Use this method for hit-testing row or 
            column lines for resizing cells.
            </summary>
            <param name="point">The point.</param>
            <param name="hitTestPrecision">The hit test precision in points.</param>
            <returns>The line near the given corner point.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.GetLineNearCorner(System.Double,System.Double,Syncfusion.GridCommon.ScrollAxis.CornerSide)">
            <summary>
            Gets the line near the given corner point. Use this method for hit-testing row or 
            column lines for resizing cells.
            </summary>
            <param name="point">The point.</param>
            <param name="hitTestPrecision">The hit test precision in points.</param>
            <param name="side">The hit test corner.</param>
            <returns>The line near the given corner point.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.GetLinesAndVisibility(System.Int32,System.Int32,System.Boolean,System.Boolean@,System.Boolean@,Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo@,Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo@)">
            <summary>
            Returns points for given absolute line indexes.
            </summary>
            <param name="firstIndex">The first index.</param>
            <param name="lastIndex">The last index.</param>
            <param name="allowAdjust">if set to <b>true</b> return the first visible line if firstIndex
            is above viewable area or return last visible line if lastIndex is after viewable area
            (works also for header and footer).
            </param>
            <param name="firstVisible">if set to <b>true</b> indicates the line with index 
            firstIndex is visible in viewable area.</param>
            <param name="lastVisible">if set to <b>true</b> indicates the line with index 
            lastIndex is visible in viewable area..</param>
            <param name="firstLine">The first line or null if allowAdjust is false and line 
            is not in viewable area.</param>
            <param name="lastLine">The last line or null if allowAdjust is false and line 
            is not in viewable area.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.GetVisibleLinesClipPoints(System.Int32,System.Int32)">
            <summary>
            Gets the visible lines clip points (clipped origin of first line and clipped 
            corner of last line). If both lines are above or below viewable area an empty 
            span is returned. If lines are both above and below viewable are then the 
            range for all viewable lines is returned.
            </summary>
            <param name="firstIndex">The first index.</param>
            <param name="lastIndex">The last index.</param>
            <returns>
            The visible lines clip points (clipped origin of first line and clipped 
            corner of last line). 
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.GetClipPoints(Syncfusion.GridCommon.ScrollAxis.ScrollAxisRegion)">
            <summary>
            Gets the clip points for a region.
            </summary>
            <param name="region">The region for which the clip points is to be obtained.</param>
            <returns>The clip points for a region.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.RangeToRegionPoints(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns an array with 3 ranges indicating the first and last point for the given lines in each region.
            </summary>
            <param name="first">The index of the first line.</param>
            <param name="last">The index of the last line.</param>
            <param name="allowEstimatesForOutOfViewLines">if set to <b>true</b> allow estimates for out of view lines.</param>
            <returns>An array with 3 ranges indicating the first and last point for the given lines in each region.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.RangeToPoints(Syncfusion.GridCommon.ScrollAxis.ScrollAxisRegion,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the first and last point for the given lines in a region.
            </summary>
            <param name="region">The region.</param>
            <param name="first">The index of the first line.</param>
            <param name="last">The index of the last line.</param>
            <param name="allowEstimatesForOutOfViewLines">if set to <b>true</b> allow estimates for out of view lines.</param>
            <returns>Returns the first and last point for the given lines in a region.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.RaiseChanged(Syncfusion.GridCommon.ScrollAxis.ScrollChangedAction)">
            <summary>
            Raises the <see cref="E:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.Changed"/> event.
            </summary>
            <param name="action">scroll action</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.GetNextPage(System.Int32)">
            <summary>
            Determines the line one page down from the given line.
            </summary>
            <param name="lineIndex">The index of the current line.</param>
            <returns>The line index of the line one page down from the given line.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.GetPreviousPage(System.Int32)">
            <summary>
            Determines the line one page up from the given line.
            </summary>
            <param name="lineIndex">The index of the current line.</param>
            <returns>The line index of the line one page up from the given line.</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.Changed">
            <summary>
            Occurs when a scroll axis changed.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.IsPixelScroll">
            <summary>
            Gets a value indicating whether this axis supports pixel scrolling.
            </summary>
            <value>
            <b>true</b> if this instance supports pixel scrolling, otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.StartLineIndex">
            <summary>
            Gets or sets the index of the first line in a parent axis. This is used for shared 
            or nested scroll axis (e.g. a nested grid with shared axis in a covered cell).
            </summary>
            <value>The index of the first line.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.ScrollBar">
            <summary>
            Gets the scroll bar state.
            </summary>
            <value>The scroll bar state.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.LineCount">
            <summary>
            Gets or sets the line count.
            </summary>
            <value>The line count.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.DefaultLineSize">
            <summary>
            Gets or sets the default size of lines.
            </summary>
            <value>The default size of lines.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.ScrollLinesHost">
            <summary>
            Gets the scroll lines host.
            </summary>
            <value>The scroll lines host.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.RenderSize">
            <summary>
            Gets or sets the size (either height or width) of the parent control.
            </summary>
            <value>The size of the parent control.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.ScrollPageSize">
            <summary>
            Gets the size (either height or width) of the parent control excluding the 
            area occupied by Header and Footer. This size is used for scrolling down
            or up one page.
            </summary>
            <value>The size of the parent control.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.Clip">
            <summary>
            Gets or sets the clipping region. Depending on the orientation of
            the axis, this is either the left and right or top and bottom
            values of the clipping rectangle in the parent control.
            </summary>
            <value>The clip value.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.ViewSize">
            <summary>
            Gets the view size of the (either height or width) of the parent control. Normally
            the ViewSize is the same as <see cref="P:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.RenderSize"/>. Only if the parent control
            has more space then needed to display all lines, the ViewSize will be less. In 
            such case the ViewSize is the total height for all lines.
            </summary>
            <value>The view size of the (either height or width) of the parent control.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.HeaderExtent">
            <summary>
            Gets the header extent. This is total height (or width) of the header lines.
            </summary>
            <value>The header extent.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.HeaderLineCount">
            <summary>
            Gets the header line count.
            </summary>
            <value>The header line count.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.FooterExtent">
            <summary>
            Gets the footer extent. This is total height (or width) of the footer lines.
            </summary>
            <value>The footer extent.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.FooterLineCount">
            <summary>
            Gets the footer line count.
            </summary>
            <value>The footer line count.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.ScrollLineIndex">
            <summary>
            Gets or sets the index of the first visible Line in the body region.
            </summary>
            <value>The index of the scroll line.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.ViewCorner">
            <summary>
            Gets the view corner which is the point after the last visible line
            of the body region.
            </summary>
            <value>The view corner which is the point after the last visible line of the body region.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.IsFooterVisible">
            <summary>
            Gets a value indicating whether footer lines are visible.
            </summary>
            <value>
            <b>true</b> if footer lines are visible, otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.FirstFooterLineIndex">
            <summary>
            Gets the index of the first footer line.
            </summary>
            <value>The index of the first footer line.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.LastBodyVisibleLine">
            <summary>
            Gets the last visible line.
            </summary>
            <value>The last visible line.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.LastBodyVisibleLineIndex">
            <summary>
            Gets the index of the last visible line.
            </summary>
            <value>The index of the last visible line.</value>
        </member>
        <member name="F:Syncfusion.GridCommon.ScrollAxis.LineScrollAxis.distances">
            <summary>
            distances holds the visible lines. Each visible line
            has a distance of 1.0. Hidden lines have a distance of 0.0.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineScrollAxis.#ctor(Syncfusion.GridCommon.ScrollAxis.IScrollBar,Syncfusion.GridCommon.ScrollAxis.ILineSizeHost)">
            <summary>
            Initializes a new instance of the LineScrollAxis class.
            </summary>
            <param name="scrollBar">The state of the scrollbar.</param>
            <param name="scrollLinesHost">The scroll lines host.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineScrollAxis.UpdateDistances">
            <summary>
            Updates the line size for visible lines to be "1" for LineScrollAxis
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineScrollAxis.SetHeaderLineCount(System.Int32)">
            <summary>
            Sets the header line count.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineScrollAxis.SetFooterLineCount(System.Int32)">
            <summary>
            Sets the footer line count.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineScrollAxis.GetScrollLineIndex(System.Int32@,System.Double@)">
            <summary>
            Gets the index of the scroll line.
            </summary>
            <param name="scrollLineIndex">The index of the scroll line.</param>
            <param name="scrollLineDelta">The scroll line delta.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineScrollAxis.SetScrollLineIndex(System.Int32,System.Double)">
            <summary>
            Sets the index of the scroll line.
            </summary>
            <param name="scrollLineIndex">The index of the scroll line.</param>
            <param name="scrollLineDelta">The scroll line delta.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineScrollAxis.SetLineHiddenState(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the hidden state of the lines.
            </summary>
            <param name="from">The start index of the line.</param>
            <param name="to">The end index of the line.</param>
            <param name="hide">A boolean value indicating whether to hide the lines. if set to <b>true</b> - [hide].</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineScrollAxis.SetLineSize(System.Int32,System.Int32,System.Double)">
            <summary>
            Sets the size of the lines for the given range of lines. Will do nothing for a <see cref="T:Syncfusion.GridCommon.ScrollAxis.LineScrollAxis"/>.
            </summary>
            <param name="from">The start index of the line.</param>
            <param name="to">The end index of the line.</param>
            <param name="size">The line size.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineScrollAxis.UpdateScrollBar">
            <summary>
            Initialize scrollbar properties from line count in header, footer and body.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineScrollAxis.GetPreviousScrollLineIndex(System.Int32)">
            <summary>
            Gets the index of the previous scroll line.
            </summary>
            <param name="index">The current index of the scroll line.</param>
            <returns>The index of the previous scroll line.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineScrollAxis.GetNextScrollLineIndex(System.Int32)">
            <summary>
            Gets the index of the next scroll line.
            </summary>
            <param name="index">The current index of the scroll line.</param>
            <returns>The index of the next scroll line.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineScrollAxis.ScrollToNextPage">
            <summary>
            Scrolls to next page.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineScrollAxis.ScrollToPreviousPage">
            <summary>
            Scrolls to previous page.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineScrollAxis.ScrollToNextLine">
            <summary>
            Scrolls to next line.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineScrollAxis.ScrollToPreviousLine">
            <summary>
            Scrolls to previous line.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineScrollAxis.AlignScrollLine">
            <summary>
            Aligns the scroll line.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineScrollAxis.RangeToRegionPoints(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns an array with 3 ranges indicating the first and last point for the given lines in each region.
            </summary>
            <param name="first">The index of the first line.</param>
            <param name="last">The index of the last line.</param>
            <param name="allowEstimatesForOutOfViewLines">if set to <b>true</b> allow estimates for out of view lines.</param>
            <returns>An array with 3 ranges indicating the first and last point for the given lines in each region.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineScrollAxis.RangeToPoints(Syncfusion.GridCommon.ScrollAxis.ScrollAxisRegion,System.Int32,System.Int32,System.Boolean)">
            <summary>
            The first and last point for the given lines in a region.
            </summary>
            <param name="region">The scroll axis region.</param>
            <param name="first">The index of the first line.</param>
            <param name="last">The index of the last line.</param>
            <param name="allowEstimatesForOutOfViewLines">if set to <b>true</b> allow estimates for out of view lines.</param>
            <returns>Returns the first and last point for the given lines in a region.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineScrollAxis.MouseWheel(System.Int32)">
            <summary>
            This method is called in response to a MouseWheel event.
            </summary>
            <param name="delta">The delta.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineScrollAxis.ScrollInView(System.Int32,System.Double)">
            <summary>
            Scrolls the line into viewable area.
            </summary>
            <param name="lineIndex">The index of the line.</param>
            <param name="lineSize">The size of the line.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineScrollAxis.OnLinesInserted(System.Int32,System.Int32)">
            <summary>
            Called when lines were inserted in ScrollLinesHost.
            </summary>
            <param name="insertAt">Index of the first inserted line.</param>
            <param name="count">The count.</param>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.LineScrollAxis.LineCount">
            <summary>
            Gets or sets the line count.
            </summary>
            <value>The line count.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.LineScrollAxis.DefaultLineSize">
            <summary>
            Gets or sets the default size of lines.
            </summary>
            <value>The default size of lines.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.LineScrollAxis.Distances">
            <summary>
            Gets the distances collection which is used internally for mapping from a point position to
            a line index and vice versa.
            </summary>
            <value>The distances collection which is used internally for mapping from a point position 
            to a line index and vice versa.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.LineScrollAxis.TotalExtent">
            <summary>
            Gets the total extent of all line sizes.
            </summary>
            <value>The total extent of all line sizes.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.LineScrollAxis.HeaderExtent">
            <summary>
            Gets the header extent. This is total height (or width) of the header lines.
            </summary>
            <value>The header extent.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.LineScrollAxis.FooterExtent">
            <summary>
            Gets the footer extent. This is total height (or width) of the footer lines.
            </summary>
            <value>The footer extent.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.LineScrollAxis.ScrollLineIndex">
            Scroll = First Visible Body Line
            <summary>
            Gets or sets the index of the first visible Line in the Body region.
            </summary>
            <value>The index of the first visible Line in the Body region.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.LineScrollAxis.ViewSize">
            <summary>
            Gets the view size of the (either height or width) of the parent control. Normally
            the ViewSize is the same as <see cref="P:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.RenderSize"/>. Only if the parent control
            has more space then needed to display all lines, the ViewSize will be less. In
            such case the ViewSize is the total height for all lines.
            </summary>
            <value>The size of the view.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.LineScrollAxis.IsPixelScroll">
            <summary>
            Gets a value indicating whether this axis supports pixel scrolling.
            </summary>
            <value>
            <b>true</b> if this instance supports pixel scrolling; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection">
            <summary>
            A collection that manages lines with varying height and hidden state. 
            It has properties for header and footer lines, total line count, default
            size of a line and also lets you add nested collections.
            </summary>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="F:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.Empty">
            <summary>
            Returns an empty collection.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.#ctor">
             <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection"/> class.
             </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.SetRange(System.Int32,System.Int32,System.Double)">
            <summary>
            Sets the line size for the range of lines.
            </summary>
            <param name="from">The start index of the line for which the line size is to be set.</param>
            <param name="to">The end index of the line for which the line size is to be set.</param>
            <param name="size">The line size to be set to the given range of lines.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.SetHidden(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the hidden state for the given range of lines.
            </summary>
            <param name="from">The start index of the line for which the hidden state to be set.</param>
            <param name="to">The end index of the line for which the hidden state to be set.</param>
            <param name="hide">A boolean value indicating whether to hide the lines. If set to <b>true</b>
            hide the lines.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.GetNestedLines(System.Int32)">
            <summary>
            Gets the nested lines at the given index.
            </summary>
            <param name="index">The index at which the nested lines is to be obtained.</param>
            <returns>The <see cref="T:Syncfusion.GridCommon.ScrollAxis.IEditableLineSizeHost"/> representing the nested lines.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.SetNestedLines(System.Int32,Syncfusion.GridCommon.ScrollAxis.IEditableLineSizeHost)">
            <summary>
            Sets the nested lines at the given index.
            </summary>
            <param name="index">The index at which the nested lines is to be added.</param>
            <param name="nestedLines">The nested lines to be added. If parameter is null the line will 
            be converted to a normal (not nested) line with default line size.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.ResetLines">
            <summary>
            Reset the lines with default line size.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.ResetNestedLines">
            <summary>
            Reset the line to become a normal (not nested) line with default line size.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.ResetNestedLines(System.Int32)">
            <summary>
            Reset the line to become a normal (not nested) line with default line size.
            </summary>
            <param name="index">The index of the line to be reset.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.GetDefaultLineSize">
            <summary>
            Returns the default line size.
            </summary>
            <returns>The default line size.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.GetLineCount">
            <summary>
            Returns the line count.
            </summary>
            <returns>The line count.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.GetSize(System.Int32,System.Int32@)">
            <summary>
            Gets the size of the line at the given index.
            </summary>
            <param name="index">The index of the line for which the size is to be obtained.</param>
            <param name="repeatValueCount">The number of subsequent values with same size.</param>
            <returns>The size of the line at the given index.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.GetHeaderLineCount">
            <summary>
            Gets the header line count.
            </summary>
            <returns>The header line count.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.GetFooterLineCount">
            <summary>
            Gets the footer line count.
            </summary>
            <returns>The footer line count.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.GetHidden(System.Int32,System.Int32@)">
            <summary>
            Gets the boolean value indicating the hidden state for the line with given index.
            </summary>
            <param name="index">The index of the line for which the hidden state is to be obtained.</param>
            <param name="repeatValueCount">The number of subsequent lines with same state.</param>
            <returns>The boolean value indicating the hidden state for a line.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.InitializeScrollAxis(Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase)">
            <summary>
            Initializes the scroll axis.
            </summary>
            <param name="scrollAxis">The scroll axis.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.GetDistances(System.Int32)">
            <summary>
            Gets the nested distances, if a line contains a nested lines collection, otherwise null.
            </summary>
            <param name="line">The line at which the distances is to be obtained.</param>
            <returns>The nested distances, if a line contains a nested lines collection, otherwise null.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.InsertLines(System.Int32,System.Int32)">
            <summary>
            Inserts lines in the collection and raises the <see cref="E:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.LinesInserted"/> event.
            </summary>
            <param name="insertAtLine">The index of the first line to insert.</param>
            <param name="count">The count of the lines to be inserted.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.InsertLines(System.Int32,System.Int32,Syncfusion.GridCommon.ScrollAxis.IEditableLineSizeHost)">
            <summary>
            Insert the given number of lines at the given index.
            </summary>
            <param name="insertAtLine">The index of the first line to insert.</param>
            <param name="count">The count of the lines to be inserted.</param>
            <param name="movelines">A container with saved state from a preceding <see cref="M:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.RemoveLines(System.Int32,System.Int32)"/> 
            call when lines should be moved. When it is null, empty lines with default size are inserted.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.RemoveLines(System.Int32,System.Int32)">
            <summary>
            Removes lines from the collection and raises the <see cref="E:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.LinesRemoved"/> event.
            </summary>
            <param name="removeAtLine">The index of the first line to be removed.</param>
            <param name="count">The count of the lines to be removed.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.RemoveLines(System.Int32,System.Int32,Syncfusion.GridCommon.ScrollAxis.IEditableLineSizeHost)">
            <summary>
            Removes a number of lines at the given index.
            </summary>
            <param name="removeAtLine">The index of the first line to be removed.</param>
            <param name="count">The count of the lines to be removed.</param>
            <param name="movelines">A container to save state for a subsequent <see cref="M:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.InsertLines(System.Int32,System.Int32)"/> 
            call when lines should be moved.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.CreateMoveLines">
            <summary>
            Creates the object which holds temporary state when moving lines.
            </summary>
            <returns>The object which holds temporary state when moving lines.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.ResetHiddenState">
            <summary>
            Resets the hidden state of the line.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.SetHiddenInterval(System.Int32,System.Int32,System.Boolean[])">
            <summary>
            Initialize the collection with a pattern of hidden lines. 
            </summary>
            <param name="start">The index of the first line where the pattern should be
            started to be applied.</param>
            <param name="lineCount">The pattern is applied up to until the lineCount given. 
            The last initialized line is at index lineCount-1.</param>
            <param name="values">The pattern that is applied repeatedly.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.SetHiddenIntervalWithState(System.Int32,System.Int32,System.Boolean[])">
            <summary>
            Initialize the collection with a pattern of hidden lines with state. 
            </summary>
            <param name="start">The index of the first line where the pattern should be
            started to be applied.</param>
            <param name="lineCount">The pattern is applied up to until the lineCount given. 
            The last initialized line is at index lineCount-1.</param>
            <param name="values">The pattern that is applied repeatedly.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.SetHiddenState(System.Boolean[])">
            <summary>
            Set the hidden state all at once in one operation. Use this method if you want to change the hidden
            state of many rows at once since this will be much faster instead of individually setting rows hidden.
            </summary>
            <param name="values">The new hidden state for rows.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.SuspendUpdates">
            <summary>
            Suspends the updates in the view.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.ResumeUpdates">
            <summary>
            Resumes the update in the view.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.DeferRefresh">
            <summary>
            Enter the defer cycle so that all data operations in view is performed and update once.
            </summary>
            <returns>The disposable object to release the allocated resources.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.Dispose">
            <summary>
            Releases the managed and unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the component and optionally releases the managed resources.
            </summary>
            <param name="disposing"> if true - release both managed and unmanaged resources; 
            if false - release only unmanaged resources.
            </param>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.TotalExtent">
            <summary>
            Gets the total extent which is the total of all line sizes. <b>Note:</b> This property only 
            works if the <see cref="T:Syncfusion.GridCommon.ScrollAxis.DistanceCounterCollection"/> has been setup for pixel scrolling, 
            otherwise it returns <see cref="F:System.Double.NaN"/>.
            </summary>
            <value>The total extent which is the total of all line sizes or <see cref="F:System.Double.NaN"/>.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.PaddingDistance">
            <summary>
            Gets or sets the padding distance for the line.
            </summary>
            <value>The padding distance for the line.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.HeaderLineCount">
            <summary>
            Gets or sets the header line count.
            </summary>
            <value>The header line count.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.FooterLineCount">
            <summary>
            Gets or sets the footer line count.
            </summary>
            <value>The footer line count.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.LineCount">
            <summary>
            Gets or sets the line count.
            </summary>
            <value>The line count.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.DefaultLineSize">
            <summary>
            Gets or sets the default size of lines.
            </summary>
            <value>The default size of lines.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.Item(System.Int32)">
            <summary>
            Gets or sets the line size at the specified index.
            </summary>
            <param name="index">index value</param>
            <value>The line size at the specified index.</value>
            <returns>Returns the line size at the specified index.</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.SupportsNestedLines">
            <summary>
            Gets a value indicating whether the host supports nesting.
            </summary>
            <value>A boolean value indicating whether the host supports nesting.</value>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.LineSizeChanged">
            <summary>
            Occurs when a lines size was changed.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.LineHiddenChanged">
            <summary>
            Occurs when a lines hidden state changed.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.DefaultLineSizeChanged">
            <summary>
            Occurs when the default line size changed.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.LineCountChanged">
            <summary>
            Occurs when the line count was changed.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.HeaderLineCountChanged">
            <summary>
            Occurs when the header line count was changed.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.FooterLineCountChanged">
            <summary>
            Occurs when the footer line count was changed.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.LinesInserted">
            <summary>
            Occurs when lines were inserted.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.LinesRemoved">
            <summary>
            Occurs when lines were removed.
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.Distances">
            <summary>
            Gets the distances collection which is used internally for mapping from a point position to
            a line index and vice versa.
            </summary>
            <value>The distances collection which is used internally for mapping from a point position 
            to a line index and vice versa.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.SupportsInsertRemove">
            <summary>
            Gets a value indicating whether the host supports inserting and removing lines or not.
            </summary>
            <value>The boolean value indicating whether the host supports inserting and removing lines.</value>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.LineSizeCollectionDisposable.#ctor(Syncfusion.GridCommon.ScrollAxis.LineSizeCollection)">
             <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.LineSizeCollectionDisposable"/> class.
             </summary>
             <param name="lineSizeCollection">The line size collection.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection.LineSizeCollectionDisposable.Dispose">
            <summary>
            Releases the managed and unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeCollection">
            <summary>
            An empty <see cref="T:Syncfusion.GridCommon.ScrollAxis.LineSizeCollection"/>.
            </summary>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="F:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeCollection.Empty">
            <summary>
            Returns an empty collection.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeCollection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeCollection.Syncfusion#GridCommon#ScrollAxis#ILineSizeHost#GetDefaultLineSize">
            <summary>
            Returns the default line size.
            </summary>
            <returns>The default line size.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeCollection.Syncfusion#GridCommon#ScrollAxis#ILineSizeHost#GetLineCount">
            <summary>
            Returns the line count.
            </summary>
            <returns>The line count.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeCollection.Syncfusion#GridCommon#ScrollAxis#ILineSizeHost#GetSize(System.Int32,System.Int32@)">
            <summary>
            Gets the size of the line at the given index.
            </summary>
            <param name="index">The index of the line for which the size is to be obtained.</param>
            <param name="repeatValueCount">The number of subsequent values with same size.</param>
            <returns>The size of the line at the given index.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeCollection.Syncfusion#GridCommon#ScrollAxis#ILineSizeHost#GetHeaderLineCount">
            <summary>
            Gets the header line count.
            </summary>
            <returns>The header line count.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeCollection.Syncfusion#GridCommon#ScrollAxis#ILineSizeHost#GetFooterLineCount">
            <summary>
            Gets the footer line count.
            </summary>
            <returns>The footer line count.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeCollection.Syncfusion#GridCommon#ScrollAxis#ILineSizeHost#GetHidden(System.Int32,System.Int32@)">
            <summary>
            Gets the boolean value indicating the hidden state for the line with given index.
            </summary>
            <param name="index">The index of the line for which the hidden state is to be obtained.</param>
            <param name="repeatValueCount">The number of subsequent lines with same state.</param>
            <returns>The boolean value indicating the hidden state for a line.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeCollection.Syncfusion#GridCommon#ScrollAxis#ILineSizeHost#InitializeScrollAxis(Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase)">
            <summary>
            Used to initialize scroll axis
            </summary>
            <param name="scrollAxis">scroll axis instance</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeCollection.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the component and optionally releases the managed resources.
            </summary>
            <param name="disposing"> if true - release both managed and unmanaged resources; 
            if false - release only unmanaged resources.
            </param>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeCollection.Syncfusion#GridCommon#ScrollAxis#ILineSizeHost#LineSizeChanged">
            <summary>
            Occurs when default line size changed
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeCollection.Syncfusion#GridCommon#ScrollAxis#ILineSizeHost#LineHiddenChanged">
            <summary>
            Occurs when hidden line changed
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeCollection.Syncfusion#GridCommon#ScrollAxis#ILineSizeHost#DefaultLineSizeChanged">
            <summary>
            Occurs when default line size changed
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeCollection.Syncfusion#GridCommon#ScrollAxis#ILineSizeHost#LineCountChanged">
            <summary>
            Occurs when line count changed.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeCollection.Syncfusion#GridCommon#ScrollAxis#ILineSizeHost#HeaderLineCountChanged">
            <summary>
            Occurs when header line count changed.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeCollection.Syncfusion#GridCommon#ScrollAxis#ILineSizeHost#FooterLineCountChanged">
            <summary>
            Occurs when footer line count changed.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeCollection.Syncfusion#GridCommon#ScrollAxis#ILineSizeHost#LinesInserted">
            <summary>
            Occurs when lines are inserted.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeCollection.Syncfusion#GridCommon#ScrollAxis#ILineSizeHost#LinesRemoved">
            <summary>
            Occurs when lines are removed
            </summary>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.EmptyLineSizeCollection.Syncfusion#GridCommon#ScrollAxis#IDistancesHost#Distances">
            <summary>
             Gets an object that implements the <see cref="!:Distances"/> property.
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.DistancesUtil">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.ScrollAxis.DistanceLineCounterTree"/> class.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistancesUtil.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Syncfusion.GridCommon.ScrollAxis.DistancesUtil"/> class from being created.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistancesUtil.GetRangeToHelper(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the range to helper.
            </summary>
            <param name="n">The index.</param>
            <param name="to">The end index.</param>
            <param name="repeatSizeCount">The count of repeated sizes.</param>
            <returns>Returns the minimum index value</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistancesUtil.OnInserted(Syncfusion.GridCommon.ScrollAxis.IDistanceCounterCollection,Syncfusion.GridCommon.ScrollAxis.ILineSizeHost,System.Int32,System.Int32)">
            <summary>
            This method fires when the lines is inserted.
            </summary>
            <param name="distances">The distances</param>
            <param name="linesHost">The line host.</param>
            <param name="insertAt">The index to insert.</param>
            <param name="count">The count of the lines inserted.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistancesUtil.DistancesLineHiddenChanged(Syncfusion.GridCommon.ScrollAxis.IDistanceCounterCollection,Syncfusion.GridCommon.ScrollAxis.ILineSizeHost,System.Int32,System.Int32)">
            <summary>
            This method fires when distances line hidden changed.
            </summary>
            <param name="distances">The distances</param>
            <param name="linesHost">The line host.</param>
            <param name="from">The start index of the line.</param>
            <param name="to">The end index of the line.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DistancesUtil.DistancesLineSizeChanged(Syncfusion.GridCommon.ScrollAxis.IDistanceCounterCollection,Syncfusion.GridCommon.ScrollAxis.ILineSizeHost,System.Int32,System.Int32)">
            <summary>
            This method fires when the distances line size changed.
            </summary>
            <param name="distances">The distances</param>
            <param name="linesHost">The line host.</param>
            <param name="from">The start index of the line.</param>
            <param name="to">The end index of the line.</param>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.LineSizeUtil">
            <summary>
            Class that defines the line size.
            </summary>
            <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineSizeUtil.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.ScrollAxis.LineSizeUtil"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineSizeUtil.GetTotal(Syncfusion.GridCommon.ScrollAxis.ILineSizeHost,System.Int32,System.Int32)">
            <summary>
             Gets the total number of lines.
            </summary>
            <param name="lines">The line size host collection.</param>
            <param name="from">The start index.</param>
            <param name="to">The end index.</param>
            <returns>The total number of lines.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineSizeUtil.GetRange(Syncfusion.GridCommon.ScrollAxis.ILineSizeHost,System.Int32,System.Int32)">
            <summary>
             Gets the total number of lines.
            </summary>
            <param name="lines">The line size host collection.</param>
            <param name="from">The start index.</param>
            <param name="to">The end index.</param>
            <returns>The total number of lines.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LineSizeUtil.SetRange(Syncfusion.GridCommon.ScrollAxis.IEditableLineSizeHost,System.Int32,System.Int32,System.Double[])">
            <summary>
            Sets the range of lines.
            </summary>
            <param name="lines">The line size host collection.</param>
            <param name="from">The start index.</param>
            <param name="to">The end index.</param>
            <param name="values">The line size.</param>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis">
             <summary>
             PixelScrollAxis implements scrolling logic for both horizontal and vertical 
             scrolling in a <see cref="!:ScrollAxisControl"/>.
             Logical units in the ScrollAxisBase are called "Lines". With the 
             <see cref="!:ScrollAxisControl.ScrollRows"/> a line represents rows in a grid 
             and with <see cref="!:ScrollAxisControl.ScrollRows"/> a line represents columns in a grid.
             <para/>
             PixelScrollAxis supports pixel scrolling and calculates the total height or
             width of all lines.
             </summary>
            ClassReference(IsReviewed = false)]
        </member>
        <member name="F:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.distances">
            <summary>
            Distances holds the line sizes. Hidden lines
            have a distance of 0.0. 
            </summary>        
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.#ctor(Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase,Syncfusion.GridCommon.ScrollAxis.IScrollBar,Syncfusion.GridCommon.ScrollAxis.ILineSizeHost,Syncfusion.GridCommon.ScrollAxis.IDistancesHost)">
            <summary>
            Initializes a new instance of the PixelScrollAxis class which 
            is nested as a single line in a parent scroll axis.
            </summary>
            <param name="parentScrollAxis">The parent scroll axis.</param>
            <param name="scrollBar">The scrollbar state.</param>
            <param name="scrollLinesHost">The scroll lines host.</param>
            <param name="distancesHost">The distances host.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.#ctor(Syncfusion.GridCommon.ScrollAxis.IScrollBar,Syncfusion.GridCommon.ScrollAxis.ILineSizeHost,Syncfusion.GridCommon.ScrollAxis.IDistancesHost)">
            <summary>
            Initializes a new instance of the PixelScrollAxis class.
            </summary>
            <param name="scrollBar">The scrollbar state.</param>
            <param name="scrollLinesHost">The scroll lines host.</param>
            <param name="distancesHost">The distances host.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.SetLineHiddenState(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the hidden state of the lines.
            </summary>
            <param name="from">The start index of the line.</param>
            <param name="to">The end index of the line.</param>
            <param name="hide">A boolean value indicating whether to hide the lines. if set to <b>true</b> - [hide].</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.SetLineSize(System.Int32,System.Int32,System.Double)">
            <summary>
            Sets the size of the lines for the given range of lines. Will do nothing for a <see cref="T:Syncfusion.GridCommon.ScrollAxis.LineScrollAxis"/>.
            </summary>
            <param name="from">The start index of the line.</param>
            <param name="to">The end index of the line.</param>
            <param name="size">The line size.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.SetLineResize(System.Int32,System.Double)">
            <summary>
            Set temporary value for a line size during a resize operation without committing 
            value to ScrollLinesHost.
            </summary>
            <param name="index">The index of the line.</param>
            <param name="size">The size of the line.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.ResetLineResize">
            <summary>
            Resets temporary value for line size after a resize operation.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.SetHeaderLineCount(System.Int32)">
            <summary>
            Sets the header line count.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.SetFooterLineCount(System.Int32)">
            <summary>
            Sets the footer line count.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.UpdateScrollBar">
            <summary>
            Initialize scrollbar properties from header and footer size and total size of lines in body.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.GetScrollLineIndex(System.Int32@,System.Double@)">
            <summary>
            Gets the index of the scroll line.
            </summary>
            <param name="scrollLineIndex">Index of the scroll line.</param>
            <param name="scrollLineDelta">The scroll line delta.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.SetScrollLineIndex(System.Int32,System.Double)">
            <summary>
            Sets the index of the scroll line.
            </summary>
            <param name="scrollLineIndex">Index of the scroll line.</param>
            <param name="scrollLineDelta">The scroll line delta.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.GetPreviousScrollLineIndex(System.Int32)">
            <summary>
            Gets the index of the previous scroll line.
            </summary>
            <param name="index">The index.</param>
            <returns>The index of the previous scroll line.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.GetNextScrollLineIndex(System.Int32)">
            <summary>
            Gets the index of the next scroll line.
            </summary>
            <param name="index">The index.</param>
            <returns>The index of the next scroll line.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.ScrollToNextPage">
            <summary>
            Scrolls to next page.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.ScrollToPreviousPage">
            <summary>
            Scrolls to previous page.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.ScrollToNextLine">
            <summary>
            Scrolls to next line.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.ScrollToPreviousLine">
            <summary>
            Scrolls to previous line.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.AlignScrollLine">
            <summary>
            Aligns the scroll line.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.SetNestedLines(System.Int32,Syncfusion.GridCommon.ScrollAxis.IDistanceCounterCollection)">
            <summary>
            Associates a collection of nested lines with a line in this axis.
            </summary>
            <param name="index">The index.</param>
            <param name="nestedLines">The nested lines.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.RangeToRegionPoints(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns an array with 3 ranges indicating the first and last point for the given lines in each region.
            </summary>
            <param name="first">The index of the first line.</param>
            <param name="last">The index of the last line.</param>
            <param name="allowEstimatesForOutOfViewLines">if set to <b>true</b> allow estimates for out of view lines.</param>
            <returns>An array with 3 ranges indicating the first and last point for the given lines in each region.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.RangeToPoints(Syncfusion.GridCommon.ScrollAxis.ScrollAxisRegion,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the first and last point for the given lines in a region.
            </summary>
            <param name="region">The region.</param>
            <param name="first">The index of the first line.</param>
            <param name="last">The index of the last line.</param>
            <param name="allowEstimatesForOutOfViewLines">if set to <b>true</b> allow estimates for out of view lines.</param>
            <returns>The first and last point for the given lines in a region.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.GetCumulatedOrigin(Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo)">
            <summary>
            Gets the cumulated origin taking scroll position into account. The
            returned value is between ScrollBar.Minimum and ScrollBar.Maximum.
            </summary>
            <param name="line">The line.</param>
            <returns>Returns the cumulated origin</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.GetCumulatedCorner(Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo)">
            <summary>
            Gets the cumulated corner taking scroll position into account. The
            returned value is between ScrollBar.Minimum and ScrollBar.Maximum.
            </summary>
            <param name="line">The line.</param>
            <returns>Returns the cumulated corner</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.MouseWheel(System.Int32)">
            <summary>
            This method is called in response to a MouseWheel event.
            </summary>
            <param name="delta">The delta.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.ScrollInView(System.Int32,System.Double)">
            <summary>
            Scrolls the line into viewable area.
            </summary>
            <param name="lineIndex">Index of the line.</param>
            <param name="lineSize">Size of the line.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.OnLinesRemoved(System.Int32,System.Int32)">
            <summary>
            Called when lines were removed in ScrollLinesHost.
            </summary>
            <param name="removeAt">Index of the first removed line.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.OnLinesInserted(System.Int32,System.Int32)">
            <summary>
            Called when lines were inserted in ScrollLinesHost.
            </summary>
            <param name="insertAt">Index of the first inserted line.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the component and optionally releases the managed resources.
            </summary>
            <param name="disposing"> if true - release both managed and unmanaged resources; 
            if false - release only unmanaged resources.
            </param>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.IsPixelScroll">
            <summary>
            Gets a value indicating whether this axis supports pixel scrolling.
            </summary>
            <value>
            <b>true</b> if this instance supports pixel scrolling, otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.Distances">
            <summary>
            Gets the distances collection which is used internally for mapping from a point position to
            a line index and vice versa.
            </summary>
            <value>The distances collection which is used internally for mapping from a point position 
            to a line index and vice versa.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.TotalExtent">
            <summary>
            Gets the total extent of all line sizes.
            </summary>
            <value>The total extent of all line sizes.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.LineCount">
            <summary>
            Gets or sets the line count.
            </summary>
            <value>The line count.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.DefaultLineSize">
            <summary>
            Gets or sets the default size of lines.
            </summary>
            <value>The default size of lines.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.HeaderExtent">
            <summary>
            Gets the header extent. This is total height (or width) of the header lines.
            </summary>
            <value>The header extent.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.FooterExtent">
            <summary>
            Gets the footer extent. This is total height (or width) of the footer lines.
            </summary>
            <value>The footer extent.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.ScrollLineIndex">
            Scroll = First Visible Body Line
            <summary>
            Gets or sets the index of the first visible Line in the Body region.
            </summary>
            <value>The index of the scroll line.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.PixelScrollAxis.ViewSize">
            <summary>
            Gets the view size of the (either height or width) of the parent control. Normally
            the ViewSize is the same as <see cref="P:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.RenderSize"/>. Only if the parent control
            has more space then needed to display all lines, the ViewSize will be less. In
            such case the ViewSize is the total height for all lines.
            </summary>
            <value>The size of the view.</value>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.RangeChangedEventHandler">
            <summary>
            Delegate that handles the <see cref="E:Syncfusion.GridCommon.ScrollAxis.ILineSizeHost.LineSizeChanged"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Syncfusion.GridCommon.ScrollAxis.RangeChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.RangeChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.GridCommon.ScrollAxis.ILineSizeHost.LineSizeChanged"/> event.
            </summary>
             [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.RangeChangedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the RangeChangedEventArgs class.
            </summary>
            <param name="from">The start index.</param>
            <param name="to">The end index.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.RangeChangedEventArgs.#ctor(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the RangeChangedEventArgs class.
            </summary>
            <param name="from">The start index.</param>
            <param name="to">The end index.</param>
            <param name="oldSize">The old size.</param>
            <param name="newSize">The new size.</param>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.RangeChangedEventArgs.From">
            <summary>
            Gets the start index.
            </summary>
            <value>The start index.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.RangeChangedEventArgs.To">
            <summary>
            Gets the end index.
            </summary>
            <value>The end index.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.RangeChangedEventArgs.OldSize">
            <summary>
            Gets the old size.
            </summary>
            <value>The old size.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.RangeChangedEventArgs.NewSize">
            <summary>
            Gets the new size.
            </summary>
            <value>The new size.</value>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.LinesRemovedEventHandler">
            <summary>
            Delegate that handles the <see cref="E:Syncfusion.GridCommon.ScrollAxis.ILineSizeHost.LinesRemoved"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Syncfusion.GridCommon.ScrollAxis.LinesRemovedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.LinesRemovedEventArgs">
             <summary>
             Provides data for the <see cref="E:Syncfusion.GridCommon.ScrollAxis.ILineSizeHost.LinesRemoved"/> event.
             </summary>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LinesRemovedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.ScrollAxis.LinesRemovedEventArgs"/> class.
            </summary>
            <param name="removeAt">The index to remove.</param>
            <param name="count">The count of the lines.</param>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.LinesRemovedEventArgs.RemoveAt">
            <summary>
            Gets the index to remove.
            </summary>
            <value>the index to remove.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.LinesRemovedEventArgs.Count">
            <summary>
            Gets the count of items to be removed.
            </summary>
            <value>The count of items to be removed.</value>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.LinesInsertedEventHandler">
            <summary>
            Delegate that handles the <see cref="E:Syncfusion.GridCommon.ScrollAxis.ILineSizeHost.LinesInserted"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Syncfusion.GridCommon.ScrollAxis.LinesInsertedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.LinesInsertedEventArgs">
             <summary>
             Provides data for the <see cref="E:Syncfusion.GridCommon.ScrollAxis.ILineSizeHost.LinesInserted"/> event.
             </summary>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.LinesInsertedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.ScrollAxis.LinesInsertedEventArgs"/> class.
            </summary>
            <param name="insertAt">The index to insert.</param>
            <param name="count">The count of the items to be inserted.</param>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.LinesInsertedEventArgs.InsertAt">
            <summary>
            Gets the index to insert.
            </summary>
            <value>The index to insert.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.LinesInsertedEventArgs.Count">
            <summary>
            Gets the count of the items to be inserted.
            </summary>
            <value>The count of the items to be inserted.</value>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.DefaultLineSizeChangedEventHandler">
            <summary>
            Delegate for handling the <see cref="E:Syncfusion.GridCommon.ScrollAxis.ILineSizeHost.DefaultLineSizeChanged"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Syncfusion.GridCommon.ScrollAxis.DefaultLineSizeChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.DefaultLineSizeChangedEventArgs">
             <summary>
             Provides data for the <see cref="E:Syncfusion.GridCommon.ScrollAxis.ILineSizeHost.DefaultLineSizeChanged"/> event.
             </summary>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DefaultLineSizeChangedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the DefaultLineSizeChangedEventArgs class.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.DefaultLineSizeChangedEventArgs.#ctor(System.Double,System.Double)">
             <summary>
             Initializes a new instance of the DefaultLineSizeChangedEventArgs class.
             </summary>
            <param name="oldValue">The old line size.</param>
            <param name="newValue">The new line size.</param>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.DefaultLineSizeChangedEventArgs.OldValue">
            <summary>
            Gets the old line size.
            </summary>
            <value>The old line size.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.DefaultLineSizeChangedEventArgs.NewValue">
            <summary>
            Gets the new line size.
            </summary>
            <value>The new line size.</value>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.HiddenRangeChangedEventHandler">
            <summary>
            Delegate for the <see cref="E:Syncfusion.GridCommon.ScrollAxis.ILineSizeHost.LineHiddenChanged"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Syncfusion.GridCommon.ScrollAxis.HiddenRangeChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.HiddenRangeChangedEventArgs">
             <summary>
             Provides data for the <see cref="E:Syncfusion.GridCommon.ScrollAxis.ILineSizeHost.LineHiddenChanged"/> event.
             </summary>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.HiddenRangeChangedEventArgs.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.ScrollAxis.HiddenRangeChangedEventArgs"/> class.
            </summary>
            <param name="from">The start index of the hidden range.</param>
            <param name="to">The end index of the hidden range.</param>
            <param name="hide">hide value</param>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.HiddenRangeChangedEventArgs.From">
            <summary>
            Gets the start index of the hidden range.
            </summary>
            <value>The start index of the hidden range.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.HiddenRangeChangedEventArgs.To">
            <summary>
            Gets the end index of the hidden range.
            </summary>
            <value>The end index of the hidden range.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.HiddenRangeChangedEventArgs.Hide">
            <summary>
            Gets a value indicating whether to hide the lines in the given range or not.
            </summary>
            <value>A boolean value indicating whether to hide the lines in the given range.</value>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.ScrollChangedAction">
            <summary>
            Defines the various constants for the scroll changed action.
            </summary>
        </member>
        <member name="F:Syncfusion.GridCommon.ScrollAxis.ScrollChangedAction.LinesInserted">
            <summary>
            Specifies that the scroll is changed as the lines are inserted.
            </summary>
        </member>
        <member name="F:Syncfusion.GridCommon.ScrollAxis.ScrollChangedAction.LinesRemoved">
            <summary>
            Specifies that the scroll is changed as the lines are removed.
            </summary>
        </member>
        <member name="F:Syncfusion.GridCommon.ScrollAxis.ScrollChangedAction.HeaderLineCountChanged">
            <summary>
            Specifies that the scroll is changed as the header line count is changed.
            </summary>
        </member>
        <member name="F:Syncfusion.GridCommon.ScrollAxis.ScrollChangedAction.FooterLineCountChanged">
            <summary>
            Specifies that the scroll is changed as the footer line count is changed.
            </summary>
        </member>
        <member name="F:Syncfusion.GridCommon.ScrollAxis.ScrollChangedAction.DefaultLineSizeChanged">
            <summary>
            Specifies that the scroll is changed as the default line size is changed.
            </summary>
        </member>
        <member name="F:Syncfusion.GridCommon.ScrollAxis.ScrollChangedAction.LineCountChanged">
            <summary>
            Specifies that the scroll is changed as the line count is changed.
            </summary>
        </member>
        <member name="F:Syncfusion.GridCommon.ScrollAxis.ScrollChangedAction.HiddenLineChanged">
            <summary>
            Specifies that the scroll is changed as the header line is changed.
            </summary>
        </member>
        <member name="F:Syncfusion.GridCommon.ScrollAxis.ScrollChangedAction.LineResized">
            <summary>
            Specifies that the scroll is changed as the lines are resized.
            </summary>
        </member>
        <member name="F:Syncfusion.GridCommon.ScrollAxis.ScrollChangedAction.ScrollBarValueChanged">
            <summary>
            Specifies that the scroll is changed as the scroll bar value is changed.
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.ScrollChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.Changed"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollChangedEventArgs.#ctor(Syncfusion.GridCommon.ScrollAxis.ScrollChangedAction)">
            <summary>
            Initializes a new instance of the ScrollChangedEventArgs class.
            </summary>
            <param name="action">The <see cref="T:Syncfusion.GridCommon.ScrollAxis.ScrollChangedAction"/>.</param>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.ScrollChangedEventArgs.Action">
            <summary>
            Gets the scroll changed action.
            </summary>
            <value>The <see cref="T:Syncfusion.GridCommon.ScrollAxis.ScrollChangedAction"/>.</value>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.ScrollChangedEventHandler">
            <summary>
            Delegate that handles the <see cref="E:Syncfusion.GridCommon.ScrollAxis.ScrollAxisBase.Changed"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Syncfusion.GridCommon.ScrollAxis.ScrollChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.RowColumnIndex">
             <summary>
             Holds the coordinates for a cell. 
             </summary>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.RowColumnIndex.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.ScrollAxis.RowColumnIndex"/> struct.
            </summary>
            <param name="rowIndex">The row index.</param>
            <param name="columnIndex">The column index.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.RowColumnIndex.Equals(System.Object)">
            <summary>
            Returns a boolean value indicating whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <b>True</b> if <paramref name="obj"/> and this instance are the same type and represent the same value, otherwise <b>false</b>.
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.RowColumnIndex.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.RowColumnIndex.ToString">
            <summary>
            Returns the type name with state of this instance.
            </summary>
            <returns>
            The type name with state of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.RowColumnIndex.op_Equality(Syncfusion.GridCommon.ScrollAxis.RowColumnIndex,Syncfusion.GridCommon.ScrollAxis.RowColumnIndex)">
            <summary>
            Implements the operator == for comparing the given tow row column indexes.
            </summary>
            <param name="rowColumnIndex1">The row column index 1.</param>
            <param name="rowColumnIndex2">The row column index 2.</param>
            <returns>The comparison result of the operator.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.RowColumnIndex.op_Inequality(Syncfusion.GridCommon.ScrollAxis.RowColumnIndex,Syncfusion.GridCommon.ScrollAxis.RowColumnIndex)">
            <summary>
            Implements the operator != for comparing the given tow row column indexes.
            </summary>
            <param name="rowColumnIndex1">The row column index 1.</param>
            <param name="rowColumnIndex2">The row column index 2.</param>
            <returns>The comparison result of the operator.</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.RowColumnIndex.Empty">
            <summary>
            Gets the empty instance with row index and column index set to <see cref="F:System.Int32.MinValue"/>.
            </summary>
            <value>The empty instance with row index and column index set to <see cref="F:System.Int32.MinValue"/>.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.RowColumnIndex.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><b>True</b> if this instance is empty, otherwise <b>false</b>.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.RowColumnIndex.ColumnIndex">
            <summary>
            Gets or sets the column index.
            </summary>
            <value>The column index.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.RowColumnIndex.RowIndex">
            <summary>
            Gets or sets the row index.
            </summary>
            <value>The row index.</value>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.CornerSide">
             <summary>
             Corner side enumeration.
             </summary>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="F:Syncfusion.GridCommon.ScrollAxis.CornerSide.Both">
            <summary>
            Includes both Left and right side or top and bottom side.
            </summary>
        </member>
        <member name="F:Syncfusion.GridCommon.ScrollAxis.CornerSide.Left">
            <summary>
            Left side alone.
            </summary>
        </member>
        <member name="F:Syncfusion.GridCommon.ScrollAxis.CornerSide.Right">
            <summary>
            Right side alone.
            </summary>
        </member>
        <member name="F:Syncfusion.GridCommon.ScrollAxis.CornerSide.Top">
            <summary>
            Top side alone.
            </summary>
        </member>
        <member name="F:Syncfusion.GridCommon.ScrollAxis.CornerSide.Bottom">
            <summary>
            Bottom side alone.
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.ScrollAxisRegion">
             <summary>
             A scroll axis has three regions: Header, Body and Footer.
             </summary>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="F:Syncfusion.GridCommon.ScrollAxis.ScrollAxisRegion.Header">
            <summary>
            Specifies the header region (at top or left side).
            </summary>
        </member>
        <member name="F:Syncfusion.GridCommon.ScrollAxis.ScrollAxisRegion.Body">
            <summary>
            Specifies the body region (center between header and footer).
            </summary>
        </member>
        <member name="F:Syncfusion.GridCommon.ScrollAxis.ScrollAxisRegion.Footer">
            <summary>
            Specifies the footer region (at bottom or right side).
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.ScrollInfo">
             <summary>
             Provides all properties to configure a scrollbar.
             </summary>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollInfo.#ctor">
             <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.ScrollAxis.ScrollInfo"/> class.
             </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollInfo.OnPropertyChanged(System.String)">
            <summary>
            Called when a property is changed and raises the <see cref="E:Syncfusion.GridCommon.ScrollAxis.ScrollInfo.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollInfo.CopyTo(Syncfusion.GridCommon.ScrollAxis.ScrollInfo)">
            <summary>
            Copies current settings to another object.
            </summary>
            <param name="scrollBar">The object to which the settings is to be copied.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollInfo.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Syncfusion.GridCommon.ScrollAxis.ScrollInfo"/> is equal to the current <see cref="T:Syncfusion.GridCommon.ScrollAxis.ScrollInfo"/>.
            </summary>
            <param name="obj">The <see cref="T:Syncfusion.GridCommon.ScrollAxis.ScrollInfo"/> to compare with the current <see cref="T:Syncfusion.GridCommon.ScrollAxis.ScrollInfo"/>.</param>
            <returns>
            <b>True</b> if the specified <see cref="T:Syncfusion.GridCommon.ScrollAxis.ScrollInfo"/> is equal to the current <see cref="T:Syncfusion.GridCommon.ScrollAxis.ScrollInfo"/>, otherwise <b>false</b>.
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Syncfusion.GridCommon.ScrollAxis.ScrollInfo"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ScrollInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.ScrollInfo.Enabled">
            <summary>
            Gets or sets a value indicating whether the scroll bar is enabled or not.
            </summary>
            <value>A boolean value that indicates whether the scroll bar is enabled.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.ScrollInfo.LargeChange">
            <summary>
            Gets or sets a value to be added to or subtracted from the value of the property when the scroll box is moved a large distance.
            </summary>
            <value>A value to be added to or subtracted from the value of the property when the scroll box is moved a large distance.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.ScrollInfo.Maximum">
            <summary>
            Gets or sets the upper limit of values of the scrollable range.
            </summary>
            <value>The upper limit of values of the scrollable range.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.ScrollInfo.Minimum">
            <summary>
            Gets or sets the lower limit of values of the scrollable range.
            </summary>
            <value>The lower limit of values of the scrollable range.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.ScrollInfo.SmallChange">
            <summary>
            Gets or sets the value to be added to or subtracted from the value of the property when the scroll box is moved a small distance.
            </summary>
            <value>The value to be added to or subtracted from the value of the property when the scroll box is moved a small distance.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.ScrollInfo.Value">
            <summary>
            Gets or sets a numeric value that represents the current position of the scroll box on the scroll bar control.
            </summary>
            <value>A numeric value that represents the current position of the scroll box on the scroll bar control.</value>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.ScrollInfo.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.ScrollInfo.ValueChanged">
            <summary>
            Occurs when the current position of the scroll box on the scroll bar has changed.
            </summary>
        </member>
        <member name="E:Syncfusion.GridCommon.ScrollAxis.ScrollInfo.ValueChanging">
            <summary>
            Occurs when the current position of the scroll box on the scroll bar is being changed.
            </summary>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.ValueChangingEventHandler">
            <summary>
            Delegate that handles the <see cref="E:Syncfusion.GridCommon.ScrollAxis.ScrollInfo.ValueChanging"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Syncfusion.GridCommon.ScrollAxis.ValueChangingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.ValueChangingEventArgs">
             <summary>
             Provides data for the <see cref="E:Syncfusion.GridCommon.ScrollAxis.ScrollInfo.ValueChanging"/> event.
             </summary>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.ValueChangingEventArgs.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the ValueChangingEventArgs class.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.ValueChangingEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the value change in scroll bar.
            </summary>
            <value>A boolean value indicating whether to cancel the value change in scroll bar.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.ValueChangingEventArgs.NewValue">
            <summary>
            Gets the new value.
            </summary>
            <value>The new value.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.ValueChangingEventArgs.OldValue">
            <summary>
            Gets the old value.
            </summary>
            <value>The old value.</value>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.RangeValuePair`1">
             <summary>
             Holds a range together with a value assigned to the range.
             </summary>
             <typeparam name="T">The type of the parameter.</typeparam>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.RangeValuePair`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the RangeValuePair class.
            </summary>
            <param name="start">The start of the range.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.RangeValuePair`1.#ctor(System.Int32,System.Int32,`0)">
            <summary>
            Initializes a new instance of the RangeValuePair class.
            </summary>
            <param name="start">The start of the range.</param>
            <param name="count">The count of the range.</param>
            <param name="value">The value for the range.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.RangeValuePair`1.CompareTo(System.Object)">
            <summary>
            Compares the current range with the range of the other object. The value is 
            ignored.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than <paramref name="obj"/>. Zero This instance is equal to <paramref name="obj"/>. Greater than zero This instance is greater than <paramref name="obj"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.RangeValuePair`1.ToString">
            <summary>
            Gets the Debug / text information about the node.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> with state information about this <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.RangeValuePair`1.Start">
            <summary>
            Gets or sets the start  of the range.
            </summary>
            <value>The start of the range.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.RangeValuePair`1.Count">
            <summary>
            Gets or sets the count of the range.
            </summary>
            <value>The count of the range.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.RangeValuePair`1.Value">
            <summary>
            Gets or sets the value for the range.
            </summary>
            <value>The value for the range.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.RangeValuePair`1.End">
            <summary>
            Gets or sets the end of the range.
            </summary>
            <value>The end of the range.</value>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.SortedRangeValueList`1">
             <summary>
             A sorted list with <see cref="T:Syncfusion.GridCommon.ScrollAxis.RangeValuePair`1"/> ordered by the
             start index of the ranges. SortedRangeValueList ensures that ranges 
             of the elements inside the list do not overlap and it also ensures
             that there are no empty gaps meaning that the subsequent range will
             always have the Start position be set to the End position of the previous
             range plus one.
             </summary>
             <typeparam name="T">The type of the parameter.</typeparam>
             <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.SortedRangeValueList`1.#ctor">
            <summary>
            Initializes a new instance of the SortedRangeValueList class.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.SortedRangeValueList`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the SortedRangeValueList class.
            </summary>
            <param name="defaultValue">The default value used for filling gaps.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.SortedRangeValueList`1.Clear">
            <summary>
            Clears the stored ranges.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.SortedRangeValueList`1.GetRange(System.Int32,System.Int32@)">
            <summary>
            Gets a range that contains the specified index and also 
            returns a count indicating the delta between the index and the 
            end range.
            </summary>
            <param name="index">The index of the range.</param>
            <param name="count">The count of the range.</param>
            <returns>Returns a count indicating the delta</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.SortedRangeValueList`1.Insert(System.Int32,System.Int32)">
            <summary>
            Inserts a range initialized with <see cref="P:Syncfusion.GridCommon.ScrollAxis.SortedRangeValueList`1.DefaultValue"/> at
            the specified index. When necessary it splits a range and creates
            a new range value pair.
            </summary>
            <param name="insertAt">The insertion point.</param>
            <param name="count">The count of the items to be inserted.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.SortedRangeValueList`1.Insert(System.Int32,System.Int32,`0)">
            <summary>
            Inserts a range initialized with a given value at 
            the specified index. When necessary it splits a range and creates
            a new range value pair.
            </summary>
            <param name="insertAt">The insertion point.</param>
            <param name="count">The count.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.SortedRangeValueList`1.Insert(System.Int32,System.Int32,Syncfusion.GridCommon.ScrollAxis.SortedRangeValueList{`0})">
            <summary>
            Inserts a range initialized with <see cref="P:Syncfusion.GridCommon.ScrollAxis.SortedRangeValueList`1.DefaultValue"/> at
            the specified index. When necessary it splits a range and creates
            a new range value pair.
            </summary>
            <param name="insertAt">The insertion point.</param>
            <param name="count">The count.</param>
            <param name="moveRanges">Allocate this object before a preceding remove call when moving ranges. 
            Otherwise specify null.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.SortedRangeValueList`1.Insert(System.Int32,System.Int32,`0,Syncfusion.GridCommon.ScrollAxis.SortedRangeValueList{`0})">
            <summary>
            Inserts a range initialized with a given value at
            the specified index. When necessary it splits a range and creates
            a new range value pair.
            </summary>
            <param name="insertAt">The insertion point.</param>
            <param name="count">The count.</param>
            <param name="value">The value.</param>
            <param name="moveRanges">Allocate this object before a preceding Remove call when moving ranges. 
            Otherwise specify null.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.SortedRangeValueList`1.Remove(System.Int32,System.Int32)">
            <summary>
            Removes a range at the specified index. When necessary ranges
            are merged when preceding and subsequent ranges have the same 
            value.
            </summary>
            <param name="removeAt">The index for the range to be removed.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.SortedRangeValueList`1.Remove(System.Int32,System.Int32,Syncfusion.GridCommon.ScrollAxis.SortedRangeValueList{`0})">
            <summary>
            Removes a range at the specified index. When necessary ranges
            are merged when preceding and subsequent ranges have the same 
            value.
            </summary>
            <param name="removeAt">The index for the range to be removed.</param>
            <param name="count">The count.</param>
            <param name="moveRanges">Allocate this object before a remove call when moving ranges
            and pass it to a subsequent insert call. Otherwise specify null.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.SortedRangeValueList`1.SetRange(System.Int32,System.Int32,`0)">
            <summary>
            Sets the value for a range at the specified index. When necessary ranges
            are split or merged to make sure integrity of the list is maintained.
            (SortedRangeValueList ensures that ranges
            of the elements inside the list do not overlap and it also ensures
            that there are no empty gaps meaning that the subsequent range will
            always have the Start position be set to the End position of the previous
            range plus one.)
            </summary>
            <param name="index">The index for the range to be changed.</param>
            <param name="count">The count.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.SortedRangeValueList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.SortedRangeValueList`1.System#Collections#Generic#IEnumerable{Syncfusion#GridCommon#ScrollAxis#RangeValuePair{T}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.SortedRangeValueList`1.DefaultValue">
            <summary>
            Gets or sets the default value used for filling gaps.
            </summary>
            <value>The default value used for filling gaps.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.SortedRangeValueList`1.Count">
            <summary>
            Gets the count which is the same as the end position of the last range.
            </summary>
            <value>The count which is the same as the end position of the last range.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.SortedRangeValueList`1.Item(System.Int32)">
            <summary>
            Gets the value of the range that contains the specified index
            or changes the value of the range. When necessary it splits a range and creates
            a new range value pair to hold the new value for the specified index.
            </summary>
            <param name="index">index value</param>
            <value>The value of the range that contains the specified index.</value>
            <returns>Returns the value range for the specified index.</returns>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo">
             <summary>
             Contains information about a visible line (can also be a row or column).
             </summary>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="F:Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo.IsLastLine">
            <summary>
            A boolean value indicating whether the visible line is the last line.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo.#ctor(System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the VisibleLineInfo class.
            </summary>
            <param name="visibleIndex">Visible index of the line.</param>
            <param name="lineIndex">Absolute index of the line.</param>
            <param name="size">The size.</param>
            <param name="clippedOrigin">The clipped origin.</param>
            <param name="scrollOffset">The scroll offset.</param>
            <param name="isHeader">if set to <b>true</b> line is a header.</param>
            <param name="isFooter">if set to <b>true</b> line is a footer.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo"/> class. Used for BinarySearch.
            </summary>
            <param name="clippedOrigin">The clipped origin.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo"/> class. Used for BinarySearch.
            </summary>
            <param name="lineIndex">Index of the line.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo.ToString">
            <summary>
            Returns a string describing the state of the object.
            </summary>
            <returns>A string describing the state of the object.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo.CompareTo(Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>.
            </returns>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo.VisibleIndex">
            <summary>
            Gets the visible index of the line.
            </summary>
            <value>The visible index of the line.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo.IsVisible">
            <summary>
            Gets a value indicating whether the line is visible.
            </summary>
            <value>A boolean value indicating whether the line is visible.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo.LineIndex">
            <summary>
            Gets the index of the line.
            </summary>
            <value>The index of the line.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo.Size">
            <summary>
            Gets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo.ClippedSize">
            <summary>
            Gets the size of the clipped area.
            </summary>
            <value>The size of the clipped area.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo.Corner">
            <summary>
            Gets the corner.
            </summary>
            <value>The corner.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo.ClippedCorner">
            <summary>
            Gets the clipped corner.
            </summary>
            <value>The clipped corner.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo.ClippedOrigin">
            <summary>
            Gets the clipped origin.
            </summary>
            <value>The clipped origin.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo.Origin">
            <summary>
            Gets the origin.
            </summary>
            <value>The origin.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo.ScrollOffset">
            <summary>
            Gets the scroll offset.
            </summary>
            <value>The scroll offset.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo.ClippedCornerExtent">
            <summary>
            Gets or sets the clipped corner extent.
            </summary>
            <value>The clipped corner extent.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo.IsClipped">
            <summary>
            Gets a value indicating whether this instance is clipped.
            </summary>
            <value>
            <b>True</b> if this instance is clipped, otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo.IsClippedCorner">
            <summary>
            Gets a value indicating whether this instance corner is clipped.
            </summary>
            <value>
            <b>True</b> if this instance corner is clipped, otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo.IsClippedOrigin">
            <summary>
            Gets a value indicating whether this instance origin is clipped.
            </summary>
            <value>
            <b>True</b> if this instance origin is clipped, otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo.IsClippedBody">
            <summary>
            Gets a value indicating whether this instance is clipped taking into consideration, whether it is the first or last visible line 
            and no clipping is needed for these cases.
            </summary>
            <value>A boolean value indicating whether this instance is clipped taking into consideration, whether it is the first or last visible line 
            and no clipping is needed for these cases.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo.Region">
            <summary>
            Gets the axis region this line belongs to.
            </summary>
            <value>The axis region this line belongs to.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo.IsHeader">
            <summary>
            Gets a value indicating whether this instance is a header.
            </summary>
            <value><b>True</b> if this instance is a header, otherwise <b>false</b>.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo.IsFooter">
            <summary>
            Gets a value indicating whether this instance is a footer.
            </summary>
            <value><b>True</b> if this instance is a footer, otherwise <b>false</b>.</value>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.VisibleLinesCollection">
             <summary>
             A strong-typed collection of <see cref="T:Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo"/> items.
             </summary>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="F:Syncfusion.GridCommon.ScrollAxis.VisibleLinesCollection.firstBodyVisibleIndex">
            <summary>
            Gets the first visible index of the body.
            </summary>
        </member>
        <member name="F:Syncfusion.GridCommon.ScrollAxis.VisibleLinesCollection.firstFooterVisibleIndex">
            <summary>
            Gets the first visible index of the footer.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.VisibleLinesCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.ScrollAxis.VisibleLinesCollection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.VisibleLinesCollection.GetVisibleLineAtPoint(System.Double)">
            <summary>
            Gets the visible line at point.
            </summary>
            <param name="point">The point at which the visible line is to be obtained.</param>
            <returns>The visible line at point.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.VisibleLinesCollection.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.VisibleLinesCollection.GetVisibleLineAtLineIndex(System.Int32)">
            <summary>
            Gets the visible line at line index.
            </summary>
            <param name="lineIndex">Index of the line.</param>
            <returns>The visible line at line index.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.VisibleLinesCollection.GetVisibleLineNearLineIndex(System.Int32)">
            <summary>
            Gets the visible line for a line index. If the specified
            line is hidden the next visible line is returned.
            </summary>
            <param name="lineIndex">Index of the line.</param>
            <returns>The first visible line for a line index that is not hidden.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.VisibleLinesCollection.AnyVisibleLines(System.Int32,System.Int32)">
            <summary>
            Gets a boolean value indicating whether any of the lines with the given absolute line index 
            are visible.
            </summary>
            <param name="lineIndex1">The line index 1.</param>
            <param name="lineIndex2">The line index 2.</param>
            <returns>
            A boolean value indicating whether any of the lines with the given absolute line index 
            are visible.
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.VisibleLinesCollection.RemoveLinesInternal(System.Int32,System.Int32)">
            <summary>
            Used to remove lines internally
            </summary>
            <param name="lineIndex">index for removing line</param>
            <param name="count">number of lines needs to be remove</param>
            <returns>Returns the boolean value</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.VisibleLinesCollection.InsertLinesInternal(System.Int32,System.Int32)">
            <summary>
            Used to insert lines internally
            </summary>
            <param name="lineIndex">index for inserting line</param>
            <param name="count">number of lines need to insert</param>
            <returns>Returns the boolean value</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.VisibleLinesCollection.VisibleLineIndexes">
            <summary>
            Gets the visible line indexes.
            </summary>
            <value>The visible line indexes.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.VisibleLinesCollection.FirstBodyVisibleIndex">
            <summary>
            Gets or sets the index of the first visible line in the body region.
            </summary>
            <value>The index of the first visible line in the body region.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.VisibleLinesCollection.FirstFooterVisibleIndex">
            <summary>
            Gets or sets the index of the first visible line in the footer region.
            </summary>
            <value>The index of the first visible line in the footer region.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.ScrollAxis.VisibleLinesCollection.LastBodyVisibleIndex">
            <summary>
            Gets the index of the last visible line in the body region.
            </summary>
            <value>The index of the last visible line in the body region.</value>
        </member>
        <member name="T:Syncfusion.GridCommon.ScrollAxis.VisibleLinesCollection.VisibleLineInfoLineIndexComparer">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.ScrollAxis.VisibleLinesCollection.VisibleLineInfoLineIndexComparer"/> class.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.GridCommon.ScrollAxis.VisibleLinesCollection.VisibleLineInfoLineIndexComparer.Compare(Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo,Syncfusion.GridCommon.ScrollAxis.VisibleLineInfo)">
            <summary>
            Compares the given visible lines.
            </summary>
            <param name="x">The visible line-1.</param>
            <param name="y">The visible line-2.</param>
            <returns>Returns a integer value indicating the comparison of the given visible lines.</returns>
        </member>
        <member name="T:Syncfusion.GridCommon.Utility.DoubleSpan">
            <summary>
            Holds a start and end value with double precision.
            </summary>
            <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="F:Syncfusion.GridCommon.Utility.DoubleSpan.Empty">
            <summary>
            An empty object.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.Utility.DoubleSpan.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.Utility.DoubleSpan"/> struct.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Utility.DoubleSpan.ToString">
            <summary>
            Gets a string with start and end values.
            </summary>
            <returns>
             Returns a string with start and end values.
            </returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Utility.DoubleSpan.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><b>True</b> if the given object and this instance are the same type and represent the same value, 
            otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Utility.DoubleSpan.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Utility.DoubleSpan.op_Equality(Syncfusion.GridCommon.Utility.DoubleSpan,Syncfusion.GridCommon.Utility.DoubleSpan)">
            <summary>
            Implements the operator == for comparing the given objects.
            </summary>
            <param name="obj1">The object 1.</param>
            <param name="obj2">The object 2.</param>
            <returns>The comparison result of the operator.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Utility.DoubleSpan.op_Inequality(Syncfusion.GridCommon.Utility.DoubleSpan,Syncfusion.GridCommon.Utility.DoubleSpan)">
            <summary>
            Implements the operator != for comparing the given objects.
            </summary>
            <param name="obj1">The object 1.</param>
            <param name="obj2">The object 2.</param>
            <returns>The comparison result of the operator.</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Utility.DoubleSpan.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><b>true</b> if this instance is empty; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.Utility.DoubleSpan.Start">
            <summary>
            Gets or sets the start.
            </summary>
            <value>The start.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.Utility.DoubleSpan.End">
            <summary>
            Gets or sets the end.
            </summary>
            <value>The end.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.Utility.DoubleSpan.Length">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="T:Syncfusion.GridCommon.Utility.Hashtable">
            <summary>
             Creates a new HashTable 
             </summary>  
             <exclude/>
             [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.Utility.Hashtable.Clone">
            <summary>
            Creates a new HashTable 
            </summary>
            <returns>Returns the instance of newly created HashTable</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Utility.Hashtable.Contains(System.Object)">
            <summary>
            Used to check whether the key is in collection or not
            </summary>
            <param name="key">key value</param>
            <returns>Returns the boolean value denotes whether the collection contains the key or not</returns>
        </member>
        <member name="T:Syncfusion.GridCommon.Utility.Int32Span">
            <summary>
            Holds a start and end value with integer precision.
            </summary>
            <exclude/>
            [ClassReference(IsReviewed = false)]
        </member>
        <member name="M:Syncfusion.GridCommon.Utility.Int32Span.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.GridCommon.Utility.Int32Span"/> struct.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Syncfusion.GridCommon.Utility.Int32Span.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><b>True</b> if the given object and this instance are the same type and represent the same value, 
            otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Utility.Int32Span.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Utility.Int32Span.op_Equality(Syncfusion.GridCommon.Utility.Int32Span,Syncfusion.GridCommon.Utility.Int32Span)">
            <summary>
            Implements the operator == for comparing the given objects.
            </summary>
            <param name="obj1">The object 1.</param>
            <param name="obj2">The object 2.</param>
            <returns>The comparison result of the operator.</returns>
        </member>
        <member name="M:Syncfusion.GridCommon.Utility.Int32Span.op_Inequality(Syncfusion.GridCommon.Utility.Int32Span,Syncfusion.GridCommon.Utility.Int32Span)">
            <summary>
            Implements the operator != for comparing the given objects.
            </summary>
            <param name="obj1">The object 1.</param>
            <param name="obj2">The object 2.</param>
            <returns>The comparison result of the operator.</returns>
        </member>
        <member name="P:Syncfusion.GridCommon.Utility.Int32Span.Start">
            <summary>
            Gets or sets the start.
            </summary>
            <value>The start.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.Utility.Int32Span.End">
            <summary>
            Gets or sets the end.
            </summary>
            <value>The end.</value>
        </member>
        <member name="P:Syncfusion.GridCommon.Utility.Int32Span.Count">
            <summary>
            Gets or sets the count (equals end - start + 1)
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:Syncfusion.GridCommon.ComponentModel.NonFinalizeDisposable">
            <summary>
            Used to dispose the objects
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.GridCommon.ComponentModel.NonFinalizeDisposable.Dispose">
            <summary>
            Releases all resources used by the Component.
            </summary>
        </member>
        <member name="M:Syncfusion.GridCommon.ComponentModel.NonFinalizeDisposable.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Component and optionally releases the managed resources.
            </summary>
            <param name="disposing"> if true - release both managed and unmanaged resources; 
            if false - release only unmanaged resources.</param>
            <remarks>See the documentation for the <see cref="!:System.ComponentModel.Component"/> class and its Dispose member.</remarks>
        </member>
        <member name="T:Syncfusion.GridCommon.ComponentModel.Disposable">
            <summary>
             Releases the unmanaged resources used by the Component and optionally releases the managed resources.
             </summary>
             <exclude/>
        </member>
        <member name="M:Syncfusion.GridCommon.ComponentModel.Disposable.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Syncfusion.GridCommon.ComponentModel.Disposable"/> class.
            In C# and C++, finalize-r are expressed using destructor syntax.
            </summary>
        </member>
    </members>
</doc>
